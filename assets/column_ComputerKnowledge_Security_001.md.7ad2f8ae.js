import{_ as s,o,c as n,Q as a}from"./chunks/framework.98c15f2e.js";const u=JSON.parse('{"title":"浅谈Web前端安全策略xss和csrf，及又该如何预防？","description":"","frontmatter":{"title":"浅谈Web前端安全策略xss和csrf，及又该如何预防？","author":"周一","date":"2021-06-12","categories":["计算机基础知识"],"tags":["前端安全"],"sidebar":"auto"},"headers":[{"level":1,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":1,"title":"一、XSS 跨站请求攻击","slug":"一、xss-跨站请求攻击","link":"#一、xss-跨站请求攻击","children":[{"level":2,"title":"1、什么是 XSS","slug":"_1、什么是-xss","link":"#_1、什么是-xss","children":[]},{"level":2,"title":"2、场景模拟","slug":"_2、场景模拟","link":"#_2、场景模拟","children":[]},{"level":2,"title":"3、XSS 的攻击类型","slug":"_3、xss-的攻击类型","link":"#_3、xss-的攻击类型","children":[]},{"level":2,"title":"4、如何防御 XSS","slug":"_4、如何防御-xss","link":"#_4、如何防御-xss","children":[]}]},{"level":1,"title":"二、XSRF 跨站请求伪造","slug":"二、xsrf-跨站请求伪造","link":"#二、xsrf-跨站请求伪造","children":[{"level":2,"title":"1、什么是 csrf","slug":"_1、什么是-csrf","link":"#_1、什么是-csrf","children":[]},{"level":2,"title":"2、场景模拟","slug":"_2、场景模拟-1","link":"#_2、场景模拟-1","children":[{"level":3,"title":"（1）场景一","slug":"_1-场景一","link":"#_1-场景一","children":[]},{"level":3,"title":"（2）场景二","slug":"_2-场景二","link":"#_2-场景二","children":[]}]},{"level":2,"title":"3、CSRF 的特点","slug":"_3、csrf-的特点","link":"#_3、csrf-的特点","children":[]},{"level":2,"title":"4、CSRF 攻击方式","slug":"_4、csrf-攻击方式","link":"#_4、csrf-攻击方式","children":[]},{"level":2,"title":"5、CSRF 常见的攻击类型","slug":"_5、csrf-常见的攻击类型","link":"#_5、csrf-常见的攻击类型","children":[]},{"level":2,"title":"6、如何防御 csrf","slug":"_6、如何防御-csrf","link":"#_6、如何防御-csrf","children":[]}]},{"level":1,"title":"三、CSRF 与 XSS 区别","slug":"三、csrf-与-xss-区别","link":"#三、csrf-与-xss-区别","children":[]},{"level":1,"title":"四、结束语","slug":"四、结束语","link":"#四、结束语","children":[]}],"relativePath":"column/ComputerKnowledge/Security/001.md","filePath":"column/ComputerKnowledge/Security/001.md","lastUpdated":1723906346000}'),l={name:"column/ComputerKnowledge/Security/001.md"},e=a(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p>随着前端技术的不断革新，前端早已不再是简简单单的做页面了。现在的前端网站上会涉及到大量用户的数据和隐私，那这些用户数据安全吗？答案并不是肯定的。因此，这个时候前端安全就显得尤为重要。如果网站没有做安全策略，那么就会很容易被攻击者通过某些不为人知的操作，获取到用户的隐私信息。 在下面的这篇文章中，将讲解前端安全策略 <code>xss</code> 和 <code>csrf</code> ！一起来一探究竟吧~</p><h1 id="一、xss-跨站请求攻击" tabindex="-1">一、XSS 跨站请求攻击 <a class="header-anchor" href="#一、xss-跨站请求攻击" aria-label="Permalink to &quot;一、XSS 跨站请求攻击&quot;">​</a></h1><h2 id="_1、什么是-xss" tabindex="-1">1、什么是 XSS <a class="header-anchor" href="#_1、什么是-xss" aria-label="Permalink to &quot;1、什么是 XSS&quot;">​</a></h2><p>跨站脚本攻击，缩写为 XSS(Cross Site Scripting)，是利用网页的漏洞，通过某种方式给网页注入恶意代码，使用户加载网页时执行注入的恶意代码。</p><h2 id="_2、场景模拟" tabindex="-1">2、场景模拟 <a class="header-anchor" href="#_2、场景模拟" aria-label="Permalink to &quot;2、场景模拟&quot;">​</a></h2><p>假设有一个博客网站，这个博客网站的安全做的很差。那么我现在准备在这个网站上发布一篇博客，在发布的这篇博客中，我嵌入了一段<code>&lt;script&gt;</code>脚本，其中脚本内容包括：获取用户的 <code>cookie</code> ，并且发送到我的服务器上（服务器配合跨域）。</p><p>写完之后呢，我成功把这篇博客发送出去了。现在，只要有人在这个网站查看我这篇博客文章，那么我就能轻松地收割访问者的 <code>cookie</code> ，这就是一个简单的 <code>xss</code> 攻击流程。</p><p>了解完 <code>xss</code> 的定义之后，我们再来了解 <code>xss</code> 的攻击类型。</p><h2 id="_3、xss-的攻击类型" tabindex="-1">3、XSS 的攻击类型 <a class="header-anchor" href="#_3、xss-的攻击类型" aria-label="Permalink to &quot;3、XSS 的攻击类型&quot;">​</a></h2><p><strong>XSS 一共分为三种：</strong></p><ul><li>非持久型跨站（也叫反射型）</li><li>持久型跨站（也叫存储型）</li><li>DOM 跨站</li></ul><p><strong>（1）非持久型跨站（反射型）</strong></p><p><strong>① 攻击步骤</strong></p><ul><li>攻击者构造出特殊的 <code>URL</code> ，其中包含恶意代码。</li><li>用户打开带有恶意代码的 <code>URL</code> 时，网站服务端将恶意代码从 <code>URL</code> 中取出，拼接在<code>HTML</code>中返回给浏览器。</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li></ul><p><strong>② 攻击场景</strong></p><p>反射型 <code>XSS</code> (也被称为非持久性 <code>XSS</code> )漏洞常见于通过 <code>URL</code> 传递参数的功能，如网站搜索、跳转等。</p><p><strong>③ 攻击方式</strong></p><p>由于需要用户主动打开恶意的 <code>URL</code> 才能生效，攻击者往往会结合多种手段诱导用户点击。</p><p><code>POST</code> 的内容也可以触发反射型 <code>XSS</code>，只不过其触发条件比较苛刻（需要构造表单提交页面，并引导用户点击），所以非常少见。</p><p><strong>（2）持久型跨站（存储型）</strong></p><p><strong>① 攻击步骤</strong></p><ul><li>攻击者将<strong>恶意代码</strong>提交到目标网站的数据库中。</li><li>用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在<code>HTML</code>中返回给浏览器。</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用<strong>目标网站接口</strong>执行攻击者指定的操作。</li></ul><p><strong>② 攻击场景</strong></p><p>存储型 <code>XSS</code> 攻击 (也被称为持久型 <code>XSS</code> )常见于<strong>带有用户保存数据功能</strong>的网站，如论坛发帖、商品评论、用户私信等。</p><p><strong>③ 危害</strong></p><p>它是<strong>最危险的</strong>一种跨站脚本，相比反射型 <code>XSS</code> 和 <code>DOM</code> 型 <code>XSS</code> 具有更高的<strong>隐蔽性</strong>，危害更大，因为它<strong>不需要用户手动触发</strong>。</p><p>任何允许用户存储数据的 <code>web</code> 程序都可能存在存储型 <code>XSS</code> 漏洞，当攻击者提交一段 <code>XSS</code> 代码后，被服务器端接收并存储，当所有浏览者访问某个页面时都会被 <code>XSS</code> 。</p><p><strong>（3）DOM 跨站</strong></p><p><strong>① 攻击步骤</strong></p><ul><li>攻击者构造出特殊的 <code>URL</code> ，其中包含恶意代码。</li><li>用户打开带有恶意代码的 <code>URL</code> 。</li><li>用户浏览器接收到响应后解析执行，前端 <code>JavaScript</code> 取出 <code>URL</code> 中的恶意代码并执行。</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li></ul><p><strong>② 危害</strong></p><p>DOM 通常表示 <code>html</code>、<code>xhtml</code>和<code>xml</code>中的对象，使用 <code>DOM</code> 可以允许程序和脚本动态的访问和更新文档的内容、结构和样式。它不需要服务器解析响应的直接参与，触发 <code>XSS</code> <strong>依靠的是浏览器端的 DOM 解析</strong> 。</p><blockquote><p>对以上三种 xss 的攻击类型进行一个小结：</p><p><strong>反射型跟存储型的区别是：</strong></p><p>存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。</p><p><strong>DOM 型跟前两种区别是：</strong></p><p>DOM 型 XSS 攻击中，取出和执行恶意代码由<strong>浏览器端</strong>完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于<strong>服务端</strong>的安全漏洞。</p><p><strong>三者的对比：</strong></p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">存储区</th><th style="text-align:left;">插入点</th></tr></thead><tbody><tr><td style="text-align:left;">反射型 XSS</td><td style="text-align:left;">URL</td><td style="text-align:left;">HTML</td></tr><tr><td style="text-align:left;">存储型 XSS</td><td style="text-align:left;">后端数据库</td><td style="text-align:left;">HTML</td></tr><tr><td style="text-align:left;">DOM 型 XSS</td><td style="text-align:left;">后端数据库/前端存储/URL</td><td style="text-align:left;">前端 JavaScript</td></tr></tbody></table></blockquote><h2 id="_4、如何防御-xss" tabindex="-1">4、如何防御 XSS <a class="header-anchor" href="#_4、如何防御-xss" aria-label="Permalink to &quot;4、如何防御 XSS&quot;">​</a></h2><p>只要有输入数据的地方，就可能存在 <code>XSS</code> 危险。</p><p><strong>（1）设置 HttpOnly</strong></p><p>在 <code>cookie</code> 中设置 <code>HttpOnly</code> 属性后， <code>js</code> 脚本将无法读取到 <code>cookie</code> 信息。</p><p><strong>（2）转义字符串</strong></p><p><code>XSS</code> 攻击大多都是由<strong>数据的输入和输出</strong>作为攻击点进行攻击，所以针对这几个攻击点，对<strong>数据</strong>进行过滤。</p><p>其中，数据包括前端数据的输入和输出、后端数据的输入和输出。</p><p><strong>那么，数据过滤是什么？又如何对数据进行过滤呢？</strong></p><p>数据过滤是对<strong>输入格式</strong>的检查，例如：邮箱，电话号码，用户名，密码……等，按照规定的格式输入。它不仅仅是前端负责，后端也要做相同的过滤检查。如果没有做数据过滤，攻击者完全可以绕过正常的<strong>输入流程</strong>，直接利用<strong>相关接口</strong>向服务器发送设置。</p><p>因此，可以通过<strong>封装过滤函数</strong>对数据进行过滤，目的是将几个攻击者常用的输入内容都进行转移，这样就避免了浏览器解析成了脚本代码。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">escape</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">&amp;</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&amp;amp;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">&lt;</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&amp;lt;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&amp;gt;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">&quot;</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&amp;quto;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">&#39;</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&amp;#39;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">\`</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&amp;#96;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&amp;#x2F;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> str;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">escape</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/&amp;/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&amp;amp;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/&lt;/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&amp;lt;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/&gt;/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&amp;gt;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/&quot;/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&amp;quto;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/&#39;/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&amp;#39;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/\`/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&amp;#96;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&amp;#x2F;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> str;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>（3）白名单</strong></p><p>对于<strong>显示富文本</strong>来说，不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。这种情况通常采用<strong>白名单过滤</strong>的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐使用白名单的方式。</p><h1 id="二、xsrf-跨站请求伪造" tabindex="-1">二、XSRF 跨站请求伪造 <a class="header-anchor" href="#二、xsrf-跨站请求伪造" aria-label="Permalink to &quot;二、XSRF 跨站请求伪造&quot;">​</a></h1><h2 id="_1、什么是-csrf" tabindex="-1">1、什么是 csrf <a class="header-anchor" href="#_1、什么是-csrf" aria-label="Permalink to &quot;1、什么是 csrf&quot;">​</a></h2><p>跨站请求伪造(Cross-site request forgery)，也被称为 <code>one-click attack</code> 或者 session riding，通常缩写为 <code>CSRF</code> 或者 <code>XSRF</code>，是一种挟制用户在当前已登录的 <code>Web</code> 应用程序上执行**<u>非本意的操作</u>**的攻击方法。</p><p>如：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的<strong>用户验证</strong>，达到冒充用户对被攻击的网站执行某项操作的目的。</p><h2 id="_2、场景模拟-1" tabindex="-1">2、场景模拟 <a class="header-anchor" href="#_2、场景模拟-1" aria-label="Permalink to &quot;2、场景模拟&quot;">​</a></h2><h3 id="_1-场景一" tabindex="-1">（1）场景一 <a class="header-anchor" href="#_1-场景一" aria-label="Permalink to &quot;（1）场景一&quot;">​</a></h3><p>假设你正在购物，看重了某个商品，商品 <code>id</code> 是 <code>100</code> 。同时这个商品的付费接口时 <code>xxx.com/pay?id=100</code> ，但是没有任何验证。这个时候我是攻击者，我看中了一个商品，<code>id</code> 是 <code>200</code> 。那么，我如何让你来为我付款？</p><p>这个时候我像你发送了一封邮件，邮件标题很是吸引人。但邮件正文隐藏着 <code>&lt;img src = &quot;xxx.com/pay?id=200&quot;&gt;</code> 。你一查看邮件，一点击，就帮我购买了 <code>id</code> 是 <code>200</code> 的商品。</p><h3 id="_2-场景二" tabindex="-1">（2）场景二 <a class="header-anchor" href="#_2-场景二" aria-label="Permalink to &quot;（2）场景二&quot;">​</a></h3><p>要完成一次 <code>CSRF</code> 攻击，受害者必须依次完成<strong>两个步骤</strong>：</p><ul><li>登录受信任网站 <code>A</code> ，并在本地生成 <code>Cookie</code> 。</li><li>在不登出 <code>A</code> 的情况下，访问危险网站 <code>B</code> 。</li></ul><p>看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到 CSRF 的攻击”。是的，确实如此，但是呢，你可能没办法保证<strong>以下情况</strong>不会发生哦！<strong>比如：</strong></p><ul><li>你不能保证你登录了一个网站后，不再打开一个 <code>tab</code> 页面并访问另外的网站。</li><li>你不能保证你关闭浏览器了后，你本地的 <code>Cookie</code> 会立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会<strong>错误的认为</strong>关闭浏览器就等于退出登录/结束会话了......） <img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202304151129349.gif" alt="害怕"></li></ul><p>上述中所说的网站，可能是一个存在其他漏洞，但又<strong>很受信任的</strong>且<strong>经常被人访问的</strong>网站。</p><h2 id="_3、csrf-的特点" tabindex="-1">3、CSRF 的特点 <a class="header-anchor" href="#_3、csrf-的特点" aria-label="Permalink to &quot;3、CSRF 的特点&quot;">​</a></h2><ul><li>攻击一般发起在<strong>第三方网站</strong>，而不是被攻击的网站。被攻击的网站无法防止攻击发生。</li><li>攻击利用受害者在被攻击网站的<strong>登录凭证</strong>，<strong>冒充受害者提交操作</strong>，而不是直接窃取数据。</li><li>整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“<strong>冒用</strong>”。</li></ul><h2 id="_4、csrf-攻击方式" tabindex="-1">4、CSRF 攻击方式 <a class="header-anchor" href="#_4、csrf-攻击方式" aria-label="Permalink to &quot;4、CSRF 攻击方式&quot;">​</a></h2><p><strong>跨站请求可以用各种方式：</strong></p><ul><li>图片 <code>URL </code> 、超链接、 <code>CORS</code> 、 <code>Form</code> 提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。</li><li>CSRF 通常是<strong>跨域</strong>的，因为外域通常更容易被攻击者掌控。但是如果本域下有容易被利用的功能，比如可以发图和链接的论坛和评论区，攻击可以直接在本域下进行，且这种攻击方式更加危险！</li></ul><h2 id="_5、csrf-常见的攻击类型" tabindex="-1">5、CSRF 常见的攻击类型 <a class="header-anchor" href="#_5、csrf-常见的攻击类型" aria-label="Permalink to &quot;5、CSRF 常见的攻击类型&quot;">​</a></h2><p><strong>1）GET 类型的 CSRF</strong></p><p><code>GET </code> 类型的 <code>CSRF</code> 是较为容易攻击的一种方式，只需要一个 <code>HTTP</code> 请求，攻击者一般做出以下操作：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://bank.example/withdraw?amount=10000&amp;for=hacker&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://bank.example/withdraw?amount=10000&amp;for=hacker&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在受害者访问含有这个 <code>img</code> 的页面后，浏览器会自动向<a href="http://bank.example/withdraw?account=xiaoming&amp;amount=10000&amp;for=hacker%E5%8F%91%E5%87%BA%E4%B8%80%E6%AC%A1" target="_blank" rel="noreferrer">http://bank.example/withdraw?account=xiaoming&amp;amount=10000&amp;for=hacker发出一次</a> <code>HTTP</code> 请求。 <code>bank.example</code> 就会收到包含<strong>受害者登录信息</strong>的一次跨域请求。</p><p><strong>2）POST 类型的 CSRF</strong></p><p>这种类型的 <code>CSRF</code> 攻击通常使用的是一个<strong>自动提交</strong>的表单，如：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">form</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://bank.example/withdraw&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hidden&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;account&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;xiaoming&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hidden&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;amount&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;10000&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hidden&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;for&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hacker&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">form</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.forms[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">form</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://bank.example/withdraw&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;hidden&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;account&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;xiaoming&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;hidden&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;amount&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;10000&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;hidden&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;for&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;hacker&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">form</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  document.forms[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>访问该页面后，表单会自动提交，相当于模拟用户完成了一次 <code>POST</code> 操作。</p><p><code>POST</code> 类型的攻击通常比 <code>GET</code> 要求更加严格一点，但仍并不复杂。任何个人网站、博客，被黑客上传页面的网站都有可能是发起攻击的来源，后端接口不能将安全寄托在仅允许 <code>POST</code> 上面。</p><p><strong>3）链接类型的 CSRF</strong></p><p>比起其他两种用户打开页面就中招的情况，链接类型的 <code>CSRF</code> 比较不常见，因为这种攻击方式<strong>需要用户点击链接</strong>才会触发。这种类型通常是在论坛等平台发布的图片中嵌入恶意链接，或者<strong>以广告的形式</strong>诱导用户中招，攻击者通常会以<strong>比较夸张的词语</strong>诱骗用户点击，<strong>例如：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://test.com/csrf/withdraw.php?amount=1000&amp;for=hacker&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">taget</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;_blank&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	重磅消息！！</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;http://test.com/csrf/withdraw.php?amount=1000&amp;for=hacker&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">taget</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;_blank&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	重磅消息！！</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_6、如何防御-csrf" tabindex="-1">6、如何防御 csrf <a class="header-anchor" href="#_6、如何防御-csrf" aria-label="Permalink to &quot;6、如何防御 csrf&quot;">​</a></h2><p><strong>1）验证码</strong></p><p>增加验证，例如密码、短信验证码、指纹等等，强制用户必须与应用进行交互，才能完成最终请求。这种方式能很好的遏制 <code>csrf</code> ，但是用户体验相对会比较差。</p><p><strong>2）Referer check</strong></p><p><code>referer</code> 代表<strong>请求的来源</strong>，不可以伪造。后端可以通过写一个过滤器来检查请求的 <code>headers</code> 中的 <code>referer</code> ，检验是不是本网站的请求。但缺点是浏览器可以关闭 <code>referer</code> ，且低版本的浏览器会存在伪造 <code>Referer</code> 的风险。</p><p><code>referer</code> 和 <code>origin</code> 的区别，只有 <code>post</code> 请求会携带 <code>origin</code> 请求头，而 <code>referer</code> 不论何种情况下都带。</p><p><strong>3）token</strong></p><p><code>token</code> 是最普遍的一种防御方法，后端先生成一个 <code>token</code> ，之后将此放在<strong>数据库</strong>中并发送给前端，那么前端发送请求时就会携带这个 <code>token</code> ，后端通过校验这个 <code>token</code> 和<strong>数据库</strong>中的 <code>token</code> 是否一致，以此来判断是否是本网站的请求。</p><p><strong>示例：</strong> 用户登录输入账号密码，请求登录接口，后端在用户登录信息正确的情况下将 <code>token</code> 放到<strong>数据库</strong>中，并返回 <code>token</code> 给前端，前端把 <code>token</code> 存放在 <code>localstorage</code> 中，之后再发送请求都会将 <code>token</code> 放到 <code>header</code> 中。 后端写一个过滤器，拦截 <code>POST</code> 请求，注意忽略掉不需要 <code>token</code> 的请求，比如登录接口，获取 <code>token</code> 的接口，以免还没有获取 <code>token</code> 就开始检验 <code>token</code> 。 校验原则：<strong>数据库</strong>中的 <code>token</code> 和前端 <code>header</code> 中的 <code>token</code> 一致的 <code>post</code> 请求，则说明校验成功，给客户端放行。</p><h1 id="三、csrf-与-xss-区别" tabindex="-1">三、CSRF 与 XSS 区别 <a class="header-anchor" href="#三、csrf-与-xss-区别" aria-label="Permalink to &quot;三、CSRF 与 XSS 区别&quot;">​</a></h1><p><strong>CSRF 与 XSS 区别有以下两点：</strong></p><ul><li>通常来说 <code>CSRF</code> 是由 <code>XSS</code> 实现的，<code>CSRF</code> 时常也被称为 <code>XSRF</code>（<code>CSRF</code> 实现的方式还可以是直接通过命令行发起请求等）。</li><li>本质上讲，<code>XSS</code> 是<strong>代码注入问题</strong>，<code>CSRF</code> 是 <strong>HTTP 问题</strong>。 <code>XSS</code> 是内容没有过滤导致浏览器将攻击者的输入当代码执行，<code>CSRF</code> 则是浏览器在发送 <code>HTTP</code> 请求时候进行。</li></ul><h1 id="四、结束语" tabindex="-1">四、结束语 <a class="header-anchor" href="#四、结束语" aria-label="Permalink to &quot;四、结束语&quot;">​</a></h1><p>对于前端来说，防范攻击还是很重要的，因为谁也预测不了我们写的网站何时会受到攻击。</p><p>本文很浅很浅的谈论了关于 Web 前端安全中的两种攻击模式，希望对大家有帮助！</p>`,94),p=[e];function t(r,c,d,E,i,y){return o(),n("div",null,p)}const F=s(l,[["render",t]]);export{u as __pageData,F as default};
