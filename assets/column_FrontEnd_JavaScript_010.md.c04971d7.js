import{_ as e,c as a,o as l,N as t}from"./chunks/framework.6510d215.js";const b=JSON.parse('{"title":"深度透彻掌握原型","description":"","frontmatter":{"title":"深度透彻掌握原型","author":"周一","date":"2022-10-02","categories":["前端开发"],"tags":["TypeScript"],"sidebar":"auto"},"headers":[{"level":1,"title":"深度透彻掌握原型","slug":"深度透彻掌握原型","link":"#深度透彻掌握原型","children":[]},{"level":1,"title":"序言","slug":"序言","link":"#序言","children":[]},{"level":1,"title":"一、","slug":"一、","link":"#一、","children":[{"level":2,"title":"为什么要用原型【好处】","slug":"为什么要用原型【好处】","link":"#为什么要用原型【好处】","children":[]},{"level":2,"title":"没有用原型会有什么问题？","slug":"没有用原型会有什么问题","link":"#没有用原型会有什么问题","children":[]},{"level":2,"title":"认识函数+原型定义","slug":"认识函数-原型定义","link":"#认识函数-原型定义","children":[]},{"level":2,"title":"如何访问原型对象空间上的属性和方法","slug":"如何访问原型对象空间上的属性和方法","link":"#如何访问原型对象空间上的属性和方法","children":[]},{"level":2,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[{"level":3,"title":"构造函数实例【也叫对象】如何访问原型对象空间上的属性和方法","slug":"构造函数实例【也叫对象】如何访问原型对象空间上的属性和方法","link":"#构造函数实例【也叫对象】如何访问原型对象空间上的属性和方法","children":[]},{"level":3,"title":"增加或修改原型对象的属性或方法后，所有的实例/对象将可以立即访问的到【但创建实例后再覆盖原型除外】","slug":"增加或修改原型对象的属性或方法后-所有的实例-对象将可以立即访问的到【但创建实例后再覆盖原型除外】","link":"#增加或修改原型对象的属性或方法后-所有的实例-对象将可以立即访问的到【但创建实例后再覆盖原型除外】","children":[]},{"level":3,"title":"高频面试题：创建实例后再覆盖原型，实例对象无法访问到，为什么？","slug":"高频面试题-创建实例后再覆盖原型-实例对象无法访问到-为什么","link":"#高频面试题-创建实例后再覆盖原型-实例对象无法访问到-为什么","children":[]}]},{"level":2,"title":"object.prototype","slug":"object-prototype","link":"#object-prototype","children":[]}]},{"level":1,"title":"二、","slug":"二、","link":"#二、","children":[{"level":2,"title":"1.","slug":"_1","link":"#_1","children":[]},{"level":2,"title":"2.","slug":"_2","link":"#_2","children":[]},{"level":2,"title":"3.","slug":"_3","link":"#_3","children":[]}]},{"level":1,"title":"三、","slug":"三、","link":"#三、","children":[{"level":2,"title":"1.","slug":"_1-1","link":"#_1-1","children":[]},{"level":2,"title":"2.","slug":"_2-1","link":"#_2-1","children":[]},{"level":2,"title":"3.","slug":"_3-1","link":"#_3-1","children":[]}]},{"level":1,"title":"四、","slug":"四、","link":"#四、","children":[{"level":2,"title":"1.","slug":"_1-2","link":"#_1-2","children":[]},{"level":2,"title":"2.","slug":"_2-2","link":"#_2-2","children":[]},{"level":2,"title":"3.","slug":"_3-2","link":"#_3-2","children":[]}]},{"level":1,"title":"五、","slug":"五、","link":"#五、","children":[{"level":2,"title":"1.","slug":"_1-3","link":"#_1-3","children":[]},{"level":2,"title":"2.","slug":"_2-3","link":"#_2-3","children":[]},{"level":2,"title":"3.","slug":"_3-3","link":"#_3-3","children":[]}]},{"level":1,"title":"八、结束语","slug":"八、结束语","link":"#八、结束语","children":[]},{"level":1,"title":"彩蛋 One More Thing","slug":"彩蛋-one-more-thing","link":"#彩蛋-one-more-thing","children":[{"level":2,"title":"（：往期推荐","slug":"往期推荐","link":"#往期推荐","children":[]},{"level":2,"title":"（：番外篇","slug":"番外篇","link":"#番外篇","children":[]}]}],"relativePath":"column/FrontEnd/JavaScript/010.md","lastUpdated":1667641758000}'),i={name:"column/FrontEnd/JavaScript/010.md"},r=t('<h1 id="深度透彻掌握原型" tabindex="-1">深度透彻掌握原型 <a class="header-anchor" href="#深度透彻掌握原型" aria-label="Permalink to &quot;深度透彻掌握原型&quot;">​</a></h1><h1 id="序言" tabindex="-1">序言 <a class="header-anchor" href="#序言" aria-label="Permalink to &quot;序言&quot;">​</a></h1><p>在日常的开发中， 原型看着是一个离我们很遥远又很近的一个东西</p><h1 id="一、" tabindex="-1">一、 <a class="header-anchor" href="#一、" aria-label="Permalink to &quot;一、&quot;">​</a></h1><h2 id="为什么要用原型【好处】" tabindex="-1">为什么要用原型【好处】 <a class="header-anchor" href="#为什么要用原型【好处】" aria-label="Permalink to &quot;为什么要用原型【好处】&quot;">​</a></h2><p>原型上所有的方法和属性都可以被构造函数【实际开发原型时主要共享“方法和所有实例公用的引用属性”】的实例共享，那为什么要共享呢？先来看一个案例</p><h2 id="没有用原型会有什么问题" tabindex="-1">没有用原型会有什么问题？ <a class="header-anchor" href="#没有用原型会有什么问题" aria-label="Permalink to &quot;没有用原型会有什么问题？&quot;">​</a></h2><p>不使用原型会带来大量的空间浪费。</p><p>使用原型可以解决所有实例上的方法，还有<u>所有实例上的</u><strong>共同属性</strong>都可以放到原型上去定义</p><h2 id="认识函数-原型定义" tabindex="-1">认识函数+原型定义 <a class="header-anchor" href="#认识函数-原型定义" aria-label="Permalink to &quot;认识函数+原型定义&quot;">​</a></h2><p>函数也是一个对象，当真正开始执行函数，执行环境（开发时为浏览器或控制台）会为函数分配一个<strong>函数对象变量空间</strong>和<strong>函数对象空间</strong>，函数对象变量用函数名表示，存在栈空间中，函数对象空间是在堆中开辟的一个内存空间，这个空间中有一个默认的 <code>prototype</code> 属性，这个 <code>prototype</code> 属性就是一个原型对象属性【也叫对象变量】</p><p>函数和构造函数的区别：当通过 <code>new 构造函数()</code> 时，此刻这个函数就是构造函数【日后会演变成 <code>TS</code> 类的构造器】</p><p>定义：原型 <code>prototype</code> 是定义在函数上的，它由 <code>JS</code> 自动分配给函数的一个可以被所有构造函数实例的对象变量所共享的对象变量【也叫对象属性】</p><p>原型也叫原型对象属性</p><p>当我用一个对象去访问一个属性的时候，它首先会<strong>从对象的实例上</strong>去查找是否存在这个属性，如果存在，它会直接输出；如果不存在，那么将去原型上查找。</p><p>对象的改变是发生在对象创建之后</p><h2 id="如何访问原型对象空间上的属性和方法" tabindex="-1">如何访问原型对象空间上的属性和方法 <a class="header-anchor" href="#如何访问原型对象空间上的属性和方法" aria-label="Permalink to &quot;如何访问原型对象空间上的属性和方法&quot;">​</a></h2><ul><li>构造函数所有实例对象都可以访问对象空间上的属性和方法（每一个实例都有默认的proto属性），这个proto属性指向原型对象空间</li><li>关于 <code>__proto__</code> ：<code>new</code> 在创建新对象的时候，会赋予新对象一个属性指向构造函数的 <code>prototype</code> 对象空间，这个属性就是 <code>__proto__</code> 。</li><li>可以直接通过 <code>构造函数.prototype</code> 对象属性来访问原型对象空间上的属性和方法。</li></ul><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h2><h3 id="构造函数实例【也叫对象】如何访问原型对象空间上的属性和方法" tabindex="-1">构造函数实例【也叫对象】如何访问原型对象空间上的属性和方法 <a class="header-anchor" href="#构造函数实例【也叫对象】如何访问原型对象空间上的属性和方法" aria-label="Permalink to &quot;构造函数实例【也叫对象】如何访问原型对象空间上的属性和方法&quot;">​</a></h3><ul><li>构造函数实例访问一个属性和方法，首先从实例空间中查找【当执行环境执行 new 构造函数()时，构造函数中通过 <code>this</code> 定义的属性和方法会分配在这个空间中】，如果找到该属性和方法，就停止查找，表示找到了；如果没有找到，就继续在该实例的原型对象空间中去查找该属性和方法【实例中默认的 <code>proto对象</code> 属性指向原型对象空间】</li><li>实例正是借助自身的 <code>__proto__对象属性</code> 来查找原型对象空间中的属性和方法，有点像儿子去和爸爸要他没有的东西一样。</li></ul><h3 id="增加或修改原型对象的属性或方法后-所有的实例-对象将可以立即访问的到【但创建实例后再覆盖原型除外】" tabindex="-1">增加或修改原型对象的属性或方法后，所有的实例/对象将可以立即访问的到【但创建实例后再覆盖原型除外】 <a class="header-anchor" href="#增加或修改原型对象的属性或方法后-所有的实例-对象将可以立即访问的到【但创建实例后再覆盖原型除外】" aria-label="Permalink to &quot;增加或修改原型对象的属性或方法后，所有的实例/对象将可以立即访问的到【但创建实例后再覆盖原型除外】&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="高频面试题-创建实例后再覆盖原型-实例对象无法访问到-为什么" tabindex="-1">高频面试题：创建实例后再覆盖原型，实例对象无法访问到，为什么？ <a class="header-anchor" href="#高频面试题-创建实例后再覆盖原型-实例对象无法访问到-为什么" aria-label="Permalink to &quot;高频面试题：创建实例后再覆盖原型，实例对象无法访问到，为什么？&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>思考题：<code>QQZhangSan.__proto__.show()</code> 和 <code>QQZhangSan.show()</code> 输出的结果完全一样吗？为什么呢？</p><h2 id="object-prototype" tabindex="-1">object.prototype <a class="header-anchor" href="#object-prototype" aria-label="Permalink to &quot;object.prototype&quot;">​</a></h2><h1 id="二、" tabindex="-1">二、 <a class="header-anchor" href="#二、" aria-label="Permalink to &quot;二、&quot;">​</a></h1><h2 id="_1" tabindex="-1">1. <a class="header-anchor" href="#_1" aria-label="Permalink to &quot;1.&quot;">​</a></h2><h2 id="_2" tabindex="-1">2. <a class="header-anchor" href="#_2" aria-label="Permalink to &quot;2.&quot;">​</a></h2><h2 id="_3" tabindex="-1">3. <a class="header-anchor" href="#_3" aria-label="Permalink to &quot;3.&quot;">​</a></h2><h1 id="三、" tabindex="-1">三、 <a class="header-anchor" href="#三、" aria-label="Permalink to &quot;三、&quot;">​</a></h1><h2 id="_1-1" tabindex="-1">1. <a class="header-anchor" href="#_1-1" aria-label="Permalink to &quot;1.&quot;">​</a></h2><h2 id="_2-1" tabindex="-1">2. <a class="header-anchor" href="#_2-1" aria-label="Permalink to &quot;2.&quot;">​</a></h2><h2 id="_3-1" tabindex="-1">3. <a class="header-anchor" href="#_3-1" aria-label="Permalink to &quot;3.&quot;">​</a></h2><h1 id="四、" tabindex="-1">四、 <a class="header-anchor" href="#四、" aria-label="Permalink to &quot;四、&quot;">​</a></h1><h2 id="_1-2" tabindex="-1">1. <a class="header-anchor" href="#_1-2" aria-label="Permalink to &quot;1.&quot;">​</a></h2><h2 id="_2-2" tabindex="-1">2. <a class="header-anchor" href="#_2-2" aria-label="Permalink to &quot;2.&quot;">​</a></h2><h2 id="_3-2" tabindex="-1">3. <a class="header-anchor" href="#_3-2" aria-label="Permalink to &quot;3.&quot;">​</a></h2><h1 id="五、" tabindex="-1">五、 <a class="header-anchor" href="#五、" aria-label="Permalink to &quot;五、&quot;">​</a></h1><h2 id="_1-3" tabindex="-1">1. <a class="header-anchor" href="#_1-3" aria-label="Permalink to &quot;1.&quot;">​</a></h2><h2 id="_2-3" tabindex="-1">2. <a class="header-anchor" href="#_2-3" aria-label="Permalink to &quot;2.&quot;">​</a></h2><h2 id="_3-3" tabindex="-1">3. <a class="header-anchor" href="#_3-3" aria-label="Permalink to &quot;3.&quot;">​</a></h2><h1 id="八、结束语" tabindex="-1">八、结束语 <a class="header-anchor" href="#八、结束语" aria-label="Permalink to &quot;八、结束语&quot;">​</a></h1><h1 id="彩蛋-one-more-thing" tabindex="-1">彩蛋 One More Thing <a class="header-anchor" href="#彩蛋-one-more-thing" aria-label="Permalink to &quot;彩蛋 One More Thing&quot;">​</a></h1><h2 id="往期推荐" tabindex="-1">（：往期推荐 <a class="header-anchor" href="#往期推荐" aria-label="Permalink to &quot;（：往期推荐&quot;">​</a></h2><h2 id="番外篇" tabindex="-1">（：番外篇 <a class="header-anchor" href="#番外篇" aria-label="Permalink to &quot;（：番外篇&quot;">​</a></h2>',47),o=[r];function n(h,d,s,c,u,p){return l(),a("div",null,o)}const k=e(i,[["render",n]]);export{b as __pageData,k as default};
