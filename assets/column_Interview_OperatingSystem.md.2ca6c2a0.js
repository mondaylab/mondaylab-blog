import{_ as e,o as l,c as a,Q as t}from"./chunks/framework.98c15f2e.js";const p=JSON.parse('{"title":"「offer来了」进程线程有啥关系？10个知识点带你巩固操作系统基础知识","description":"","frontmatter":{"title":"「offer来了」进程线程有啥关系？10个知识点带你巩固操作系统基础知识","author":"周一","date":"2021-11-10","categories":["前端开发"],"tags":["offer来了"],"sidebar":"auto"},"headers":[{"level":1,"title":"🎹 序言","slug":"🎹-序言","link":"#🎹-序言","children":[]},{"level":1,"title":"🎸 一、思维导图","slug":"🎸-一、思维导图","link":"#🎸-一、思维导图","children":[]},{"level":1,"title":"🎺 二、常见面试题","slug":"🎺-二、常见面试题","link":"#🎺-二、常见面试题","children":[{"level":2,"title":"1、进程和线程以及它们的区别","slug":"_1、进程和线程以及它们的区别","link":"#_1、进程和线程以及它们的区别","children":[]},{"level":2,"title":"2、进程间通信的几种方式","slug":"_2、进程间通信的几种方式","link":"#_2、进程间通信的几种方式","children":[{"level":3,"title":"（1）管道(pipe)及命名管道(named pipe)","slug":"_1-管道-pipe-及命名管道-named-pipe","link":"#_1-管道-pipe-及命名管道-named-pipe","children":[]},{"level":3,"title":"（2）信号(signal)","slug":"_2-信号-signal","link":"#_2-信号-signal","children":[]},{"level":3,"title":"（3）消息队列","slug":"_3-消息队列","link":"#_3-消息队列","children":[]},{"level":3,"title":"（4）共享内存","slug":"_4-共享内存","link":"#_4-共享内存","children":[]},{"level":3,"title":"（5）信号量","slug":"_5-信号量","link":"#_5-信号量","children":[]},{"level":3,"title":"（6）套接字","slug":"_6-套接字","link":"#_6-套接字","children":[]}]},{"level":2,"title":"3、线程同步的方式","slug":"_3、线程同步的方式","link":"#_3、线程同步的方式","children":[{"level":3,"title":"（1）互斥量 Synchronized/Lock","slug":"_1-互斥量-synchronized-lock","link":"#_1-互斥量-synchronized-lock","children":[]},{"level":3,"title":"（2）信号量 Semphare","slug":"_2-信号量-semphare","link":"#_2-信号量-semphare","children":[]},{"level":3,"title":"（3）事件(信号)Wait/Notify","slug":"_3-事件-信号-wait-notify","link":"#_3-事件-信号-wait-notify","children":[]}]},{"level":2,"title":"4、什么是死锁？死锁产生的条件？","slug":"_4、什么是死锁-死锁产生的条件","link":"#_4、什么是死锁-死锁产生的条件","children":[{"level":3,"title":"（1）死锁的概念","slug":"_1-死锁的概念","link":"#_1-死锁的概念","children":[]},{"level":3,"title":"（2）死锁产生的四个必要条件","slug":"_2-死锁产生的四个必要条件","link":"#_2-死锁产生的四个必要条件","children":[]},{"level":3,"title":"（3）处理死锁的基本策略和常用方法","slug":"_3-处理死锁的基本策略和常用方法","link":"#_3-处理死锁的基本策略和常用方法","children":[]}]},{"level":2,"title":"5、进程有哪几种状态？","slug":"_5、进程有哪几种状态","link":"#_5、进程有哪几种状态","children":[]},{"level":2,"title":"6、线程有几种状态？","slug":"_6、线程有几种状态","link":"#_6、线程有几种状态","children":[]},{"level":2,"title":"7、段式存储管理","slug":"_7、段式存储管理","link":"#_7、段式存储管理","children":[{"level":3,"title":"（1）段式存储管理是什么？","slug":"_1-段式存储管理是什么","link":"#_1-段式存储管理是什么","children":[]},{"level":3,"title":"（2）段式管理的优缺点","slug":"_2-段式管理的优缺点","link":"#_2-段式管理的优缺点","children":[]},{"level":3,"title":"（3）页式存储管理方案","slug":"_3-页式存储管理方案","link":"#_3-页式存储管理方案","children":[]},{"level":3,"title":"（4）页式存储管理的优缺点","slug":"_4-页式存储管理的优缺点","link":"#_4-页式存储管理的优缺点","children":[]}]},{"level":2,"title":"8、进程调度策略","slug":"_8、进程调度策略","link":"#_8、进程调度策略","children":[{"level":3,"title":"（1）FCFS(先来先服务，队列实现，非抢占的)","slug":"_1-fcfs-先来先服务-队列实现-非抢占的","link":"#_1-fcfs-先来先服务-队列实现-非抢占的","children":[]},{"level":3,"title":"（2）SJF(最短作业优先调度算法)","slug":"_2-sjf-最短作业优先调度算法","link":"#_2-sjf-最短作业优先调度算法","children":[]},{"level":3,"title":"（3）优先级调度算法(可以是抢占的，也可以是非抢占的)","slug":"_3-优先级调度算法-可以是抢占的-也可以是非抢占的","link":"#_3-优先级调度算法-可以是抢占的-也可以是非抢占的","children":[]},{"level":3,"title":"（4）时间片轮转调度算法(可抢占的)","slug":"_4-时间片轮转调度算法-可抢占的","link":"#_4-时间片轮转调度算法-可抢占的","children":[]},{"level":3,"title":"（5）多级队列调度算法","slug":"_5-多级队列调度算法","link":"#_5-多级队列调度算法","children":[]},{"level":3,"title":"（6）多级反馈队列调度算法","slug":"_6-多级反馈队列调度算法","link":"#_6-多级反馈队列调度算法","children":[]}]},{"level":2,"title":"9、页面调度算法","slug":"_9、页面调度算法","link":"#_9、页面调度算法","children":[]},{"level":2,"title":"10、局部性原理","slug":"_10、局部性原理","link":"#_10、局部性原理","children":[]}]},{"level":1,"title":"🎻 三、结束语","slug":"🎻-三、结束语","link":"#🎻-三、结束语","children":[]},{"level":1,"title":"🐣 彩蛋 One More Thing","slug":"🐣-彩蛋-one-more-thing","link":"#🐣-彩蛋-one-more-thing","children":[{"level":2,"title":"🏷️pdf 内容获取","slug":"🏷️pdf-内容获取","link":"#🏷️pdf-内容获取","children":[]},{"level":2,"title":"🏷️ 更新地址","slug":"🏷️-更新地址","link":"#🏷️-更新地址","children":[]},{"level":2,"title":"🏷️ 番外篇","slug":"🏷️-番外篇","link":"#🏷️-番外篇","children":[]}]}],"relativePath":"column/Interview/OperatingSystem.md","filePath":"column/Interview/OperatingSystem.md","lastUpdated":1685151998000}'),r={name:"column/Interview/OperatingSystem.md"},n=t('<h1 id="🎹-序言" tabindex="-1">🎹 序言 <a class="header-anchor" href="#🎹-序言" aria-label="Permalink to &quot;🎹 序言&quot;">​</a></h1><p>操作系统对于前端来说考察的内容并不多，所以在今天的文章中将依据比较常考的知识点进行归纳总结。</p><p>下面开始本文的讲解~</p><h1 id="🎸-一、思维导图" tabindex="-1">🎸 一、思维导图 <a class="header-anchor" href="#🎸-一、思维导图" aria-label="Permalink to &quot;🎸 一、思维导图&quot;">​</a></h1><p>我们先用一张思维导图来梳理操作系统相关的面试题。<strong>具体如下 👇</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270821730.png" alt="OS面试题复习框架"></p><p>下面开始归纳操作系统常见的面试题。</p><h1 id="🎺-二、常见面试题" tabindex="-1">🎺 二、常见面试题 <a class="header-anchor" href="#🎺-二、常见面试题" aria-label="Permalink to &quot;🎺 二、常见面试题&quot;">​</a></h1><h2 id="_1、进程和线程以及它们的区别" tabindex="-1">1、进程和线程以及它们的区别 <a class="header-anchor" href="#_1、进程和线程以及它们的区别" aria-label="Permalink to &quot;1、进程和线程以及它们的区别&quot;">​</a></h2><ul><li><strong>进程</strong>是对程序运行时的封装，是系统进行<strong>资源调度和分配</strong>的的基本单位，实现了操作系统的并发；</li><li><strong>线程</strong>是进程的<strong>子任务</strong>，是<strong>CPU 调度和分配的基本单位</strong>，用于保证程序的实时性，实现进程内部的并发；</li><li>一个程序至少有一个进程，一个进程至少有一个线程，线程依赖于进程而存在；</li><li>进程在执行过程中拥有<strong>独立的内存单元</strong>，而多个线程共享进程的内存。</li></ul><h2 id="_2、进程间通信的几种方式" tabindex="-1">2、进程间通信的几种方式 <a class="header-anchor" href="#_2、进程间通信的几种方式" aria-label="Permalink to &quot;2、进程间通信的几种方式&quot;">​</a></h2><h3 id="_1-管道-pipe-及命名管道-named-pipe" tabindex="-1">（1）管道(pipe)及命名管道(named pipe) <a class="header-anchor" href="#_1-管道-pipe-及命名管道-named-pipe" aria-label="Permalink to &quot;（1）管道(pipe)及命名管道(named pipe)&quot;">​</a></h3><ul><li>管道可用于具有<strong>亲缘关系</strong>的父子进程间的通信。</li><li>命名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。</li></ul><h3 id="_2-信号-signal" tabindex="-1">（2）信号(signal) <a class="header-anchor" href="#_2-信号-signal" aria-label="Permalink to &quot;（2）信号(signal)&quot;">​</a></h3><ul><li>信号是一种比较复杂的通信方式，用于通知和接收某个已经发生的进程事件。</li></ul><h3 id="_3-消息队列" tabindex="-1">（3）消息队列 <a class="header-anchor" href="#_3-消息队列" aria-label="Permalink to &quot;（3）消息队列&quot;">​</a></h3><ul><li>消息队列是消息的<strong>链接表</strong>，它克服了以上两种通信方式中<strong>信号量有限</strong>的缺点。</li><li>具有<strong>写权限</strong>的进程可以按照一定的规则向消息队列中添加新信息。</li><li>对消息队列有<strong>读权限</strong>的进程则可以从消息队列中读取信息。</li></ul><h3 id="_4-共享内存" tabindex="-1">（4）共享内存 <a class="header-anchor" href="#_4-共享内存" aria-label="Permalink to &quot;（4）共享内存&quot;">​</a></h3><ul><li>可以说这是<strong>最有用的</strong>进程间通信方式。</li><li>它使得多个进程可以访问<strong>同一块内存空间</strong>，不同进程可以及时看到对方进程中对共享内存中数据的更新。</li><li>这种方式需要依靠某种<strong>同步操作</strong>，如互斥锁和信号量等。</li></ul><h3 id="_5-信号量" tabindex="-1">（5）信号量 <a class="header-anchor" href="#_5-信号量" aria-label="Permalink to &quot;（5）信号量&quot;">​</a></h3><ul><li>主要作为进程之间及同一种进程的不同线程之间的同步和互斥手段；</li></ul><h3 id="_6-套接字" tabindex="-1">（6）套接字 <a class="header-anchor" href="#_6-套接字" aria-label="Permalink to &quot;（6）套接字&quot;">​</a></h3><ul><li>这是一种更为一般的进程间通信机制，它可用于网络中<strong>不同机器之间</strong>的进程间通信，应用非常广泛。</li></ul><h2 id="_3、线程同步的方式" tabindex="-1">3、线程同步的方式 <a class="header-anchor" href="#_3、线程同步的方式" aria-label="Permalink to &quot;3、线程同步的方式&quot;">​</a></h2><h3 id="_1-互斥量-synchronized-lock" tabindex="-1">（1）互斥量 Synchronized/Lock <a class="header-anchor" href="#_1-互斥量-synchronized-lock" aria-label="Permalink to &quot;（1）互斥量 Synchronized/Lock&quot;">​</a></h3><ul><li>采用<strong>互斥对象机制</strong>，只有拥有互斥对象的线程才有访问<strong>公共资源</strong>的权限。</li><li>因为互斥对象只有一个，所以可以保证<strong>公共资源</strong>不会被<strong>多个线程</strong>同时访问。</li></ul><h3 id="_2-信号量-semphare" tabindex="-1">（2）信号量 Semphare <a class="header-anchor" href="#_2-信号量-semphare" aria-label="Permalink to &quot;（2）信号量 Semphare&quot;">​</a></h3><ul><li>它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的<strong>最大线程数量</strong>。</li></ul><h3 id="_3-事件-信号-wait-notify" tabindex="-1">（3）事件(信号)Wait/Notify <a class="header-anchor" href="#_3-事件-信号-wait-notify" aria-label="Permalink to &quot;（3）事件(信号)Wait/Notify&quot;">​</a></h3><ul><li>通过<strong>通知操作</strong>的方式来保持多线程同步，还可以方便的实现<strong>多线程优先级</strong>的比较操作。</li></ul><h2 id="_4、什么是死锁-死锁产生的条件" tabindex="-1">4、什么是死锁？死锁产生的条件？ <a class="header-anchor" href="#_4、什么是死锁-死锁产生的条件" aria-label="Permalink to &quot;4、什么是死锁？死锁产生的条件？&quot;">​</a></h2><h3 id="_1-死锁的概念" tabindex="-1">（1）死锁的概念 <a class="header-anchor" href="#_1-死锁的概念" aria-label="Permalink to &quot;（1）死锁的概念&quot;">​</a></h3><ul><li>在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。</li><li>通俗的讲，就是两个或多个进程<strong>无限期的阻塞</strong>、<strong>相互等待</strong>的一种状态。</li></ul><h3 id="_2-死锁产生的四个必要条件" tabindex="-1">（2）死锁产生的四个必要条件 <a class="header-anchor" href="#_2-死锁产生的四个必要条件" aria-label="Permalink to &quot;（2）死锁产生的四个必要条件&quot;">​</a></h3><ul><li><strong>互斥</strong>：至少有一个资源必须属于<strong>非共享模式</strong>，即一次只能被一个进程使用；若其他申请使用该资源，那么申请进程必须等到该资源被释放为止。</li><li><strong>占有并等待</strong>：一个进程必须占有至少一个资源，并等待另一个资源，而该资源为其他进程所占有。</li><li><strong>非抢占</strong>：进程不能被抢占，即资源只能被<strong>进程在完成任务后</strong>自愿释放。</li><li><strong>循环等待</strong>：若干进程之间形成一种<strong>头尾相接</strong>的环形等待资源关系。</li></ul><h3 id="_3-处理死锁的基本策略和常用方法" tabindex="-1">（3）处理死锁的基本策略和常用方法 <a class="header-anchor" href="#_3-处理死锁的基本策略和常用方法" aria-label="Permalink to &quot;（3）处理死锁的基本策略和常用方法&quot;">​</a></h3><ul><li>解决死锁的基本方法主要有<strong>预防死锁</strong>、<strong>避免死锁</strong>、<strong>检测死锁</strong>、<strong>解除死锁</strong> 、<strong>鸵鸟策略</strong>等。</li></ul><h2 id="_5、进程有哪几种状态" tabindex="-1">5、进程有哪几种状态？ <a class="header-anchor" href="#_5、进程有哪几种状态" aria-label="Permalink to &quot;5、进程有哪几种状态？&quot;">​</a></h2><p>**（1）就绪状态：**进程已获得除处理机以外的所需资源，等待分配处理机资源。</p><p>**（2）运行状态：**占用处理机资源运行，处于此状态的进程数小于等于 CPU 数。</p><p><strong>（3）阻塞状态：</strong> 进程等待某种条件，在条件未满足之前无法执行。</p><h2 id="_6、线程有几种状态" tabindex="-1">6、线程有几种状态？ <a class="header-anchor" href="#_6、线程有几种状态" aria-label="Permalink to &quot;6、线程有几种状态？&quot;">​</a></h2><p>在 Java 虚拟机 中，线程从最初的创建到最终的消亡，要经历<strong>若干个状态</strong>：</p><ul><li>创建 <code>(new)</code> 、就绪 <code>(runnable/start)</code> 、运行 <code>(running)</code> 、阻塞 <code>(blocked)</code> 、等待 <code>(waiting)</code> 、时间等待 <code>(time waiting)</code> 和 消亡 <code>(dead/terminated)</code> 。</li><li><strong>在给定的时间点上，一个线程只能处于一种状态。</strong></li></ul><h2 id="_7、段式存储管理" tabindex="-1">7、段式存储管理 <a class="header-anchor" href="#_7、段式存储管理" aria-label="Permalink to &quot;7、段式存储管理&quot;">​</a></h2><h3 id="_1-段式存储管理是什么" tabindex="-1">（1）段式存储管理是什么？ <a class="header-anchor" href="#_1-段式存储管理是什么" aria-label="Permalink to &quot;（1）段式存储管理是什么？&quot;">​</a></h3><p><strong>段式存储管理</strong>是一种<u>符合用户视角的</u><strong>内存分配管理方案</strong>。</p><p>在段式存储管理中，将程序的地址空间划分为<strong>若干段</strong>(segment)，如代码段、数据段、堆栈段；</p><p>这样每个进程有一个<strong>二维地址空间</strong>，相互独立，互不干扰。</p><h3 id="_2-段式管理的优缺点" tabindex="-1">（2）段式管理的优缺点 <a class="header-anchor" href="#_2-段式管理的优缺点" aria-label="Permalink to &quot;（2）段式管理的优缺点&quot;">​</a></h3><ul><li><strong>优点</strong>：<strong>没有内碎片</strong>（因为段大小可变，可通过改变段大小来消除内碎片）。</li><li><strong>缺点</strong>：但段换入换出时，<strong>会产生外碎片</strong>（比如 <code>4k</code> 的段换 <code>5k</code> 的段，会产生 <code>1k</code> 的外碎片）。</li></ul><h3 id="_3-页式存储管理方案" tabindex="-1">（3）页式存储管理方案 <a class="header-anchor" href="#_3-页式存储管理方案" aria-label="Permalink to &quot;（3）页式存储管理方案&quot;">​</a></h3><p><strong>页式存储管理方案</strong>是一种用户视角下<u>内存与物理内存相分离</u>的<strong>内存分配管理方案</strong>。</p><p>在页式存储管理中，将程序的逻辑地址划分为<strong>固定大小的页</strong> <code>(page)</code> ，而物理内存划分为<strong>同样大小的帧</strong>，程序加载时，可以将任意一页放入内存中任意一个帧，这些帧不必连续，从而实现了<strong>离散分离</strong>。</p><h3 id="_4-页式存储管理的优缺点" tabindex="-1">（4）页式存储管理的优缺点 <a class="header-anchor" href="#_4-页式存储管理的优缺点" aria-label="Permalink to &quot;（4）页式存储管理的优缺点&quot;">​</a></h3><ul><li><strong>优点</strong>：没有外碎片（因为页的大小固定）。</li><li><strong>缺点</strong>：但会产生内碎片（一个页可能填充不满）。</li></ul><h2 id="_8、进程调度策略" tabindex="-1">8、进程调度策略 <a class="header-anchor" href="#_8、进程调度策略" aria-label="Permalink to &quot;8、进程调度策略&quot;">​</a></h2><h3 id="_1-fcfs-先来先服务-队列实现-非抢占的" tabindex="-1">（1）FCFS(先来先服务，队列实现，非抢占的) <a class="header-anchor" href="#_1-fcfs-先来先服务-队列实现-非抢占的" aria-label="Permalink to &quot;（1）FCFS(先来先服务，队列实现，非抢占的)&quot;">​</a></h3><p>先请求 <code>CPU</code> 的进程先分配到 <code>CPU</code> 。</p><h3 id="_2-sjf-最短作业优先调度算法" tabindex="-1">（2）SJF(最短作业优先调度算法) <a class="header-anchor" href="#_2-sjf-最短作业优先调度算法" aria-label="Permalink to &quot;（2）SJF(最短作业优先调度算法)&quot;">​</a></h3><p>平均等待时间最短，但难以知道下一个 <code>CPU</code> 区间长度。</p><h3 id="_3-优先级调度算法-可以是抢占的-也可以是非抢占的" tabindex="-1">（3）优先级调度算法(可以是抢占的，也可以是非抢占的) <a class="header-anchor" href="#_3-优先级调度算法-可以是抢占的-也可以是非抢占的" aria-label="Permalink to &quot;（3）优先级调度算法(可以是抢占的，也可以是非抢占的)&quot;">​</a></h3><p>优先级越高越先分配到 <code>CPU</code> ，相同优先级先到先服务。</p><p><strong>存在的主要问题是</strong>：低优先级进程无穷等待 <code>CPU</code> ，会导致无穷阻塞或饥饿。</p><p><strong>解决方案</strong>：老化（即对超过一定时间还未使用的进程进行删除）。</p><h3 id="_4-时间片轮转调度算法-可抢占的" tabindex="-1">（4）时间片轮转调度算法(可抢占的) <a class="header-anchor" href="#_4-时间片轮转调度算法-可抢占的" aria-label="Permalink to &quot;（4）时间片轮转调度算法(可抢占的)&quot;">​</a></h3><p>队列中没有进程被分配超过一个时间片的 <code>CPU</code> 时间，除非它是唯一可运行的进程。</p><p>如果进程的 <code>CPU</code> 区间超过了一个<strong>时间片</strong>，那么该进程就被抢占并放回就绪队列。</p><h3 id="_5-多级队列调度算法" tabindex="-1">（5）多级队列调度算法 <a class="header-anchor" href="#_5-多级队列调度算法" aria-label="Permalink to &quot;（5）多级队列调度算法&quot;">​</a></h3><p>将<strong>就绪队列</strong>分成多个<strong>独立的队列</strong>，每个队列都有自己的调度算法，队列之间采用固定优先级抢占调度。</p><p>其中，一个进程根据自身属性被永久地分配到一个队列中。</p><h3 id="_6-多级反馈队列调度算法" tabindex="-1">（6）多级反馈队列调度算法 <a class="header-anchor" href="#_6-多级反馈队列调度算法" aria-label="Permalink to &quot;（6）多级反馈队列调度算法&quot;">​</a></h3><p>与多级队列调度算法相比，其允许进程在<strong>队列之间</strong>移动：若进程使用过多 <code>CPU</code> 时间，那么它会被转移到更低的<strong>优先级队列</strong>。</p><p>在较低优先级队列等待时间过长的进程会被转移到更高优先级队列，以防止饥饿发生。</p><h2 id="_9、页面调度算法" tabindex="-1">9、页面调度算法 <a class="header-anchor" href="#_9、页面调度算法" aria-label="Permalink to &quot;9、页面调度算法&quot;">​</a></h2><p><strong>FIFO 先进先出算法</strong>：在操作系统中经常被用到，比如作业调度（主要实现简单，很容易想到）。</p><p><strong>LRU(Least recently use)最近最少使用算法</strong>：根据<u>开始使用时间到现在为止</u>的<strong>时间长短</strong>来判断。</p><p><strong>LFU(Least frequently use)最少使用次数算法</strong>：根据<strong>使用次数</strong>来判断。</p><p><strong>OPT(Optimal replacement)最优置换算法</strong>：理论的最优，所谓理论，就是要保证置换出去的是<strong>不再被使用的页</strong>，或者是在实际内存中最晚使用的页。</p><h2 id="_10、局部性原理" tabindex="-1">10、局部性原理 <a class="header-anchor" href="#_10、局部性原理" aria-label="Permalink to &quot;10、局部性原理&quot;">​</a></h2><p><strong>（1） 时间上的局部性</strong>：<strong>最近被访问的页</strong>在不久的将来还会被访问。</p><p><strong>（2）空间上的局部性</strong>：<strong>内存中被访问的页</strong>周围的页也很可能被访问。</p><h1 id="🎻-三、结束语" tabindex="-1">🎻 三、结束语 <a class="header-anchor" href="#🎻-三、结束语" aria-label="Permalink to &quot;🎻 三、结束语&quot;">​</a></h1><p>大家可以看到，对于操作系统的面试来说，基本上都在围绕着进程和线程这两个概念交谈。所以在学习的过程中，可以以这两个点来作为主线来对知识点进行扩充和归纳。</p><p>关于操作系统的面经归纳到这里就结束啦！希望对大家有帮助~</p><h1 id="🐣-彩蛋-one-more-thing" tabindex="-1">🐣 彩蛋 One More Thing <a class="header-anchor" href="#🐣-彩蛋-one-more-thing" aria-label="Permalink to &quot;🐣 彩蛋 One More Thing&quot;">​</a></h1><h2 id="🏷️pdf-内容获取" tabindex="-1">🏷️pdf 内容获取 <a class="header-anchor" href="#🏷️pdf-内容获取" aria-label="Permalink to &quot;🏷️pdf 内容获取&quot;">​</a></h2><p>👉 微信关注公众号 <code>星期一研究室</code> ，回复关键字 <code>操作系统面试pdf</code> 即可获取相关 <code>pdf</code> 内容~</p><p>👉 回复 <code>面试大全pdf</code> 可获取全专栏内容 📂</p><h2 id="🏷️-更新地址" tabindex="-1">🏷️ 更新地址 <a class="header-anchor" href="#🏷️-更新地址" aria-label="Permalink to &quot;🏷️ 更新地址&quot;">​</a></h2><p>👉 <a href="https://juejin.cn/column/7007991853089849351" target="_blank" rel="noreferrer">offer 来了面试专栏</a></p><h2 id="🏷️-番外篇" tabindex="-1">🏷️ 番外篇 <a class="header-anchor" href="#🏷️-番外篇" aria-label="Permalink to &quot;🏷️ 番外篇&quot;">​</a></h2><ul><li>如果您觉得这篇文章有帮助到您的的话不妨点赞支持一下哟~~😉</li><li>以上就是本文的全部内容！我们下期见！👋👋👋</li></ul>',93),i=[n];function o(s,h,d,g,c,u){return l(),a("div",null,i)}const k=e(r,[["render",o]]);export{p as __pageData,k as default};
