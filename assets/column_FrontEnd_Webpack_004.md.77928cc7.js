import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.98c15f2e.js";const b=JSON.parse('{"title":"webpack实战之手写一个loader和plugin","description":"","frontmatter":{"title":"webpack实战之手写一个loader和plugin","author":"周一","date":"2021-08-05","categories":["前端开发"],"tags":["Webpack"],"sidebar":"auto"},"headers":[{"level":1,"title":"🔔 序言","slug":"🔔-序言","link":"#🔔-序言","children":[]},{"level":1,"title":"🎵 一、如何编写一个 Loader","slug":"🎵-一、如何编写一个-loader","link":"#🎵-一、如何编写一个-loader","children":[{"level":2,"title":"1. 碎碎念","slug":"_1-碎碎念","link":"#_1-碎碎念","children":[]},{"level":2,"title":"2. 项目结构","slug":"_2-项目结构","link":"#_2-项目结构","children":[]},{"level":2,"title":"3. 业务代码编写","slug":"_3-业务代码编写","link":"#_3-业务代码编写","children":[{"level":3,"title":"（1）入口文件代码","slug":"_1-入口文件代码","link":"#_1-入口文件代码","children":[]},{"level":3,"title":"（2）编写 loader","slug":"_2-编写-loader","link":"#_2-编写-loader","children":[]},{"level":3,"title":"（3）引用 loader","slug":"_3-引用-loader","link":"#_3-引用-loader","children":[]},{"level":3,"title":"（4）在 loader 里面做一些异步的操作","slug":"_4-在-loader-里面做一些异步的操作","link":"#_4-在-loader-里面做一些异步的操作","children":[]},{"level":3,"title":"（5）loader 路径自定义","slug":"_5-loader-路径自定义","link":"#_5-loader-路径自定义","children":[]}]}]},{"level":1,"title":"🎶 二、如何编写一个 Plugin","slug":"🎶-二、如何编写一个-plugin","link":"#🎶-二、如何编写一个-plugin","children":[{"level":2,"title":"1. 碎碎念","slug":"_1-碎碎念-1","link":"#_1-碎碎念-1","children":[]},{"level":2,"title":"2. 项目结构","slug":"_2-项目结构-1","link":"#_2-项目结构-1","children":[]},{"level":2,"title":"3. 业务代码编写","slug":"_3-业务代码编写-1","link":"#_3-业务代码编写-1","children":[{"level":3,"title":"（1）入口文件代码","slug":"_1-入口文件代码-1","link":"#_1-入口文件代码-1","children":[]},{"level":3,"title":"（2）编写 plugin","slug":"_2-编写-plugin","link":"#_2-编写-plugin","children":[]},{"level":3,"title":"（3）引用 plugin","slug":"_3-引用-plugin","link":"#_3-引用-plugin","children":[]}]}]},{"level":1,"title":"💹 三、结束语","slug":"💹-三、结束语","link":"#💹-三、结束语","children":[]},{"level":1,"title":"🐣 彩蛋 One More Thing","slug":"🐣-彩蛋-one-more-thing","link":"#🐣-彩蛋-one-more-thing","children":[{"level":2,"title":"（：往期推荐","slug":"往期推荐","link":"#往期推荐","children":[]}]}],"relativePath":"column/FrontEnd/Webpack/004.md","filePath":"column/FrontEnd/Webpack/004.md","lastUpdated":1685151998000}'),p={name:"column/FrontEnd/Webpack/004.md"},o=l(`<h1 id="🔔-序言" tabindex="-1">🔔 序言 <a class="header-anchor" href="#🔔-序言" aria-label="Permalink to &quot;🔔 序言&quot;">​</a></h1><p>对于 <code>webpack</code> 来说， <code>loader</code> 和 <code>plugin</code> 可以算是需求程度最为广泛的配置项了。但是呢，单单止步于配置可能还不够。如果我们自己有时候想要 <code>diy</code> 一个需求，但是 <code>webpack</code> 又没有相关的 <code>loader</code> 和 <code>plugin</code> 。那这个时候我们可能就得开始造点轮子来供给自己使用了。</p><p>因此，在今天的文章当中，将带领大家手写一个简易的 <code>loader</code> 和 <code>plugin</code> ，并学会如何在项目中运用自己所编写的 <code>loader</code> 和 <code>plugin</code> 。</p><p>一起来学习吧~📢</p><h1 id="🎵-一、如何编写一个-loader" tabindex="-1">🎵 一、如何编写一个 Loader <a class="header-anchor" href="#🎵-一、如何编写一个-loader" aria-label="Permalink to &quot;🎵 一、如何编写一个 Loader&quot;">​</a></h1><h2 id="_1-碎碎念" tabindex="-1">1. 碎碎念 <a class="header-anchor" href="#_1-碎碎念" aria-label="Permalink to &quot;1. 碎碎念&quot;">​</a></h2><p>之前的文章中我们讲到了关于 <code>loader</code> 的一些配置。那如果把那些引用的 <code>loader</code> 改为我们写的 <code>loader</code> ，该怎么处理呢？</p><p>现在，我们来了解一下，如何手写一个简易的 <code>loader</code> ，并运用到我们的项目当中。</p><h2 id="_2-项目结构" tabindex="-1">2. 项目结构 <a class="header-anchor" href="#_2-项目结构" aria-label="Permalink to &quot;2. 项目结构&quot;">​</a></h2><p>首先用一张图，来看我们的<strong>项目结构</strong>。<strong>如下图所示：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270746613.png" alt="loader项目结构"></p><p>其中 <code>loaders</code> 文件夹下放置我们想要写的 <code>loader</code> ，同时里面的 <code>replaceLoader.js</code> 文件放置我们即将要写的 <code>loader</code> 的代码逻辑。之后，<code>index.js</code> 文件是我们的<strong>入口文件</strong>，放置我们的业务逻辑。 <code>webpack.config.js</code> 文件放置关于 <code>webpack</code> 的相关配置，而 <code>dist</code> 文件夹内的内容，放置的是我们通过 <code>webpack</code> 打包后，生成的打包文件。</p><h2 id="_3-业务代码编写" tabindex="-1">3. 业务代码编写 <a class="header-anchor" href="#_3-业务代码编写" aria-label="Permalink to &quot;3. 业务代码编写&quot;">​</a></h2><h3 id="_1-入口文件代码" tabindex="-1">（1）入口文件代码 <a class="header-anchor" href="#_1-入口文件代码" aria-label="Permalink to &quot;（1）入口文件代码&quot;">​</a></h3><p>现在，我们先来编写入口文件 <code>index.js</code> 的代码。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello monday&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello monday&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-编写-loader" tabindex="-1">（2）编写 loader <a class="header-anchor" href="#_2-编写-loader" aria-label="Permalink to &quot;（2）编写 loader&quot;">​</a></h3><p>入口文件的内容很简单，我们想要达到的目的就是输出 <code>hello monday</code> 这个语句。现在，我们来编写 <code>loader</code> 的内容，已达到对入口文件 <code>index.js</code> 的内容进行修改。 <code>replaceLoader.js</code> 文件的<strong>代码具体如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> source.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;monday&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;mondaylab&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> source.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;monday&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;mondaylab&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, result);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><p>以上的代码意思为，将入口文件 <code>index.js</code> 文件中的 <code>monday</code> 替换为 <code>mondaylab</code> 。这样写似乎没啥问题，但是大家有没有想过，我们有时候传的属性可能会很诡异，不一定每次都能像这样以字符串的形式来替换。</p><p>所以，我们引用 <code>webpack</code> 官方推荐的 <code>loadertils</code> 这个工具，来解决这个问题。</p><p><strong>第一步：</strong> 安装 <code>loader-utils</code> 插件。<strong>具体命令如下：</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">loader-utils</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">loader-utils</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>第二步：</strong> 改造 <code>loader</code> 文件。接下来，我们对 <code>replaceLoader.js</code> 文件进行改造升级，<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">loaderUtils</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;loader-utils&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//用function的原因在于为了业务层可以调用this</span></span>
<span class="line"><span style="color:#6A737D;">//source为引入文件的源代码</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//getOptions会自动地帮我们分析this.query,然后把参数的所有内容放在options里面去</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loaderUtils.</span><span style="color:#B392F0;">getOptions</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> source.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;monday&#39;</span><span style="color:#E1E4E8;">, options.name);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">loaderUtils</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;loader-utils&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//用function的原因在于为了业务层可以调用this</span></span>
<span class="line"><span style="color:#6A737D;">//source为引入文件的源代码</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//getOptions会自动地帮我们分析this.query,然后把参数的所有内容放在options里面去</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loaderUtils.</span><span style="color:#6F42C1;">getOptions</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> source.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;monday&#39;</span><span style="color:#24292E;">, options.name);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, result);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>大家可以看到，通过使用 <code>loaderUtils</code> 插件，间接地，调用 <code>getOptions</code> 方法，来自动的帮我们分析 <code>this.query</code> ，从而取到我们想要的内容。</p><p>值得注意的是，我们还需要再了解一下 <code>this.callback</code> 的内容。</p><p>一般情况下，如果我们接收到了源代码 <code>source</code> ，那么现在我们只能对源代码做处理。但是呢，有的时候，我们想要使用一些 <code>sourceMap</code> ，或者对源代码分析好了之后，我们不仅想要返回源代码，还要把 <code>sourceMap</code> 也带回去。</p><p>因为我们 <code>return</code> 的时候只能 <code>return</code> 一个参数，其余的一些额外的内容就带不出去了。这个时候呢，我们就需要 <code>this.callback</code> 来帮我们把 <code>sourceMap</code> 给带出去。因此，一般用 <code>this.callback</code> 来返回内容。</p><h3 id="_3-引用-loader" tabindex="-1">（3）引用 loader <a class="header-anchor" href="#_3-引用-loader" aria-label="Permalink to &quot;（3）引用 loader&quot;">​</a></h3><p>现在，我们在 <code>webpack.config.js</code> 中，来引入我们上面的 <code>loader</code> 。<strong>具体配置如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&#39;development&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    main: </span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">js</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="color:#E1E4E8;">          {</span></span>
<span class="line"><span style="color:#E1E4E8;">            loader: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;./loaders/replaceLoader.js&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//上面的options.name中的name</span></span>
<span class="line"><span style="color:#E1E4E8;">            options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">              name: </span><span style="color:#9ECBFF;">&#39;mondaylab&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;[name].js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  mode: </span><span style="color:#032F62;">&#39;development&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  entry: {</span></span>
<span class="line"><span style="color:#24292E;">    main: </span><span style="color:#032F62;">&#39;./src/index.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">js/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        use: [</span></span>
<span class="line"><span style="color:#24292E;">          {</span></span>
<span class="line"><span style="color:#24292E;">            loader: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;./loaders/replaceLoader.js&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//上面的options.name中的name</span></span>
<span class="line"><span style="color:#24292E;">            options: {</span></span>
<span class="line"><span style="color:#24292E;">              name: </span><span style="color:#032F62;">&#39;mondaylab&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  output: {</span></span>
<span class="line"><span style="color:#24292E;">    path: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;dist&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">&#39;[name].js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>通过以上方式，我们写了一个简易的 <code>loader</code> ，这个 <code>loader</code> 实现了将 <code>monday</code> 替换为 <code>mondaylab</code> 的功能。并且供我们在 <code>webpack</code> 中使用自己书写的 <code>loader</code> 。</p><h3 id="_4-在-loader-里面做一些异步的操作" tabindex="-1">（4）在 loader 里面做一些异步的操作 <a class="header-anchor" href="#_4-在-loader-里面做一些异步的操作" aria-label="Permalink to &quot;（4）在 loader 里面做一些异步的操作&quot;">​</a></h3><p>好了现在，如果我们想要给 <code>loader</code> 做一些异步操作，该怎么实现呢？</p><p>在我们所写的 <code>loader</code> 当中，加入异步操作，那么我们需要调用官方提供给我们的 <code>this.async()</code> 这个 <code>API</code> 来实现。现在，我们来改造一下 <code>replaceLoader.js</code> 文件的代码。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">loaderUtils</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;loader-utils&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loaderUtils.</span><span style="color:#B392F0;">getOptions</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//调用this.async()这个API，来给异步代码使用</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">callback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> source.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;monday&#39;</span><span style="color:#E1E4E8;">, options.name);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">loaderUtils</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;loader-utils&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loaderUtils.</span><span style="color:#6F42C1;">getOptions</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//调用this.async()这个API，来给异步代码使用</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">callback</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">async</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> source.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;monday&#39;</span><span style="color:#24292E;">, options.name);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, result);</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>通过这种方式，我们就可以在 <code>loader</code> 中编写异步代码，来达到我们想要的效果。</p><h3 id="_5-loader-路径自定义" tabindex="-1">（5）loader 路径自定义 <a class="header-anchor" href="#_5-loader-路径自定义" aria-label="Permalink to &quot;（5）loader 路径自定义&quot;">​</a></h3><p>有一个很小的注意点就是，当我们在配置 <code>webpack.config.js</code> 文件中， <code>loader</code> 的路径时，每回都要 <code>path.resolve</code> 去寻找路径文件。文件少的时候还好，但如果遇到多文件的时候呢？岂不是会很麻烦。</p><p>所以，我们引用 <code>resolveLoader</code> 来简化它。现在我们在 <code>webpack.config.js</code> 文件中进行改造。<strong>具体配置如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 先到node_modules中去找，找不到则去./loaders目录下去找</span></span>
<span class="line"><span style="color:#E1E4E8;">  resolveLoader: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    modules: [</span><span style="color:#9ECBFF;">&#39;node_modules&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;./loaders&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">js</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="color:#E1E4E8;">          {</span></span>
<span class="line"><span style="color:#E1E4E8;">            loader: </span><span style="color:#9ECBFF;">&#39;replaceLoader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 先到node_modules中去找，找不到则去./loaders目录下去找</span></span>
<span class="line"><span style="color:#24292E;">  resolveLoader: {</span></span>
<span class="line"><span style="color:#24292E;">    modules: [</span><span style="color:#032F62;">&#39;node_modules&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;./loaders&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">js/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        use: [</span></span>
<span class="line"><span style="color:#24292E;">          {</span></span>
<span class="line"><span style="color:#24292E;">            loader: </span><span style="color:#032F62;">&#39;replaceLoader&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>通过配置 <code>resolveLoader</code> ，来对文件文件目录进行查找，从而简化了路径内容。</p><h1 id="🎶-二、如何编写一个-plugin" tabindex="-1">🎶 二、如何编写一个 Plugin <a class="header-anchor" href="#🎶-二、如何编写一个-plugin" aria-label="Permalink to &quot;🎶 二、如何编写一个 Plugin&quot;">​</a></h1><h2 id="_1-碎碎念-1" tabindex="-1">1. 碎碎念 <a class="header-anchor" href="#_1-碎碎念-1" aria-label="Permalink to &quot;1. 碎碎念&quot;">​</a></h2><p>在讲解 <code>plugin</code> 之前，我们先来了解 <code>loader</code> 和 <code>plugin</code> 的区别。</p><p>当我们在源代码里面，去引入一个新的 <code>js</code> 文件，或者是一个其他格式的文件时，这个时候我们可以借用 <code>loader</code> ，来帮我们处理我们引用的 <code>loader</code> 文件。 <code>loader</code> 的作用就在于，帮助我们<strong>处理引用的模块</strong>。</p><p>而 <code>plugin</code> 呢，是当我们在做打包的时候，在<strong>某些具体时刻上</strong>，比如说，当我们打包结束之后，我们要生成一个 <code>html</code> 文件，这个时候，我们就可以使用一个 <code>htmlWebpackPlugin</code> 的插件。使用它之后，他就会在打包结束之后，帮我们生成对应的 <code>html</code> 文件。</p><p>再比如，我们要在打包之前，把 <code>dist</code> 目录进行清空，这个时候我们就可以使用 <code>cleanWebpackPlugin</code> 来帮助我们做这件事情。</p><p>所以， <code>plugin</code> 插件，在什么时候生效呢？</p><p>它在我们<strong>打包过程中的某些时刻里</strong>，就是<strong>插件生效的场景</strong>。</p><p><code>plugin</code> 的编写相对于 <code>loader</code> 来说，会难一点点。但是呢，如果有看过 <code>webpack</code> 源码的小伙伴们可能会知道， <code>webpack</code> 的一些底层原理都是依据 <code>plugin</code> 来进行编写的。所以，我们还是有必要来学习一下 <code>plugin</code> 的编写。</p><p>下面就带领大家来编写一个简易的 <code>plugin</code> ~</p><h2 id="_2-项目结构-1" tabindex="-1">2. 项目结构 <a class="header-anchor" href="#_2-项目结构-1" aria-label="Permalink to &quot;2. 项目结构&quot;">​</a></h2><p>对于 <code>webpack</code> 的 <code>plugin</code> 来说，它是是基于<strong>发布者订阅</strong>的设计模式，也可以说是基于<strong>事件驱动</strong>来实现的。在这个事件驱动里，代码之间的执行，是通过事件来进行驱动的。</p><p>接下来，我们就来写一个简易的 <code>plugin</code> 。</p><p>首先用一张图，来看我们的<strong>项目结构</strong>。<strong>如下图所示：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270746252.png" alt="plugin项目结构"></p><p>其中 <code>plugins</code> 文件夹下放置我们想要写的 <code>plugin</code> ，同时里面的 <code>copyright-webpack-plugin.js</code> 文件放置我们即将要写的 <code>plugin</code> 的代码逻辑。之后，<code>index.js</code> 文件是我们的<strong>入口文件</strong>，放置我们的业务逻辑。 <code>webpack.config.js</code> 文件放置关于 <code>webpack</code> 的相关配置，而 <code>dist</code> 文件夹内的内容，放置的是我们通过 <code>webpack</code> 打包后，生成的打包文件。</p><h2 id="_3-业务代码编写-1" tabindex="-1">3. 业务代码编写 <a class="header-anchor" href="#_3-业务代码编写-1" aria-label="Permalink to &quot;3. 业务代码编写&quot;">​</a></h2><h3 id="_1-入口文件代码-1" tabindex="-1">（1）入口文件代码 <a class="header-anchor" href="#_1-入口文件代码-1" aria-label="Permalink to &quot;（1）入口文件代码&quot;">​</a></h3><p>现在，我们先来编写入口文件 <code>index.js</code> 的代码。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello monday&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello monday&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-编写-plugin" tabindex="-1">（2）编写 plugin <a class="header-anchor" href="#_2-编写-plugin" aria-label="Permalink to &quot;（2）编写 plugin&quot;">​</a></h3><p>现在，我们来编写 <code>plugin</code> 的内容， <code>copyright-webpack-plugin.js</code> 文件的<strong>代码具体如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CopyrightWebpackPlugin</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//编写一个构造器</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(options);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//遇到同步时刻</span></span>
<span class="line"><span style="color:#E1E4E8;">    compiler.hooks.compile.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;CopyrightWebpackPlugin&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;compiler&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//遇到异步时刻</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//当要把代码放到dist目录之前，要走下面这个函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//Compilation存放打包的所有内容，Compilation.assets放置生成的内容</span></span>
<span class="line"><span style="color:#E1E4E8;">    compiler.hooks.emit.</span><span style="color:#B392F0;">tapAsync</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;CopyrightWebpackPlugin&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      (</span><span style="color:#FFAB70;">Compilation</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">debugger</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 往代码中增加一个文件，copyright.txt</span></span>
<span class="line"><span style="color:#E1E4E8;">        Compilation.assets[</span><span style="color:#9ECBFF;">&#39;copyright.txt&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">source</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;copyright by monday&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CopyrightWebpackPlugin;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CopyrightWebpackPlugin</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//编写一个构造器</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(options);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#E36209;">compiler</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//遇到同步时刻</span></span>
<span class="line"><span style="color:#24292E;">    compiler.hooks.compile.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;CopyrightWebpackPlugin&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;compiler&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//遇到异步时刻</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//当要把代码放到dist目录之前，要走下面这个函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//Compilation存放打包的所有内容，Compilation.assets放置生成的内容</span></span>
<span class="line"><span style="color:#24292E;">    compiler.hooks.emit.</span><span style="color:#6F42C1;">tapAsync</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;CopyrightWebpackPlugin&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      (</span><span style="color:#E36209;">Compilation</span><span style="color:#24292E;">, </span><span style="color:#E36209;">cb</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">debugger</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 往代码中增加一个文件，copyright.txt</span></span>
<span class="line"><span style="color:#24292E;">        Compilation.assets[</span><span style="color:#032F62;">&#39;copyright.txt&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">source</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;copyright by monday&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">19</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">cb</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CopyrightWebpackPlugin;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>上面的这个插件中想要实现的功能就是，<strong>获取版权信息</strong>。</p><h3 id="_3-引用-plugin" tabindex="-1">（3）引用 plugin <a class="header-anchor" href="#_3-引用-plugin" aria-label="Permalink to &quot;（3）引用 plugin&quot;">​</a></h3><p>现在，我们在 <code>webpack.config.js</code> 中，来引入我们上面的 <code>plugin</code> 。<strong>具体配置如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CopyrightWebpackPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./plugins/copyright-webpack-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&#39;development&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    main: </span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CopyrightWebpackPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&#39;monday&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;[name].js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CopyrightWebpackPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./plugins/copyright-webpack-plugin&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  mode: </span><span style="color:#032F62;">&#39;development&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  entry: {</span></span>
<span class="line"><span style="color:#24292E;">    main: </span><span style="color:#032F62;">&#39;./src/index.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CopyrightWebpackPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&#39;monday&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  output: {</span></span>
<span class="line"><span style="color:#24292E;">    path: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;dist&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">&#39;[name].js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>通过上述代码，我们可以了解到，在（2）中，我们首先需要<strong>定义一个类</strong>，之后呢，在类中写一个构造器和一个 <code>apply()</code> 方法来调用。然后呢，大家看到（3），通过 <code>require</code> 的方式，来进行 <strong>new 实例</strong> ，实例化一个插件，从而在项目中使用这个插件。</p><p>最终，我们项目进行打包时，就会生成一个 <code>dist</code> 目录，并且在目录下增加一个 <code>copyright.txt</code> 文件，并且文件中的内容就是 <code>copyright by monday</code> 。</p><h1 id="💹-三、结束语" tabindex="-1">💹 三、结束语 <a class="header-anchor" href="#💹-三、结束语" aria-label="Permalink to &quot;💹 三、结束语&quot;">​</a></h1><p>在上面的文章中，讲解了关于 loader 和 plugin 的基本编写思路，以及如何在项目中对他们进行运用，相信大家对这一块内容有了基础的认识。</p><p>到这里，loader 和 plugin 的编写讲解就结束啦！希望对大家有帮助~</p><p>如文章有误或有不理解的地方，欢迎小伙伴们评论区留言哦 💬</p><p>本文代码已上传至公众号，后台回复关键词 <code>webpack</code> 即可获取~</p><h1 id="🐣-彩蛋-one-more-thing" tabindex="-1">🐣 彩蛋 One More Thing <a class="header-anchor" href="#🐣-彩蛋-one-more-thing" aria-label="Permalink to &quot;🐣 彩蛋 One More Thing&quot;">​</a></h1><h2 id="往期推荐" tabindex="-1">（：往期推荐 <a class="header-anchor" href="#往期推荐" aria-label="Permalink to &quot;（：往期推荐&quot;">​</a></h2><p>webpack 入门核心知识 👉<a href="https://blog.csdn.net/weixin_44803753/article/details/118728201" target="_blank" rel="noreferrer">不会 webpack 的前端可能是捡来的，万字总结 webpack 的超入门核心知识</a></p><p>webpack 入门进阶知识 👉<a href="https://blog.csdn.net/weixin_44803753/article/details/118885391" target="_blank" rel="noreferrer">webpack 入门核心知识还看不过瘾？速来围观万字进阶知识</a></p><p>webpack 实战案例配置 👉<a href="https://blog.csdn.net/weixin_44803753/article/details/118977647" target="_blank" rel="noreferrer">万字总结 webpack 实战案例配置</a></p>`,83),e=[o];function c(r,t,E,i,y,d){return n(),a("div",null,e)}const m=s(p,[["render",c]]);export{b as __pageData,m as default};
