import{_ as s,o as a,c as e,Q as l}from"./chunks/framework.98c15f2e.js";const _=JSON.parse('{"title":"『软件测试6』bug一两是小事，但安全漏洞是大事！","description":"","frontmatter":{"title":"『软件测试6』bug一两是小事，但安全漏洞是大事！","author":"周一","date":"2021-06-16","categories":["产品汪"],"tags":["软件测试"],"sidebar":"auto"},"headers":[{"level":1,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":1,"title":"一、💿 安全测试概念","slug":"一、💿-安全测试概念","link":"#一、💿-安全测试概念","children":[{"level":2,"title":"1、安全测试概述","slug":"_1、安全测试概述","link":"#_1、安全测试概述","children":[]},{"level":2,"title":"2、安全测试与软件生命周期的关系","slug":"_2、安全测试与软件生命周期的关系","link":"#_2、安全测试与软件生命周期的关系","children":[]},{"level":2,"title":"3、常规测试与安全测试的不同","slug":"_3、常规测试与安全测试的不同","link":"#_3、常规测试与安全测试的不同","children":[{"level":3,"title":"（1）测试目标不同","slug":"_1-测试目标不同","link":"#_1-测试目标不同","children":[]},{"level":3,"title":"（2）假设条件不同","slug":"_2-假设条件不同","link":"#_2-假设条件不同","children":[]},{"level":3,"title":"（3）思考域不同","slug":"_3-思考域不同","link":"#_3-思考域不同","children":[]},{"level":3,"title":"（4）问题发现模式不同","slug":"_4-问题发现模式不同","link":"#_4-问题发现模式不同","children":[]}]}]},{"level":1,"title":"二、🔍 安全测试基本原则","slug":"二、🔍-安全测试基本原则","link":"#二、🔍-安全测试基本原则","children":[{"level":2,"title":"1、培养正确的思维方式","slug":"_1、培养正确的思维方式","link":"#_1、培养正确的思维方式","children":[]},{"level":2,"title":"2、尽早测试和经常测试","slug":"_2、尽早测试和经常测试","link":"#_2、尽早测试和经常测试","children":[]},{"level":2,"title":"3、选择正确的测试工具","slug":"_3、选择正确的测试工具","link":"#_3、选择正确的测试工具","children":[]},{"level":2,"title":"4、尽可能测试源代码","slug":"_4、尽可能测试源代码","link":"#_4、尽可能测试源代码","children":[]},{"level":2,"title":"5、测试结果文档化","slug":"_5、测试结果文档化","link":"#_5、测试结果文档化","children":[]}]},{"level":1,"title":"三、🔦 常见安全漏洞","slug":"三、🔦-常见安全漏洞","link":"#三、🔦-常见安全漏洞","children":[{"level":2,"title":"1、SQL 注入","slug":"_1、sql-注入","link":"#_1、sql-注入","children":[{"level":3,"title":"（1）定义","slug":"_1-定义","link":"#_1-定义","children":[]},{"level":3,"title":"（2）案例","slug":"_2-案例","link":"#_2-案例","children":[]},{"level":3,"title":"（3）如何防范 SQL 注入","slug":"_3-如何防范-sql-注入","link":"#_3-如何防范-sql-注入","children":[]}]},{"level":2,"title":"2、XSS 跨站脚本攻击","slug":"_2、xss-跨站脚本攻击","link":"#_2、xss-跨站脚本攻击","children":[{"level":3,"title":"（1）XSS 命名","slug":"_1-xss-命名","link":"#_1-xss-命名","children":[]},{"level":3,"title":"（2）定义","slug":"_2-定义","link":"#_2-定义","children":[]},{"level":3,"title":"（3）xss 攻击过程","slug":"_3-xss-攻击过程","link":"#_3-xss-攻击过程","children":[]},{"level":3,"title":"（4）如何防御","slug":"_4-如何防御","link":"#_4-如何防御","children":[]}]},{"level":2,"title":"3、CSRF 跨站请求伪造攻击","slug":"_3、csrf-跨站请求伪造攻击","link":"#_3、csrf-跨站请求伪造攻击","children":[{"level":3,"title":"（1）定义","slug":"_1-定义-1","link":"#_1-定义-1","children":[]},{"level":3,"title":"（2）攻击过程","slug":"_2-攻击过程","link":"#_2-攻击过程","children":[]},{"level":3,"title":"（3）如何攻击","slug":"_3-如何攻击","link":"#_3-如何攻击","children":[]},{"level":3,"title":"（4）CSRF 和 XSS 的不同之处","slug":"_4-csrf-和-xss-的不同之处","link":"#_4-csrf-和-xss-的不同之处","children":[]},{"level":3,"title":"（5）如何防范 CSRF","slug":"_5-如何防范-csrf","link":"#_5-如何防范-csrf","children":[]},{"level":3,"title":"（6）Referer","slug":"_6-referer","link":"#_6-referer","children":[]}]}]},{"level":1,"title":"四、🩸 渗透测试","slug":"四、🩸-渗透测试","link":"#四、🩸-渗透测试","children":[{"level":2,"title":"1、渗透测试的定义","slug":"_1、渗透测试的定义","link":"#_1、渗透测试的定义","children":[]},{"level":2,"title":"2、渗透测试的特点","slug":"_2、渗透测试的特点","link":"#_2、渗透测试的特点","children":[]},{"level":2,"title":"3、渗透测试流程主要步骤","slug":"_3、渗透测试流程主要步骤","link":"#_3、渗透测试流程主要步骤","children":[]},{"level":2,"title":"4、渗透测试流程","slug":"_4、渗透测试流程","link":"#_4、渗透测试流程","children":[{"level":3,"title":"（1）明确目标","slug":"_1-明确目标","link":"#_1-明确目标","children":[]},{"level":3,"title":"（2）收集信息","slug":"_2-收集信息","link":"#_2-收集信息","children":[]},{"level":3,"title":"（3）扫描漏洞","slug":"_3-扫描漏洞","link":"#_3-扫描漏洞","children":[]},{"level":3,"title":"（4）验证漏洞","slug":"_4-验证漏洞","link":"#_4-验证漏洞","children":[]},{"level":3,"title":"（5）分析信息","slug":"_5-分析信息","link":"#_5-分析信息","children":[]},{"level":3,"title":"（6）渗透攻击","slug":"_6-渗透攻击","link":"#_6-渗透攻击","children":[]},{"level":3,"title":"（7）整理信息","slug":"_7-整理信息","link":"#_7-整理信息","children":[]},{"level":3,"title":"（8）编写测试报告","slug":"_8-编写测试报告","link":"#_8-编写测试报告","children":[]}]}]},{"level":1,"title":"五、🛠️ 常见安全测试工具","slug":"五、🛠️-常见安全测试工具","link":"#五、🛠️-常见安全测试工具","children":[{"level":2,"title":"1、Web 漏洞扫描工具-AppScan","slug":"_1、web-漏洞扫描工具-appscan","link":"#_1、web-漏洞扫描工具-appscan","children":[{"level":3,"title":"（1）定义","slug":"_1-定义-2","link":"#_1-定义-2","children":[]},{"level":3,"title":"（2）AppScan 的扫描过程","slug":"_2-appscan-的扫描过程","link":"#_2-appscan-的扫描过程","children":[]}]},{"level":2,"title":"2、端口扫描工具-Nmap","slug":"_2、端口扫描工具-nmap","link":"#_2、端口扫描工具-nmap","children":[{"level":3,"title":"（1）定义","slug":"_1-定义-3","link":"#_1-定义-3","children":[]},{"level":3,"title":"（2）Nmap 的具体功能","slug":"_2-nmap-的具体功能","link":"#_2-nmap-的具体功能","children":[]}]},{"level":2,"title":"3、抓包工具-Fiddler","slug":"_3、抓包工具-fiddler","link":"#_3、抓包工具-fiddler","children":[{"level":3,"title":"（1）定义","slug":"_1-定义-4","link":"#_1-定义-4","children":[]},{"level":3,"title":"（2）Fiddler 的功能","slug":"_2-fiddler-的功能","link":"#_2-fiddler-的功能","children":[]}]},{"level":2,"title":"4、Web 渗透测试工具-Metasploit","slug":"_4、web-渗透测试工具-metasploit","link":"#_4、web-渗透测试工具-metasploit","children":[{"level":3,"title":"（1）定义","slug":"_1-定义-5","link":"#_1-定义-5","children":[]},{"level":3,"title":"（2）Metasploit 的具体功能","slug":"_2-metasploit-的具体功能","link":"#_2-metasploit-的具体功能","children":[]},{"level":3,"title":"（3）Metasploit 的作用","slug":"_3-metasploit-的作用","link":"#_3-metasploit-的作用","children":[]}]}]},{"level":1,"title":"六、🔚 结束语","slug":"六、🔚-结束语","link":"#六、🔚-结束语","children":[]}],"relativePath":"column/Product/SoftwareTesting/006.md","filePath":"column/Product/SoftwareTesting/006.md","lastUpdated":1685151998000}'),o={name:"column/Product/SoftwareTesting/006.md"},n=l(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p>前面我们讲过黑白盒测试和性能测试，但是呢，对于一个软件来说，安全测试也是非常重要的。就像封面所示，内容很诱人，一旦用户点击进去，就很容易让其执行非本意的操作，试想下结果……不堪设想。因此，做好<strong>软件安全测试</strong>，共同营造一个良好的软件环境是至关重要的。</p><p>在下面的这篇文章中，将讲解关于<strong>软件测试中的安全测试</strong>。一起来学习吧~</p><h1 id="一、💿-安全测试概念" tabindex="-1">一、💿 安全测试概念 <a class="header-anchor" href="#一、💿-安全测试概念" aria-label="Permalink to &quot;一、💿 安全测试概念&quot;">​</a></h1><h2 id="_1、安全测试概述" tabindex="-1">1、安全测试概述 <a class="header-anchor" href="#_1、安全测试概述" aria-label="Permalink to &quot;1、安全测试概述&quot;">​</a></h2><p>安全测试是在 IT 软件产品的生命周期中，特别是产品开发基本完成到发布阶段，对产品进行检验以验证产品符合安全需求定义和产品质量标准的过程。</p><h2 id="_2、安全测试与软件生命周期的关系" tabindex="-1">2、安全测试与软件生命周期的关系 <a class="header-anchor" href="#_2、安全测试与软件生命周期的关系" aria-label="Permalink to &quot;2、安全测试与软件生命周期的关系&quot;">​</a></h2><p>安全测试贯穿于软件的整个生命周期。<strong>如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/2021061009324222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="安全测试与软件生命周期的关系"></p><h2 id="_3、常规测试与安全测试的不同" tabindex="-1">3、常规测试与安全测试的不同 <a class="header-anchor" href="#_3、常规测试与安全测试的不同" aria-label="Permalink to &quot;3、常规测试与安全测试的不同&quot;">​</a></h2><h3 id="_1-测试目标不同" tabindex="-1">（1）测试目标不同 <a class="header-anchor" href="#_1-测试目标不同" aria-label="Permalink to &quot;（1）测试目标不同&quot;">​</a></h3><p>普通测试以<strong>发现 <code>Bug</code></strong> 为目标；</p><p>安全测试以<strong>发现安全隐患</strong>为目标。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270905967.png" alt="测试目标不同"></p><h3 id="_2-假设条件不同" tabindex="-1">（2）假设条件不同 <a class="header-anchor" href="#_2-假设条件不同" aria-label="Permalink to &quot;（2）假设条件不同&quot;">​</a></h3><p>普通测试假设导致问题的数据是用户不小心造成的，接口一般只考虑<strong>用户界面</strong>；</p><p>安全测试假设导致问题的数据是攻击者处心积虑构造的，需要考虑<strong>所有可能的攻击途径</strong>。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270906814.png" alt="假设条件不同"></p><h3 id="_3-思考域不同" tabindex="-1">（3）思考域不同 <a class="header-anchor" href="#_3-思考域不同" aria-label="Permalink to &quot;（3）思考域不同&quot;">​</a></h3><p>普通测试以<strong>系统所具有的功能</strong>为思考域；</p><p>安全测试的思考域不但包括系统的功能，还有系统的机制、外部环境、应用与数据自身安全风险与安全属性等。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270906702.png" alt="思考域不同"></p><h3 id="_4-问题发现模式不同" tabindex="-1">（4）问题发现模式不同 <a class="header-anchor" href="#_4-问题发现模式不同" aria-label="Permalink to &quot;（4）问题发现模式不同&quot;">​</a></h3><p>普通测试以<strong>违反功能定义</strong>为判断依据；</p><p>安全测试以<strong>违反权限与能力的约束</strong>为判断依据。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270909908.png" alt="问题发现模式不同"></p><h1 id="二、🔍-安全测试基本原则" tabindex="-1">二、🔍 安全测试基本原则 <a class="header-anchor" href="#二、🔍-安全测试基本原则" aria-label="Permalink to &quot;二、🔍 安全测试基本原则&quot;">​</a></h1><h2 id="_1、培养正确的思维方式" tabindex="-1">1、培养正确的思维方式 <a class="header-anchor" href="#_1、培养正确的思维方式" aria-label="Permalink to &quot;1、培养正确的思维方式&quot;">​</a></h2><p>安全测试人员要有<strong>创造性思维</strong>，创造性思维能够帮助我们站在<strong>攻击者角度</strong>思考各种无法预期的情况，同时能够帮助我们猜测开发人员是如何开发的，如何绕过程序防护逻辑，以<strong>某种不安全的行为模式</strong>导致程序失效。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270909293.png" alt="培养正确的思维方式"></p><h2 id="_2、尽早测试和经常测试" tabindex="-1">2、尽早测试和经常测试 <a class="header-anchor" href="#_2、尽早测试和经常测试" aria-label="Permalink to &quot;2、尽早测试和经常测试&quot;">​</a></h2><p>安全性缺陷和普通 <code>Bug</code> 没什么区别，越早发现修复成本越低，要做到这一点，最开始的就是在软件开发前期对开发和测试团队进行常见安全问题的培训，教会他们学会如何检测并修复安全缺陷。</p><p>虽然新兴的<strong>第三方库</strong>、<strong>工具</strong>以及<strong>编程语言</strong>能够帮助开发人员设计出更安全的程序，但是新的威胁不断出现，开发人员最好能够意识到新产生的安全漏洞对正在开发的软件的影响，测试人员要<strong>转变思维方式</strong>，从攻击者角度的各个细节测试应用程序，使软件更加安全。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270909905.png" alt="尽早测试和经常测试"></p><h2 id="_3、选择正确的测试工具" tabindex="-1">3、选择正确的测试工具 <a class="header-anchor" href="#_3、选择正确的测试工具" aria-label="Permalink to &quot;3、选择正确的测试工具&quot;">​</a></h2><p>很多情况下安全测试需要模拟黑客的行为对软件系统发起攻击，以确保软件系统具备稳固的防御能力。模拟黑客行为就要求安全测试人员擅长使用各种工具，如<strong>漏洞扫描工具</strong>、<strong>模拟数据流行为的前后台相关工具</strong>、<strong>数据包抓取工具</strong>等。</p><p>现在市面上提供了很多安全扫描器或者应用防火墙工具可以自动完成许多日常安全任务，但是这些工具并不是万能的。作为测试人员，我们要准确了解这些工具能做什么，不能做什么是非常重要的，切不可过分夸大或者不当使用测试工具。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270909393.png" alt="选择正确的测试工具"></p><h2 id="_4、尽可能测试源代码" tabindex="-1">4、尽可能测试源代码 <a class="header-anchor" href="#_4、尽可能测试源代码" aria-label="Permalink to &quot;4、尽可能测试源代码&quot;">​</a></h2><p>使用<strong>源代码扫描工具</strong>对软件进行代码扫描，<strong>一方面</strong>可以找出潜在的风险，从内对软件进行检测，提高代码的安全性；<strong>另一方面</strong>也可以进一步提高代码的质量。<strong>黑盒的渗透测试</strong>和<strong>白盒的源代码扫描</strong>内外结合，可以使软件的安全性得到极大程度的提高。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270909184.png" alt="尽可能测试源代码"></p><h2 id="_5、测试结果文档化" tabindex="-1">5、测试结果文档化 <a class="header-anchor" href="#_5、测试结果文档化" aria-label="Permalink to &quot;5、测试结果文档化&quot;">​</a></h2><p>测试总结的时候，明智且有效的做法是将测试行动和结果清晰准确地记录在<strong>文档</strong>中，产生一份<strong>测试报告</strong>，该报告最好包括<strong>漏洞类型</strong>、<strong>问题引起的安全威胁</strong>及<strong>严重程度</strong>、<strong>用于发现问题的测试技术</strong>、<strong>漏洞的修复</strong>、<strong>漏洞风险</strong>等。</p><p>一份好的<strong>测试报告</strong>应该帮助开发人员<strong>准确定位</strong>软件安全漏洞，从而有效进行漏洞修补，使软件更安全可靠。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270909744.png" alt="测试结果文档化"></p><h1 id="三、🔦-常见安全漏洞" tabindex="-1">三、🔦 常见安全漏洞 <a class="header-anchor" href="#三、🔦-常见安全漏洞" aria-label="Permalink to &quot;三、🔦 常见安全漏洞&quot;">​</a></h1><h2 id="_1、sql-注入" tabindex="-1">1、SQL 注入 <a class="header-anchor" href="#_1、sql-注入" aria-label="Permalink to &quot;1、SQL 注入&quot;">​</a></h2><h3 id="_1-定义" tabindex="-1">（1）定义 <a class="header-anchor" href="#_1-定义" aria-label="Permalink to &quot;（1）定义&quot;">​</a></h3><p>所谓 <code>SQL</code> 注入就是把 <code>SQL</code> 命令人为的输入 <code>URL</code> 、表格域、或者其他动态生成的 <code>SQL</code> 查询语句的输入参数中，最终达到欺骗服务器执行恶意的 <code>SQL</code> 命令。</p><h3 id="_2-案例" tabindex="-1">（2）案例 <a class="header-anchor" href="#_2-案例" aria-label="Permalink to &quot;（2）案例&quot;">​</a></h3><p><strong>案例 1：</strong></p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">str </span><span style="color:#F97583;">SQL=</span><span style="color:#E1E4E8;">“</span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> users </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">name=</span><span style="color:#E1E4E8;">‘“</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">username</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">”’) </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> (pw</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">‘“</span><span style="color:#F97583;">+password+</span><span style="color:#E1E4E8;">”’); ”</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">str </span><span style="color:#D73A49;">SQL=</span><span style="color:#24292E;">“</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> users </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">name=</span><span style="color:#24292E;">‘“</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">username</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">”’) </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> (pw</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">‘“</span><span style="color:#D73A49;">+password+</span><span style="color:#24292E;">”’); ”</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">str </span><span style="color:#F97583;">SQL=</span><span style="color:#E1E4E8;">“</span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> users </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">name=</span><span style="color:#E1E4E8;">‘</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">’ </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> ‘</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">’</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">‘</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">’) </span><span style="color:#F97583;">and</span></span>
<span class="line"><span style="color:#E1E4E8;">(pw</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">‘</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">’ </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> ‘</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">’</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">‘</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">’); ”</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">str </span><span style="color:#D73A49;">SQL=</span><span style="color:#24292E;">“</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> users </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">name=</span><span style="color:#24292E;">‘</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">’ </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> ‘</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">’</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">‘</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">’) </span><span style="color:#D73A49;">and</span></span>
<span class="line"><span style="color:#24292E;">(pw</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">‘</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">’ </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> ‘</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">’</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">‘</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">’); ”</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>案例 2：</strong></p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">str </span><span style="color:#F97583;">SQL=</span><span style="color:#E1E4E8;">“</span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> users </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">name=</span><span style="color:#E1E4E8;">‘张三’；</span><span style="color:#F97583;">DROP</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TABLE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">users</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">--)”</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">str </span><span style="color:#D73A49;">SQL=</span><span style="color:#24292E;">“</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> users </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">name=</span><span style="color:#24292E;">‘张三’；</span><span style="color:#D73A49;">DROP</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">users</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">--)”</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">Select</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*from</span><span style="color:#E1E4E8;"> users </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">name=</span><span style="color:#E1E4E8;">‘张三’；</span></span>
<span class="line"><span style="color:#F97583;">DROP</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TABLE</span><span style="color:#E1E4E8;"> users</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">Select</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*from</span><span style="color:#24292E;"> users </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">name=</span><span style="color:#24292E;">‘张三’；</span></span>
<span class="line"><span style="color:#D73A49;">DROP</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> users</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_3-如何防范-sql-注入" tabindex="-1">（3）如何防范 SQL 注入 <a class="header-anchor" href="#_3-如何防范-sql-注入" aria-label="Permalink to &quot;（3）如何防范 SQL 注入&quot;">​</a></h3><p><code>SQL</code> 注入是<strong>风险非常高</strong>的安全漏洞，我们可以在应用程序中对用户输入的数据进行<strong>合法性检测</strong>，包括用户输入数据的<strong>类型和长度</strong>，同时，对 <code>SQL</code> 语句中的<strong>特殊字符</strong>（如单引号、双引号、分号等）进行过滤处理。</p><p>由于 <code>SQL</code> 注入攻击的 <code>Web</code> 应用程序处于<strong>应用层</strong>，因此大多<strong>防火墙不会进行拦截</strong>。除了完善应用代码外，还可以在数据库服务器端进行防御，对数据库服务器进行权限设置，降低 <code>Web</code> 程序连接数据库的权限，撤销不必要的公共许可，使用强大的加密技术保护敏感数据并对被读取走的敏感数据进行审查跟踪等。</p><h2 id="_2、xss-跨站脚本攻击" tabindex="-1">2、XSS 跨站脚本攻击 <a class="header-anchor" href="#_2、xss-跨站脚本攻击" aria-label="Permalink to &quot;2、XSS 跨站脚本攻击&quot;">​</a></h2><h3 id="_1-xss-命名" tabindex="-1">（1）XSS 命名 <a class="header-anchor" href="#_1-xss-命名" aria-label="Permalink to &quot;（1）XSS 命名&quot;">​</a></h3><p><code>XSS</code> 全拼为 <code>Cross Site Scripting</code> ，意为<strong>跨站脚本</strong>，其缩写原本为 <code>CSS</code> ，但这与 <code>HTML</code> 中的层叠样式表（Cascading Style Sheets)缩写重名了，为了区分就将跨站脚本改为了 <code>XSS</code> 。</p><h3 id="_2-定义" tabindex="-1">（2）定义 <a class="header-anchor" href="#_2-定义" aria-label="Permalink to &quot;（2）定义&quot;">​</a></h3><p><code>XSS</code> （Cross Site Scripting）是 <code>Web</code> 应用系统最常见的安全漏洞之一，它主要源于 <code>Web</code> 应用程序对用户输入检查和过滤不足。攻击者可以利用 <code>XSS</code> 漏洞把<strong>恶意代码</strong>注入到网站中，当有用户浏览该网站时，这些恶意代码就会被执行，从而达到攻击的目的。</p><h3 id="_3-xss-攻击过程" tabindex="-1">（3）xss 攻击过程 <a class="header-anchor" href="#_3-xss-攻击过程" aria-label="Permalink to &quot;（3）xss 攻击过程&quot;">​</a></h3><p><strong>先用一张图来演示 XSS 的攻击过程：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270909823.png" alt=" XSS攻击过程"></p><p><strong>XSS 攻击过程有以下 4 个步骤：</strong></p><ul><li>攻击者通过邮件或其他方式诱使用户点击包含恶意代码的链接，例如攻击者通过 E-mail 向用户发送一个包含恶意代码的网站 <code>home.com</code> 。</li><li>用户点击链接后，浏览器会在用户毫不知情的情况下执行链接中包含的恶意代码。</li><li>将用户与 <code>home.com</code> 交互的 <code>cookie</code> 和 <code>session</code> 等信息发送给攻击者。</li><li>攻击者拿到这些数据之后，就会伪装成用户与真正的网站进行会话，从事非法活动。</li></ul><h3 id="_4-如何防御" tabindex="-1">（4）如何防御 <a class="header-anchor" href="#_4-如何防御" aria-label="Permalink to &quot;（4）如何防御&quot;">​</a></h3><p>对于 <code>XSS</code> 漏洞，<strong>最核心的防御措施</strong>就是对用户的输入进行检查和过滤，包括 <code>URL</code> 、查询关键字、 <code>HTTP</code> 头、 <code>POST</code> 数据等，仅接受指定长度范围、格式适当、符合预期的内容，对其他不符合预期的内容一律进行过滤。</p><p>除此之外，当向 <code>HTML</code> 标签或属性中插入不可信数据时，要对这些数据进行相应的编码处理。将重要的 <code>cookie</code> 标记为 <code>http only</code> ，这样 <code>javascript</code> 脚本就不能访问这个 <code>cookie</code> ，避免了攻击者利用 <code>javascript</code> 脚本获取 <code>cookie</code> 。</p><h2 id="_3、csrf-跨站请求伪造攻击" tabindex="-1">3、CSRF 跨站请求伪造攻击 <a class="header-anchor" href="#_3、csrf-跨站请求伪造攻击" aria-label="Permalink to &quot;3、CSRF 跨站请求伪造攻击&quot;">​</a></h2><h3 id="_1-定义-1" tabindex="-1">（1）定义 <a class="header-anchor" href="#_1-定义-1" aria-label="Permalink to &quot;（1）定义&quot;">​</a></h3><p><code>CSRF</code> （Cross-Site Request Forgery）为<strong>跨站请求伪造</strong>，它是一种针对 <code>Web</code> 应用程序的攻击方式，攻击者利用 <code>CSRF</code> 漏洞伪装成<strong>受信任用户的请求</strong>，来访问受攻击的网站。</p><h3 id="_2-攻击过程" tabindex="-1">（2）攻击过程 <a class="header-anchor" href="#_2-攻击过程" aria-label="Permalink to &quot;（2）攻击过程&quot;">​</a></h3><p><strong>下面用一张图来演示 <code>CSRF</code> 的攻击过程：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270909896.png" alt=" CSRF攻击过程"></p><h3 id="_3-如何攻击" tabindex="-1">（3）如何攻击 <a class="header-anchor" href="#_3-如何攻击" aria-label="Permalink to &quot;（3）如何攻击&quot;">​</a></h3><p>在 <code>CSRF</code> 攻击中，当用户访问一个信任网站时，在没有退出会话的情况下，攻击者诱使用户点击恶意网站，恶意网站会返回攻击代码，同时要求访问信任网站，这样用户就在不知情的情况下将恶意网站的代码发送到了信任网站。</p><h3 id="_4-csrf-和-xss-的不同之处" tabindex="-1">（4）CSRF 和 XSS 的不同之处 <a class="header-anchor" href="#_4-csrf-和-xss-的不同之处" aria-label="Permalink to &quot;（4）CSRF 和 XSS 的不同之处&quot;">​</a></h3><p><code>XSS</code> 是盗取用户信息伪装成用户执行恶意活动，而 <code>CSRF</code> 则是通过用户向网站发起攻击。</p><p>如果将 <code>XSS</code> 攻击过程比喻为小偷偷取了用户的身份证去办理非法业务，则 <code>CSRF</code> 攻击则是骗子“劫持”了用户，让用户自己去办理非法业务，以达到自己的目的。</p><h3 id="_5-如何防范-csrf" tabindex="-1">（5）如何防范 CSRF <a class="header-anchor" href="#_5-如何防范-csrf" aria-label="Permalink to &quot;（5）如何防范 CSRF&quot;">​</a></h3><p><code>CSRF</code> 漏洞产生的原因主要是<strong>对用户请求缺少更安全的验证机制</strong>，防范 <code>CSRF</code> 漏洞的主要思路就是加强后台对用户及用户请求的验证，而不能仅限于 <code>cookie</code> 的识别。</p><p>例如，使用 <code>http</code> 请求头中的 <code>Referer</code> 对网站来源进行身份校验，添加基于当前用户身份的 <code>token</code> 验证，在请求数据提交前，使用验证码填写方式验证用户来源，防止未授权的恶意操作。</p><h3 id="_6-referer" tabindex="-1">（6）Referer <a class="header-anchor" href="#_6-referer" aria-label="Permalink to &quot;（6）Referer&quot;">​</a></h3><p><code>HTTP Referer</code> 是请求头的一部分，代表<strong>网页的来源</strong>（上一页的地址），当浏览器向 <code>Web</code> 服务器发送请求的时候，一般会带上 <code>Referer</code> ，告诉服务器此次访问是从哪个页面链接过来的，服务器由此可以获得一些信息用于处理。</p><h1 id="四、🩸-渗透测试" tabindex="-1">四、🩸 渗透测试 <a class="header-anchor" href="#四、🩸-渗透测试" aria-label="Permalink to &quot;四、🩸 渗透测试&quot;">​</a></h1><h2 id="_1、渗透测试的定义" tabindex="-1">1、渗透测试的定义 <a class="header-anchor" href="#_1、渗透测试的定义" aria-label="Permalink to &quot;1、渗透测试的定义&quot;">​</a></h2><p>渗透测试是利用模拟黑客攻击的方式，评估计算机网络系统安全性能的一种方法。这个过程是站在攻击者角度对系统的任何弱点、技术缺陷或漏洞的主动分析，并且有条件地主动利用安全漏洞。</p><h2 id="_2、渗透测试的特点" tabindex="-1">2、渗透测试的特点 <a class="header-anchor" href="#_2、渗透测试的特点" aria-label="Permalink to &quot;2、渗透测试的特点&quot;">​</a></h2><p>渗透测试是一个渐进的并且逐步深入的过程。</p><p>渗透测试是选择不影响业务系统正常运行的攻击方法进行的测试。</p><h2 id="_3、渗透测试流程主要步骤" tabindex="-1">3、渗透测试流程主要步骤 <a class="header-anchor" href="#_3、渗透测试流程主要步骤" aria-label="Permalink to &quot;3、渗透测试流程主要步骤&quot;">​</a></h2><p><strong>渗透测试的主要步骤如下图所示：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270909566.png" alt="渗透测试的主要步骤"></p><h2 id="_4、渗透测试流程" tabindex="-1">4、渗透测试流程 <a class="header-anchor" href="#_4、渗透测试流程" aria-label="Permalink to &quot;4、渗透测试流程&quot;">​</a></h2><h3 id="_1-明确目标" tabindex="-1">（1）明确目标 <a class="header-anchor" href="#_1-明确目标" aria-label="Permalink to &quot;（1）明确目标&quot;">​</a></h3><ul><li>确定<strong>测试需求</strong>。</li><li>确定客户要求渗透测试的<strong>范围</strong>。</li><li>确定渗透测试<strong>规则</strong>。</li></ul><h3 id="_2-收集信息" tabindex="-1">（2）收集信息 <a class="header-anchor" href="#_2-收集信息" aria-label="Permalink to &quot;（2）收集信息&quot;">​</a></h3><p>在信息收集阶段要尽量<strong>收集关于项目软件的各种信息</strong>，例如，对于一个 <code>Web</code> 应用程序，要收集<strong>脚本类型</strong>、<strong>服务器类型</strong>、<strong>数据库类型</strong>以及<strong>项目所用到的框架</strong>、<strong>开源软件</strong>等。<strong>信息收集</strong>对于渗透测试来说非常重要，只有掌握目标程序足够多的信息，才能更好地进行漏洞检测。</p><p><strong>信息收集的方式可分为两种：</strong></p><p><strong>主动收集：</strong> 通过直接访问、扫描网站等方式收集想要的信息，这种方式可以收集的信息比较多，但是访问者的操作行为会被<strong>目标主机</strong>记录。</p><p><strong>被动收集：</strong> 利用<strong>第三方服务</strong>对目标进行了解，如上网搜索相关信息。这种方式获取的信息相对较少且不够直接，但目标主机不会发现测试人员的行为。</p><h3 id="_3-扫描漏洞" tabindex="-1">（3）扫描漏洞 <a class="header-anchor" href="#_3-扫描漏洞" aria-label="Permalink to &quot;（3）扫描漏洞&quot;">​</a></h3><p>在这一阶段，综合分析<strong>收集到的信息</strong>，借助扫描工具对<strong>目标程序</strong>进行扫描，查找存在的<strong>安全漏洞</strong>。</p><h3 id="_4-验证漏洞" tabindex="-1">（4）验证漏洞 <a class="header-anchor" href="#_4-验证漏洞" aria-label="Permalink to &quot;（4）验证漏洞&quot;">​</a></h3><p>在<strong>扫描漏洞阶段</strong>，测试人员会得到很多关于目标程序的安全漏洞，但这些漏洞有误报，需要测试人员结合实际情况，搭建<strong>模拟测试环境</strong>对这些安全漏洞进行验证。被确认的安全漏洞才能被利用执行攻击。</p><h3 id="_5-分析信息" tabindex="-1">（5）分析信息 <a class="header-anchor" href="#_5-分析信息" aria-label="Permalink to &quot;（5）分析信息&quot;">​</a></h3><p>经过验证的安全漏洞就可以被利用起来向<strong>目标程序</strong>发起攻击，但是<strong>不同的安全漏洞，攻击机制并不相同</strong>，针对不同的安全漏洞需要进一步分析，包括<strong>安全漏洞原理</strong>、<strong>可利用的工具</strong>、<strong>目标程序检测机制</strong>、<strong>攻击是否可以绕过防火墙</strong>等，制定一个<strong>详细精密的攻击计划</strong>，这样才能保证测试顺利执行。</p><h3 id="_6-渗透攻击" tabindex="-1">（6）渗透攻击 <a class="header-anchor" href="#_6-渗透攻击" aria-label="Permalink to &quot;（6）渗透攻击&quot;">​</a></h3><p>渗透攻击就是对<strong>目标程序</strong>发起真正的攻击，达到测试目的，如获取用户帐号密码、截取目标程序传输的数据、控制目标主机等。一般<strong>渗透测试是一次性测试</strong>，攻击完成之后要<strong>执行清理工作</strong>，<u>删除系统日志</u>、<u>程序日志</u>等，擦除进入系统的痕迹。</p><h3 id="_7-整理信息" tabindex="-1">（7）整理信息 <a class="header-anchor" href="#_7-整理信息" aria-label="Permalink to &quot;（7）整理信息&quot;">​</a></h3><p>渗透攻击完成之后，整理攻击所获得的信息，为后面<strong>编写测试报告</strong>提供依据。</p><h3 id="_8-编写测试报告" tabindex="-1">（8）编写测试报告 <a class="header-anchor" href="#_8-编写测试报告" aria-label="Permalink to &quot;（8）编写测试报告&quot;">​</a></h3><p>测试完成之后要<strong>编写测试报告</strong>，阐述项目安全测试目标、信息收集方式、漏洞扫描工具以及漏洞情况、攻击计划、实际攻击结果、测试过程中遇到的问题等，此外，还要<strong>对目标程序存在的漏洞进行分析</strong>，提供安全有效的解决办法。</p><h1 id="五、🛠️-常见安全测试工具" tabindex="-1">五、🛠️ 常见安全测试工具 <a class="header-anchor" href="#五、🛠️-常见安全测试工具" aria-label="Permalink to &quot;五、🛠️ 常见安全测试工具&quot;">​</a></h1><h2 id="_1、web-漏洞扫描工具-appscan" tabindex="-1">1、Web 漏洞扫描工具-AppScan <a class="header-anchor" href="#_1、web-漏洞扫描工具-appscan" aria-label="Permalink to &quot;1、Web 漏洞扫描工具-AppScan&quot;">​</a></h2><h3 id="_1-定义-2" tabindex="-1">（1）定义 <a class="header-anchor" href="#_1-定义-2" aria-label="Permalink to &quot;（1）定义&quot;">​</a></h3><p><code>AppScan</code> 是 <code>IBM</code> 公司出的一款 <code>Web</code> 应用安全测试工具，它采用黑盒测试方式，可以扫描常见的 <code>web</code> 应用安全漏洞。</p><h3 id="_2-appscan-的扫描过程" tabindex="-1">（2）AppScan 的扫描过程 <a class="header-anchor" href="#_2-appscan-的扫描过程" aria-label="Permalink to &quot;（2）AppScan 的扫描过程&quot;">​</a></h3><p><code>AppScan</code> 的扫描过程为：<strong>探测、测试、扫描</strong>。</p><p><strong>在探测阶段，</strong> <code>AppScan</code> 通过发送请求对站内的链接、表单等进行访问，根据响应信息检测目标程序可能存在的安全隐患，从而确定安全漏洞范围。</p><p><strong>在测试阶段，</strong> <code>AppScan</code> 对潜在的安全漏洞发起攻击。 <code>AppScan</code> 有一个内置的测试策略库，测试策略库可以针对相应的安全隐患检测规则生成对应的测试输入， <code>AppScan</code> 就使用生成的测试输入对安全漏洞发起攻击。</p><p><strong>在扫描阶段，</strong> <code>AppScan</code> 会检测目标程序对攻击的响应结果，并根据结果来确定探测到的安全漏洞是否是一个真正的安全漏洞，如果是一个真正的安全漏洞则根据其危险程度确定危险级别，为开发人员修复缺陷提供依据。</p><h2 id="_2、端口扫描工具-nmap" tabindex="-1">2、端口扫描工具-Nmap <a class="header-anchor" href="#_2、端口扫描工具-nmap" aria-label="Permalink to &quot;2、端口扫描工具-Nmap&quot;">​</a></h2><h3 id="_1-定义-3" tabindex="-1">（1）定义 <a class="header-anchor" href="#_1-定义-3" aria-label="Permalink to &quot;（1）定义&quot;">​</a></h3><p><code>Nmap</code> 是一个<strong>网络连接端口扫描工具</strong>，用来扫描网上计算机开放的网络连接端口。确定服务运行的端口，并且推断计算机运行的操作系统。它是网络管理员用以评估网络系统安全必备工具之一。</p><h3 id="_2-nmap-的具体功能" tabindex="-1">（2）Nmap 的具体功能 <a class="header-anchor" href="#_2-nmap-的具体功能" aria-label="Permalink to &quot;（2）Nmap 的具体功能&quot;">​</a></h3><p><strong>Nmap 具体功能如下：</strong></p><ul><li>主机扫描</li><li>端口状态扫描</li><li>应用程序版本探测</li><li>操作系统探测</li><li>防火墙/IDS 逃避和欺骗</li><li>支持测试对象交互脚本</li></ul><h2 id="_3、抓包工具-fiddler" tabindex="-1">3、抓包工具-Fiddler <a class="header-anchor" href="#_3、抓包工具-fiddler" aria-label="Permalink to &quot;3、抓包工具-Fiddler&quot;">​</a></h2><h3 id="_1-定义-4" tabindex="-1">（1）定义 <a class="header-anchor" href="#_1-定义-4" aria-label="Permalink to &quot;（1）定义&quot;">​</a></h3><p><code>Fiddler</code> 是一个 <code>http</code> 协议调试代理工具，它以代理 <code>Web</code> 服务器形式工作，帮助用户记录计算机和 <code>Internet</code> 之间传递的所有 <code>HTTP(HTTPS)</code> 流量。</p><p><strong>如图所示：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270910880.png" alt="抓包工具"></p><h3 id="_2-fiddler-的功能" tabindex="-1">（2）Fiddler 的功能 <a class="header-anchor" href="#_2-fiddler-的功能" aria-label="Permalink to &quot;（2）Fiddler 的功能&quot;">​</a></h3><p><code>Fiddler</code> 可以<strong>捕获来自本地运行程序的所有流量</strong>，从而记录服务器到服务器、设备到服务器之间的流量。此外， <code>Fiddler</code> 还支持各种<strong>过滤器</strong>，过滤出用户想要的<strong>流量数据</strong>，节省大量时间和精力。 相比于其他抓包工具， <code>Fiddler</code> 小巧易用，且功能完善，它支持将捕获的流量数据存档，以供后续分析使用。</p><h2 id="_4、web-渗透测试工具-metasploit" tabindex="-1">4、Web 渗透测试工具-Metasploit <a class="header-anchor" href="#_4、web-渗透测试工具-metasploit" aria-label="Permalink to &quot;4、Web 渗透测试工具-Metasploit&quot;">​</a></h2><h3 id="_1-定义-5" tabindex="-1">（1）定义 <a class="header-anchor" href="#_1-定义-5" aria-label="Permalink to &quot;（1）定义&quot;">​</a></h3><p><code>Metasploit</code> 是一个<strong>渗透测试平台</strong>，能够查找、验证漏洞，并利用漏洞进行渗透攻击。它是一个<strong>开源项目</strong>，提供基础架构、内容和工具来执行渗透测试和广泛的安全审计。</p><h3 id="_2-metasploit-的具体功能" tabindex="-1">（2）Metasploit 的具体功能 <a class="header-anchor" href="#_2-metasploit-的具体功能" aria-label="Permalink to &quot;（2）Metasploit 的具体功能&quot;">​</a></h3><p>对于渗透攻击， <code>Metasploit</code> 主要提供了<strong>以下功能模块：</strong></p><p><strong>渗透模块（exploit）：</strong> 运行时会<strong>利用目标的安全漏洞</strong>进行攻击。</p><p><strong>攻击载荷模块（payload）：</strong> 在成功对目标完成一次渗透之后，测试程序开始在目标计算机上运行。它能帮助用户在目标系统上获得需要的访问和行动权限。</p><p><strong>辅助模块（auxiliary）：</strong> 包含了一系列的<strong>辅助支持模块</strong>，包括<strong>扫描模块</strong>、<strong>漏洞发掘模块</strong>、<strong>网络协议欺骗模块</strong>。</p><p><strong>编码器模块（encoder）：</strong> 编码器模块通常用来对我们的攻击模块进行代码混淆，逃过目标安全保护机制的检测，如杀毒软件和防火墙等。</p><p><strong>Meterpreter：</strong> 使用<strong>内存技术</strong>的攻击载荷，可以注入到进程之中。它提供了各种可以在目标上执行的功能。</p><h3 id="_3-metasploit-的作用" tabindex="-1">（3）Metasploit 的作用 <a class="header-anchor" href="#_3-metasploit-的作用" aria-label="Permalink to &quot;（3）Metasploit 的作用&quot;">​</a></h3><p><code>Metasploit</code> 是一个<strong>多用户协作工具</strong>，团队成员可以共享主机数据，查看收集的证据以及创建主机备注以共享有关特定目标的知识。最终， <code>Metasploit</code> 可帮助用户确定利用目标的最薄弱点，并证明存在漏洞或安全问题。</p><h1 id="六、🔚-结束语" tabindex="-1">六、🔚 结束语 <a class="header-anchor" href="#六、🔚-结束语" aria-label="Permalink to &quot;六、🔚 结束语&quot;">​</a></h1><p>对于软件测试来说，除了黑白盒测试、性能测试以外，安全测试也尤为重要。一旦网页有漏洞，攻击者很容易就让受攻击者执行非本意的操作，这种场面并不是谁都想看到的。因此，对于软件来说，要做好安全测试 🙋</p><p>关于安全测试的内容就讲到这里啦！如有不理解或文章有误，欢迎评论区留言或私信我交流！</p><p>同时，有需要了解软件测试相关的其他内容，可到『<a href="https://blog.csdn.net/weixin_44803753/category_10923158.html" target="_blank" rel="noreferrer">软件测试</a>』栏目进行查看学习~</p>`,155),t=[n];function r(p,c,i,d,h,g){return a(),e("div",null,t)}const y=s(o,[["render",r]]);export{_ as __pageData,y as default};
