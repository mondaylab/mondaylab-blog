import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.98c15f2e.js";const u=JSON.parse('{"title":"工程化基础概念","description":"","frontmatter":{"title":"工程化基础概念","author":"周一","date":"2023-07-22","categories":["服务端开发"],"tags":["Node.js"],"sidebar":"auto"},"headers":[{"level":1,"title":"一、什么是前端工程化？","slug":"一、什么是前端工程化","link":"#一、什么是前端工程化","children":[]},{"level":1,"title":"二、关于Babel","slug":"二、关于babel","link":"#二、关于babel","children":[{"level":2,"title":"1、babel的作用","slug":"_1、babel的作用","link":"#_1、babel的作用","children":[]},{"level":2,"title":"2、Babel 插件机制","slug":"_2、babel-插件机制","link":"#_2、babel-插件机制","children":[]},{"level":2,"title":"3、使用打包器打包","slug":"_3、使用打包器打包","link":"#_3、使用打包器打包","children":[]}]},{"level":1,"title":"三、关于测试","slug":"三、关于测试","link":"#三、关于测试","children":[{"level":2,"title":"1、测试框架","slug":"_1、测试框架","link":"#_1、测试框架","children":[]},{"level":2,"title":"2、测试配置","slug":"_2、测试配置","link":"#_2、测试配置","children":[]},{"level":2,"title":"3、Jest使用","slug":"_3、jest使用","link":"#_3、jest使用","children":[]}]},{"level":1,"title":"四、持续集成与品质管理","slug":"四、持续集成与品质管理","link":"#四、持续集成与品质管理","children":[{"level":2,"title":"1、持续集成","slug":"_1、持续集成","link":"#_1、持续集成","children":[]},{"level":2,"title":"2、品质管理","slug":"_2、品质管理","link":"#_2、品质管理","children":[]}]}],"relativePath":"column/BackEnd/Node/003_graffitiBoard.md","filePath":"column/BackEnd/Node/003_graffitiBoard.md","lastUpdated":1691107615000}'),e={name:"column/BackEnd/Node/003_graffitiBoard.md"},p=l(`<h1 id="一、什么是前端工程化" tabindex="-1">一、什么是前端工程化？ <a class="header-anchor" href="#一、什么是前端工程化" aria-label="Permalink to &quot;一、什么是前端工程化？&quot;">​</a></h1><p>前端工程本质上是软件工程的一种，关注的是性能、稳定性、可用性、可维护性等方面，注重基本的开发效率、运行效率的同时，思考维护效率。一切以这些为目标的工作都是“前端工程化”。</p><p><strong>工程化是一种思想而不是某种技术。</strong></p><p>如果我们只是用 <code>JS</code> 编写一小段程序，让它跑在我们自己选定的运行时环境，比如某个确定版本的浏览器，或者确定版本的 <code>Node.js</code> 运行时中，可能并不需要前端工程化。但如果我们实现一个比较复杂的 <code>Web</code> 应用，需要让代码跑在不同的环境，以及与多人一同协作，考虑工程化就非常有必要了。</p><p>对于前端工程化来说，通常要解决以下问题：</p><ol><li>模块化和组件化：如何让我们编写的代码能够被其他人、其他应用、其他模块所<strong>复用</strong>（这一部分可以参考《<a href="https://juejin.cn/book/6891929939616989188/section" target="_blank" rel="noreferrer">前端工程师进阶 10 日谈</a>》）。</li><li>兼容性和跨平台性：如何让我们编写的代码在不同的平台、不同的环境中正确运行。</li><li>规范化和标准化：如何保持代码风格的统一、接口设计的标准、模型和范式的规范，以保证项目的可维护性。</li><li>自动化测试和持续集成：如何让我们的代码能够被自动测试，并在发布时通过 <code>CI/CD</code> 验证，以保证代码的稳定性和可靠性。</li><li>处理静态资源：将 <code>HTML</code> 压缩，<code>CSS</code> 和 <code>JS</code> 上传到 <code>CDN</code>，以优化网页访问速度。</li><li>解决安全性问题：防止 <code>CSRF</code> 和 <code>XSS</code> 等。</li></ol><h1 id="二、关于babel" tabindex="-1">二、关于Babel <a class="header-anchor" href="#二、关于babel" aria-label="Permalink to &quot;二、关于Babel&quot;">​</a></h1><h2 id="_1、babel的作用" tabindex="-1">1、babel的作用 <a class="header-anchor" href="#_1、babel的作用" aria-label="Permalink to &quot;1、babel的作用&quot;">​</a></h2><ul><li>可以使用<code>Babel</code>来编译<code>JavaScript</code>代码，以让其能够适配不同版本的运行环境。</li><li>不过呢，只让<code>Babel</code>做这样的工作有些“大材小用”了。<code>Babel</code>真正的强大之处在于它可以实现各种插件，用来解析和转换<code>JavaScript</code>代码。这些插件可以实现很多功能，甚至可以实现新的语法。</li></ul><h2 id="_2、babel-插件机制" tabindex="-1">2、Babel 插件机制 <a class="header-anchor" href="#_2、babel-插件机制" aria-label="Permalink to &quot;2、Babel 插件机制&quot;">​</a></h2><p>首先，我们来简单了解一下 <code>Babel</code> 和它的插件机制。</p><p>Babel 是通用的多功能 JavaScript 编译器，准确的说，它是一个 JavaScript 代码转换器（transpiler）。它的核心功能是接收一段 JavaScript 代码，然后对这段代码进行转换，最后输出转换后的代码。</p><p>这个过程通常分为几个步骤：</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202307290727173.awebp" alt="img"></p><p>首先是<strong>解析</strong>(parse)，在这个步骤里，<code>Babel</code> 接收代码，并将代码解析成抽象语法树（Abstract Syntex Tree）。</p><p>接着是<strong>转换</strong>(transpile)，在这个步骤里，<code>Babel</code> 会对抽象语法树进行遍历（traverse）和替换（replace）。</p><p>最后是<strong>生成</strong>(generate)，根据新的抽象语法树生成编译后的代码。</p><p><code>Babel</code> 的插件机制主要就是在转换阶段对抽象语法树进行遍历和替换的过程。<code>Babel</code>插件的作用就是在这个过程中，对抽象语法树进行修改，从而达到转换的目的。</p><h2 id="_3、使用打包器打包" tabindex="-1">3、使用打包器打包 <a class="header-anchor" href="#_3、使用打包器打包" aria-label="Permalink to &quot;3、使用打包器打包&quot;">​</a></h2><p>前面我们介绍了 <code>Babel</code>，它可以将采用新语言特性或新规范的 <code>JS</code> 文件编译成旧版本的文件，以便这些文件在旧版本浏览器中运行。但是，如果我们的项目很复杂，有多个模块，仅有 <code>Babel</code> 编译还不够，因为旧版本浏览器不支持模块化语法，我们不能很方便地引入多个模块。这时，我们需要使用 <strong>打包器（bundler）</strong> 将多个模块打包成一个文件，以便在旧版本浏览器中运行。</p><p>打包器不仅可以将模块化的项目编译成一个文件，还能够减少浏览器加载 <code>JS</code> 文件的数量，节省 <code>http</code> 请求数量，从而能够提高 <code>Web</code> 应用的性能。</p><p>在 <code>JavaScript</code> 社区，有很多打包器，比如 <code>Webpack</code>、<code>Rollup</code>、<code>Parcel</code>、<code>ESbuild</code>、<code>Vite</code> 等等。这些打包器都有自己的特点，比如 <code>Webpack</code> 支持模块化、打包、压缩、热更新等功能，而 <code>Rollup</code> 只支持模块化和打包，而且打包后的文件体积更小，至于 <code>ESBuild</code>、<code>Vite</code> 等新一代的打包器，则采用性能更高的编程语言（如Golang）编写，打包速度更快。</p><h1 id="三、关于测试" tabindex="-1">三、关于测试 <a class="header-anchor" href="#三、关于测试" aria-label="Permalink to &quot;三、关于测试&quot;">​</a></h1><h2 id="_1、测试框架" tabindex="-1">1、测试框架 <a class="header-anchor" href="#_1、测试框架" aria-label="Permalink to &quot;1、测试框架&quot;">​</a></h2><p>可以选择的 <code>JavaScript</code> 单元测试框架非常多，比较有名的有 <code>Mocha</code>、<code>Jasmine</code>、<code>AVA</code>、<code>Jest</code> 等等。在这里，选择 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fjestjs.io%2F" target="_blank" rel="noreferrer">Jest</a> 作为我们的单元测试框架。</p><p>Jest 框架的特点有：</p><ul><li>由 Facebook 开发和维护</li><li>开箱即用配置少，API 简单</li><li>支持断言（Assertion）和仿真（Mock）</li><li>支持快照（Snap）测试</li><li>基于 Istanbul 的测试覆盖度报告</li><li>智能并行测试，执行速度快</li></ul><h2 id="_2、测试配置" tabindex="-1">2、测试配置 <a class="header-anchor" href="#_2、测试配置" aria-label="Permalink to &quot;2、测试配置&quot;">​</a></h2><ul><li>如果想要让最新的<code>Jest</code> 原生支持<code>ESM</code>的特性，那么需要安装<code>crooss-env</code>。</li><li>同时，需要在<code>.eslintrc.js</code>中添加<code>env</code>配置项<code>jest: true</code>，这样，<code>eslint</code>就可以识别<code>jest</code>框架定义的方法了。</li><li>也可以使用<code>Jest</code>检查测试覆盖率，对于测试覆盖度来说，它是评判一个库代码可靠性和质量的一个重要衡量标准，一般来说，<strong>测试覆盖度越高，库的可靠性和质量越高</strong>。</li><li>要用 <code>Jest</code> 检查测试覆盖率也非常简单，我们只需在<code>package.json</code>文件中添加一个脚本命令<code>test:coverage</code>：</li></ul><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">...省略...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;test&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cross-env NODE_OPTIONS=--experimental-vm-modules jest&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;test:coverage&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cross-env NODE_OPTIONS=--experimental-vm-modules jest --coverage&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">...省略...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;test&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cross-env NODE_OPTIONS=--experimental-vm-modules jest&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;test:coverage&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cross-env NODE_OPTIONS=--experimental-vm-modules jest --coverage&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_3、jest使用" tabindex="-1">3、Jest使用 <a class="header-anchor" href="#_3、jest使用" aria-label="Permalink to &quot;3、Jest使用&quot;">​</a></h2><ul><li><p><code>Jest</code> 框架以 <code>test</code> 方法定义测试用例，它的第一个参数是<strong>用例名</strong>，第二个参数是一个<strong>回调函数</strong>，表示一个测试用例。框架会自动执行这个测试用例中的代码。</p></li><li><p><code>Jest</code> 支持语义化的断言，可以用<strong>非常语义化的方式</strong>书写测试规则，比如代码<code>expect(m1).toBe(m2)</code> ，它的含义是期望 <code>m1</code> 等于 <code>m2</code>。这里 Jest 会深度比较两个对象的每个属性，所以相当于 <code>deepEquals</code>。关于 Jest 支持的各种断言，可以查看<a href="https://jestjs.io/docs/expect" target="_blank" rel="noreferrer">官方文档</a>。</p></li><li><p><code>Jest</code> 框架中，<code>test</code> 的回调函数不仅可以支持普通函数，也可以支持<strong>异步函数</strong>。所以，如果要测试异步方法，可以如下面代码这么用（async/await），非常方便。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;some case&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> foo.</span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(result).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;something&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;some case&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> foo.</span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(result).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;something&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>运行测试命令行：<code>npm test</code>，默认执行项目目录下所有 <code>*.test.js</code> 文件</p></li></ul><h1 id="四、持续集成与品质管理" tabindex="-1">四、持续集成与品质管理 <a class="header-anchor" href="#四、持续集成与品质管理" aria-label="Permalink to &quot;四、持续集成与品质管理&quot;">​</a></h1><h2 id="_1、持续集成" tabindex="-1">1、持续集成 <a class="header-anchor" href="#_1、持续集成" aria-label="Permalink to &quot;1、持续集成&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 工作流名称</span></span>
<span class="line"><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">CI</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># on：触发条件，这里我们设置的是当代码提交到 master 分支时触发</span></span>
<span class="line"><span style="color:#79B8FF;">on</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">push</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">branches</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">master</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># jobs：工作流中的任务，这里我们只有一个任务，就是运行单元测试。</span></span>
<span class="line"><span style="color:#85E89D;">jobs</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">run-tests</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">runs-on</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ubuntu-latest</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 指定执行环境，指定ubuntu-latest，是github提供的虚拟环境。我们也可以使用macos-latest或者windows-latest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">strategy</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;"># strategy指定了任务的执行策略，这里我们指定 node 的版本为 16</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">matrix</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">node-version</span><span style="color:#E1E4E8;">: [</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># steps指定了任务的执行步骤，这里我们有四个步骤：</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># actions/checkout@v3：这是一个 GitHub Action，用于将代码 checkout 到虚拟机中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># actions/setup-node@v3：这是一个 GitHub Action，用于安装指定版本的 node</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;"># Install dependencies：安装依赖</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;"># test 运行单元测试</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">steps</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">uses</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">actions/checkout@v3</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">uses</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">actions/setup-node@v3</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">with</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">node-version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\${{ matrix.node-version }}</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">registry-url</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">https://registry.npmjs.org</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Install dependencies 📦️</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">run</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">npm install</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;"># 为了让Code Climate可以从git action获取信息</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Code Climate Coverage Action</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># CC_TEST_REPORTER_ID 是  code climate的一个token</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">uses</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">paambaati/codeclimate-action@v3.2.0</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">env</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">CC_TEST_REPORTER_ID</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">0cad7f41ea82b1b3ae2b1d64cc05c040ed59a17c16ca0a125ff711031b5905be</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">with</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">coverageCommand</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">npm run test:coverage</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">debug</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 工作流名称</span></span>
<span class="line"><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">CI</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># on：触发条件，这里我们设置的是当代码提交到 master 分支时触发</span></span>
<span class="line"><span style="color:#005CC5;">on</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">push</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">branches</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">master</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># jobs：工作流中的任务，这里我们只有一个任务，就是运行单元测试。</span></span>
<span class="line"><span style="color:#22863A;">jobs</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">run-tests</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">runs-on</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ubuntu-latest</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 指定执行环境，指定ubuntu-latest，是github提供的虚拟环境。我们也可以使用macos-latest或者windows-latest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">strategy</span><span style="color:#24292E;">: </span><span style="color:#6A737D;"># strategy指定了任务的执行策略，这里我们指定 node 的版本为 16</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">matrix</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">node-version</span><span style="color:#24292E;">: [</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># steps指定了任务的执行步骤，这里我们有四个步骤：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># actions/checkout@v3：这是一个 GitHub Action，用于将代码 checkout 到虚拟机中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># actions/setup-node@v3：这是一个 GitHub Action，用于安装指定版本的 node</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;"># Install dependencies：安装依赖</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;"># test 运行单元测试</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">steps</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">uses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">actions/checkout@v3</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">uses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">actions/setup-node@v3</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">with</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">node-version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${{ matrix.node-version }}</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">registry-url</span><span style="color:#24292E;">: </span><span style="color:#032F62;">https://registry.npmjs.org</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Install dependencies 📦️</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">run</span><span style="color:#24292E;">: </span><span style="color:#032F62;">npm install</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;"># 为了让Code Climate可以从git action获取信息</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Code Climate Coverage Action</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># CC_TEST_REPORTER_ID 是  code climate的一个token</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">uses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">paambaati/codeclimate-action@v3.2.0</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">env</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">CC_TEST_REPORTER_ID</span><span style="color:#24292E;">: </span><span style="color:#032F62;">0cad7f41ea82b1b3ae2b1d64cc05c040ed59a17c16ca0a125ff711031b5905be</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">with</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">coverageCommand</span><span style="color:#24292E;">: </span><span style="color:#032F62;">npm run test:coverage</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">debug</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="_2、品质管理" tabindex="-1">2、品质管理 <a class="header-anchor" href="#_2、品质管理" aria-label="Permalink to &quot;2、品质管理&quot;">​</a></h2><p>帮助我们管理代码质量的工具：<code>SonarCode</code>、<code>Code Climate</code>等。这些工具可以帮助我们分析代码的质量，包括代码的复杂度、测试覆盖率、代码的重复率等。我们可以根据这些指标来判断代码的质量，从而决定是否需要对代码进行重构。</p><p>代码测试覆盖率默认并不能在 <code>Code Climate</code> 中给出，因为 <code>Code Climate</code> 不会自动分析测试代码，而是从 <code>GitHub Actions</code> 中获取信息.因此，我们需要将 <code>Code Climate</code> 和 <code>GitHub Actions</code> 进行集成，这样才能在 <code>Code Climate</code> 中看到测试覆盖率的指标。</p>`,38),o=[p];function c(t,r,i,E,y,d){return n(),a("div",null,o)}const m=s(e,[["render",c]]);export{u as __pageData,m as default};
