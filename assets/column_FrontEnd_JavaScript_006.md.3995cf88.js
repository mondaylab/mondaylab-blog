import{_ as s,c as n,o as a,N as l}from"./chunks/framework.6510d215.js";const d=JSON.parse('{"title":"跨越跨域大山，前端不得不知道的Ajax","description":"","frontmatter":{"title":"跨越跨域大山，前端不得不知道的Ajax","author":"周一","date":"2021-06-11","categories":["前端开发"],"tags":["JavaScript"],"sidebar":"auto"},"headers":[{"level":1,"title":"引言","slug":"引言","link":"#引言","children":[]},{"level":1,"title":"正文","slug":"正文","link":"#正文","children":[]},{"level":1,"title":"一、AJAX 请求","slug":"一、ajax-请求","link":"#一、ajax-请求","children":[{"level":2,"title":"1、模拟 get 和 post 请求","slug":"_1、模拟-get-和-post-请求","link":"#_1、模拟-get-和-post-请求","children":[]},{"level":2,"title":"2、封装一个简易的 AJAX","slug":"_2、封装一个简易的-ajax","link":"#_2、封装一个简易的-ajax","children":[]}]},{"level":1,"title":"二、状态码","slug":"二、状态码","link":"#二、状态码","children":[{"level":2,"title":"1、xhr.readyState","slug":"_1、xhr-readystate","link":"#_1、xhr-readystate","children":[]},{"level":2,"title":"2、xhr.status","slug":"_2、xhr-status","link":"#_2、xhr-status","children":[]}]},{"level":1,"title":"三、跨域","slug":"三、跨域","link":"#三、跨域","children":[{"level":2,"title":"1、同源策略","slug":"_1、同源策略","link":"#_1、同源策略","children":[{"level":3,"title":"（1）同源策略是什么","slug":"_1-同源策略是什么","link":"#_1-同源策略是什么","children":[]},{"level":3,"title":"（2）为什么浏览器会有同源策略？","slug":"_2-为什么浏览器会有同源策略","link":"#_2-为什么浏览器会有同源策略","children":[]},{"level":3,"title":"（3）同源策略限制内容有哪些？","slug":"_3-同源策略限制内容有哪些","link":"#_3-同源策略限制内容有哪些","children":[]},{"level":3,"title":"（4）加载图片、js 和 css 时可以无视同源策略","slug":"_4-加载图片、js-和-css-时可以无视同源策略","link":"#_4-加载图片、js-和-css-时可以无视同源策略","children":[]}]},{"level":2,"title":"2、跨域解决方案","slug":"_2、跨域解决方案","link":"#_2、跨域解决方案","children":[{"level":3,"title":"（1）跨域是什么","slug":"_1-跨域是什么","link":"#_1-跨域是什么","children":[]},{"level":3,"title":"（2）解决跨域的方式","slug":"_2-解决跨域的方式","link":"#_2-解决跨域的方式","children":[{"level":4,"title":"1）JSONP（客户端操作）","slug":"_1-jsonp-客户端操作","link":"#_1-jsonp-客户端操作","children":[]},{"level":4,"title":"2）CORS（服务器操作）","slug":"_2-cors-服务器操作","link":"#_2-cors-服务器操作","children":[]}]}]}]},{"level":1,"title":"结束语","slug":"结束语","link":"#结束语","children":[]}],"relativePath":"column/FrontEnd/JavaScript/006.md","lastUpdated":1685151998000}'),p={name:"column/FrontEnd/JavaScript/006.md"},e=l(`<h1 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h1><p>ajax 对于前端来说是一个特别基础也特别实用的一个功能，基本上我们目前访问的很多网页都有用到 <code>ajax</code> 的功能。接下来开始讲解关于 AJAX 请求，以及关于跨域的一些内容。</p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h1><h1 id="一、ajax-请求" tabindex="-1">一、AJAX 请求 <a class="header-anchor" href="#一、ajax-请求" aria-label="Permalink to &quot;一、AJAX 请求&quot;">​</a></h1><p><code>Ajax</code> ，即 <code>Asynchronous Javascript And XML</code>（异步 JavaScript 和 XML）。</p><p>在实现 <code>Ajax</code> 之前，我们先来了解下 <code>XMLHttpRequest</code> 。 <code>XMLHttpRequest</code> 是网页实现 <code>AJAX</code> 最主要的一个 <code>API</code> 。可能有很多同学知道 <code>AJAX</code> ，也用过 <code>AJAX</code> ，但是却不知道它是基于 <code>XMLHttpRequest</code> 来实现的。</p><p>那么接下来我们用 <code>XMLHttpRequest</code> 这个 <code>API</code> 来模拟一个 <code>get</code> 和 <code>post</code> 请求。</p><h2 id="_1、模拟-get-和-post-请求" tabindex="-1">1、模拟 get 和 post 请求 <a class="header-anchor" href="#_1、模拟-get-和-post-请求" aria-label="Permalink to &quot;1、模拟 get 和 post 请求&quot;">​</a></h2><p><strong>（1）模拟 get 请求：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 使用xhr模拟实现GET请求</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> xhr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">XMLHttpRequest</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/test.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//false表示同步请求，true表示异步请求</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onreadystatechange</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 这里的函数异步执行</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readyState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// console.log(</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">//     JSON.parse(xhr.responseText)</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// );</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">responseText</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 因为是get请求，所以只要发送null就好</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><strong>（2）模拟 post 请求：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 使用xhr模拟实现post请求</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> xhr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">XMLHttpRequest</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//模拟请求一个登录接口</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/login</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//false表示同步请求，true表示异步请求</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onreadystatechange</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readyState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">responseText</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">responseText</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">其他情况</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> postData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">userName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">zhangsan</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">password</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(postData))</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="_2、封装一个简易的-ajax" tabindex="-1">2、封装一个简易的 AJAX <a class="header-anchor" href="#_2、封装一个简易的-ajax" aria-label="Permalink to &quot;2、封装一个简易的 AJAX&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ajax</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">url</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xhr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">XMLHttpRequest</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onreadystatechange</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">//状态码的解析详细看第二点</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readyState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">responseText</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">404</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">404 not found</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> url </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">你的json数据路径</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">ajax</span><span style="color:#A6ACCD;">(url)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(res))</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error</span><span style="color:#A6ACCD;">(err))</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h1 id="二、状态码" tabindex="-1">二、状态码 <a class="header-anchor" href="#二、状态码" aria-label="Permalink to &quot;二、状态码&quot;">​</a></h1><p>看完上面的模拟过程之后，我们来讲解其中的几个知识点。</p><h2 id="_1、xhr-readystate" tabindex="-1">1、xhr.readyState <a class="header-anchor" href="#_1、xhr-readystate" aria-label="Permalink to &quot;1、xhr.readyState&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">readyState 状态值</th><th style="text-align:center;">readyState 含义</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;">（未初始化）- 还没有调用 send()方法</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;">（载入）- 已调用 send()方法，正坐在发送请求</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">（载入完成）- send()方法执行完成，已经接收到全部响应内容</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">（交互）- 正在解析响应内容</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">（完成）响应内容解析完成，可以在客户端调用</td></tr></tbody></table><h2 id="_2、xhr-status" tabindex="-1">2、xhr.status <a class="header-anchor" href="#_2、xhr-status" aria-label="Permalink to &quot;2、xhr.status&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">status 状态值</th><th style="text-align:center;">status 含义</th></tr></thead><tbody><tr><td style="text-align:center;">2xx</td><td style="text-align:center;">表示成功处理请求，如 200</td></tr><tr><td style="text-align:center;">3xx</td><td style="text-align:center;">需要重定向，浏览器直接跳转，如 301 302 304</td></tr><tr><td style="text-align:center;">4xx</td><td style="text-align:center;">客户端请求错误，如 404 403</td></tr><tr><td style="text-align:center;">5xx</td><td style="text-align:center;">服务器端错误</td></tr></tbody></table><h1 id="三、跨域" tabindex="-1">三、跨域 <a class="header-anchor" href="#三、跨域" aria-label="Permalink to &quot;三、跨域&quot;">​</a></h1><h2 id="_1、同源策略" tabindex="-1">1、同源策略 <a class="header-anchor" href="#_1、同源策略" aria-label="Permalink to &quot;1、同源策略&quot;">​</a></h2><h3 id="_1-同源策略是什么" tabindex="-1">（1）同源策略是什么 <a class="header-anchor" href="#_1-同源策略是什么" aria-label="Permalink to &quot;（1）同源策略是什么&quot;">​</a></h3><p>同源策略是浏览器自带的一种<strong>安全策略</strong>，它是指网址中的<strong>协议</strong>、<strong>域名</strong>、<strong>端口</strong>三个都相同时才能互相访问，即若协议、域名、端口有一个不相同时，浏览器禁止页面加载或执行与自身不同域的脚本。</p><h3 id="_2-为什么浏览器会有同源策略" tabindex="-1">（2）为什么浏览器会有同源策略？ <a class="header-anchor" href="#_2-为什么浏览器会有同源策略" aria-label="Permalink to &quot;（2）为什么浏览器会有同源策略？&quot;">​</a></h3><p>因为如果没有同源策略，别人就可以轻松的获取我们网站的 <code>cookie</code> 信息，或是对网页进行 <code>DOM</code> 操作；</p><p>这是一件非常恐怖的事情，尤其是 <code>cookie</code> 信息，它里面存在着 <code>sessionID</code> ，这是与服务端的 <code>session</code> 会话的重要凭证，如果被别人得到了 <code>cookie</code> ，有很大可能会造成<strong>数据被盗取</strong>等后果。</p><h3 id="_3-同源策略限制内容有哪些" tabindex="-1">（3）同源策略限制内容有哪些？ <a class="header-anchor" href="#_3-同源策略限制内容有哪些" aria-label="Permalink to &quot;（3）同源策略限制内容有哪些？&quot;">​</a></h3><ul><li>存储在浏览器中的数据，如 <code>localStroage</code> 、 <code>Cookie</code> 和 <code>IndexedDB</code> 不能通过脚本跨域访问；</li><li>不能通过脚本操作不同域下的 <code>DOM</code> ；</li><li>不能通过 <code>ajax</code> 请求不同域的数据。</li></ul><h3 id="_4-加载图片、js-和-css-时可以无视同源策略" tabindex="-1">（4）加载图片、js 和 css 时可以无视同源策略 <a class="header-anchor" href="#_4-加载图片、js-和-css-时可以无视同源策略" aria-label="Permalink to &quot;（4）加载图片、js 和 css 时可以无视同源策略&quot;">​</a></h3><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">跨域的图片地址</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">跨域的css地址</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">跨域的js地址</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如以上代码所示，当我们在加载以上类型的 <code>图片、css和js</code> 时，可以无视同源策略。因为像 <code>图片、css文件和js文件</code> 一般可使用 <code>cdn</code> 来进行缓存，而 <code>cdn</code> 一般是外域。同时， <code>js</code> 文件也可以通过 <code>JSONP</code> 来实现跨域。</p><h2 id="_2、跨域解决方案" tabindex="-1">2、跨域解决方案 <a class="header-anchor" href="#_2、跨域解决方案" aria-label="Permalink to &quot;2、跨域解决方案&quot;">​</a></h2><h3 id="_1-跨域是什么" tabindex="-1">（1）跨域是什么 <a class="header-anchor" href="#_1-跨域是什么" aria-label="Permalink to &quot;（1）跨域是什么&quot;">​</a></h3><ul><li>所有的跨域，都必须经过 <code>server</code> 端允许和配合；</li><li>未经 <code>server</code> 端允许就实现跨域，说明浏览器有漏洞，是一种危险信号。</li></ul><h3 id="_2-解决跨域的方式" tabindex="-1">（2）解决跨域的方式 <a class="header-anchor" href="#_2-解决跨域的方式" aria-label="Permalink to &quot;（2）解决跨域的方式&quot;">​</a></h3><h4 id="_1-jsonp-客户端操作" tabindex="-1">1）JSONP（客户端操作） <a class="header-anchor" href="#_1-jsonp-客户端操作" aria-label="Permalink to &quot;1）JSONP（客户端操作）&quot;">​</a></h4><p><strong>① JSONP 的原理</strong></p><p><code>JSONP</code>(JSON with Padding)是数据格式 <code>JSON</code> 的一种“<strong>使用模式</strong>”，可以让网页从别的网域要数据。</p><p>根据 <code>XmlHttpRequest</code> 对象受到同源策略的影响，而利用 <code>&lt;script&gt;</code> 元素的这个开放策略，网页可以得到从其他来源动态产生的 <code>JSON</code> 数据，而这种使用模式就是所谓的 <code>JSONP</code> 。</p><p>用 <code>JSONP</code> 抓到的数据并不是 <code>JSON</code> ，而是任意的 <code>JavaScript</code> ，用 <code>JavaScript</code> 解释器运行而不是用 <code>JSON</code> 解析器解析。</p><p>所以，通过 <code>Chrome</code> 查看所有 <code>JSONP</code> 发送的 <code>Get</code> 请求都是 <code>js</code> 类型，而非 <code>XHR</code> 。</p><p><strong>② JSONP 包含两部分：回调函数和数据</strong></p><p><strong>回调函数</strong>是当响应到来时要放在当前页面被调用的函数。</p><p><strong>数据</strong>就是传入回调函数中的 <code>json</code> 数据，也就是回调函数的参数了。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handleResponse</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">The responsed data is: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> script </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://www.baidu.com/json/?callback=handleResponse</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insertBefore</span><span style="color:#A6ACCD;">(script</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">firstChild)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*handleResonse({&quot;data&quot;: &quot;zhe&quot;})*/</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//原理如下：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//当我们通过script标签请求时</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//后台就会根据相应的参数(json,handleResponse)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//来生成相应的json数据(handleResponse({&quot;data&quot;: &quot;zhe&quot;}))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//最后这个返回的json数据(代码)就会被放在当前js文件中被执行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//至此跨域通信完成</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>③ 缺点：</strong></p><ul><li>只能使用<strong>Get 请求</strong>。</li><li>不能注册<strong>success</strong>、<strong>error</strong>等事件监听函数，不能很容易的确定 <code>JSONP</code> 请求是否失败。</li><li><code>JSONP</code> 是从其他域中加载代码执行，<strong>容易受到跨站请求伪造的攻击</strong>，其安全性无法确保。</li></ul><h4 id="_2-cors-服务器操作" tabindex="-1">2）CORS（服务器操作） <a class="header-anchor" href="#_2-cors-服务器操作" aria-label="Permalink to &quot;2）CORS（服务器操作）&quot;">​</a></h4><p><strong>① cors 的原理</strong></p><p><code>CORS</code> (Cross-Origin Resource Sharing)，即跨域资源共享，是一种浏览器技术的规范，提供了 <code>Web</code> 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用 <code>CORS</code> 在 <code>API</code> 容器如 <code>XMLHttpRequest</code> 来减少 <code>HTTP</code> 请求的风险来源。与 <code>JSONP</code> 不同，<code>CORS</code> 除了 <code>GET</code> 要求方法以外也支持其他的 <code>HTTP</code> 要求。</p><p><strong>②</strong> <code>cors</code> 的跨域方法一般是<strong>服务端</strong>进行操作，服务端需要设置以下 <code>http header</code> ：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//设置允许跨域的域名称，不建议直接写“*”</span></span>
<span class="line"><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Access-Control-Allow-Origin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:8080</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//填写允许跨域的http请求方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//当 method = OPTIONS 时, 属于预检(复杂请求), 当为预检时, 可以直接返回空响应体, 对应的 http 状态码为 204</span></span>
<span class="line"><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Access-Control-Allow-Methods</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">PUT,POST,GET,DELETE,OPTIONS</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//设置需要支持的跨域请求头，如果设置为*，表明服务器支持所有头信息字段；也可设置为X-Request-With和Content-Type</span></span>
<span class="line"><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Access-Control-Allow-Headers</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">X-Request-With, Content-Type</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 服务器收到请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//表示具体请求中的媒体类型信息</span></span>
<span class="line"><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">application/json;charset=utf-8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//设置预检结果的缓存, 单位(秒)</span></span>
<span class="line"><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Access-Control-Max-Age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">86400</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*如果需要支持 cookies,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *Access-Control-Allow-Origin 不能设置为 *,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *并且 Access-Control-Allow-Credentials 需要设置为 true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *(注意前端请求需要设置 withCredentials = true)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Access-Control-Allow-Credentials</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">false</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h1 id="结束语" tabindex="-1">结束语 <a class="header-anchor" href="#结束语" aria-label="Permalink to &quot;结束语&quot;">​</a></h1><p>以上文章浅谈了 <code>ajax</code> 以及常用的跨域方案，没有深究到很细节层面的内容。希望对大家有帮助！</p><p>关于 Ajax 以及跨域的一些信息就讲到这里啦！如有疑问欢迎提issue勘误~</p>`,56),o=[e];function t(r,c,y,F,D,i){return a(),n("div",null,o)}const C=s(p,[["render",t]]);export{d as __pageData,C as default};
