import{_ as l,o as e,c as a,Q as t}from"./chunks/framework.98c15f2e.js";const _=JSON.parse('{"title":"机器学习与神经网络简介","description":"","frontmatter":{"title":"机器学习与神经网络简介","author":"周一","date":"2023-08-05","categories":["人工智能"],"tags":["机器学习"],"sidebar":"auto"},"headers":[{"level":1,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":1,"title":"一、机器学习基础","slug":"一、机器学习基础","link":"#一、机器学习基础","children":[{"level":2,"title":"1、机器学习是什么？","slug":"_1、机器学习是什么","link":"#_1、机器学习是什么","children":[]},{"level":2,"title":"2、机器学习应用场景","slug":"_2、机器学习应用场景","link":"#_2、机器学习应用场景","children":[]},{"level":2,"title":"3、为何要用机器学习？","slug":"_3、为何要用机器学习","link":"#_3、为何要用机器学习","children":[]},{"level":2,"title":"4、机器学习如何运作？","slug":"_4、机器学习如何运作","link":"#_4、机器学习如何运作","children":[]}]},{"level":1,"title":"二、神经网络简介","slug":"二、神经网络简介","link":"#二、神经网络简介","children":[{"level":2,"title":"1、什么是神经网络","slug":"_1、什么是神经网络","link":"#_1、什么是神经网络","children":[]},{"level":2,"title":"2、人工神经网络模型的特点","slug":"_2、人工神经网络模型的特点","link":"#_2、人工神经网络模型的特点","children":[{"level":3,"title":"（1）特点","slug":"_1-特点","link":"#_1-特点","children":[]},{"level":3,"title":"（2）举例","slug":"_2-举例","link":"#_2-举例","children":[]}]},{"level":2,"title":"3、神经网络总结","slug":"_3、神经网络总结","link":"#_3、神经网络总结","children":[]}]},{"level":1,"title":"三、神经网络的训练","slug":"三、神经网络的训练","link":"#三、神经网络的训练","children":[{"level":2,"title":"1、什么是神经网络的训练？","slug":"_1、什么是神经网络的训练","link":"#_1、什么是神经网络的训练","children":[]},{"level":2,"title":"2、如何训练神经网络？","slug":"_2、如何训练神经网络","link":"#_2、如何训练神经网络","children":[]},{"level":2,"title":"3、前向传播与反向传播","slug":"_3、前向传播与反向传播","link":"#_3、前向传播与反向传播","children":[]},{"level":2,"title":"4、如何计算损失？","slug":"_4、如何计算损失","link":"#_4、如何计算损失","children":[]},{"level":2,"title":"5、如何优化？","slug":"_5、如何优化","link":"#_5、如何优化","children":[]}]},{"level":1,"title":"结束语","slug":"结束语","link":"#结束语","children":[]}],"relativePath":"column/MachineLearning/Tensorflow/01_MLBase.md","filePath":"column/MachineLearning/Tensorflow/01_MLBase.md","lastUpdated":1691204906000}'),o={name:"column/MachineLearning/Tensorflow/01_MLBase.md"},r=t('<h1 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h1><p>平常业务开发中每天都要接触到机器学习和深度学习的概念，在听了很多大佬的普及后，发现甚是有趣。于是小编想着着手开始学习这部分的内容。</p><p>那废话不多说，就从最基础的机器学习和神经网络开始~</p><h1 id="一、机器学习基础" tabindex="-1">一、机器学习基础 <a class="header-anchor" href="#一、机器学习基础" aria-label="Permalink to &quot;一、机器学习基础&quot;">​</a></h1><h2 id="_1、机器学习是什么" tabindex="-1">1、机器学习是什么？ <a class="header-anchor" href="#_1、机器学习是什么" aria-label="Permalink to &quot;1、机器学习是什么？&quot;">​</a></h2><p><strong>机器学习是对能通过经验自动改进的计算机算法的研究</strong> —— 可以理解为机器学习是一个<strong>研究</strong>，它的研究对象是<strong>计算机算法</strong>。这个计算机算法的特点是：能通过经验来自动改进自身的能力。也就意味着，它可以像人一样积累一些经验，然后自动改进。</p><p><strong>机器学习是用数据或以往的经验，以此优化计算机程序的性能标准</strong> —— 强调了数据或以往的经验。比如说：拿线性回归来举例，如下图所示：</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202308051045715" alt="img"></p><p>线性回归的意思指的就是你给我一个连续的输入，比如说图上的 <code>x</code> 轴，它从 <code>0</code> 到 <code>50</code>，然后我可以给你映射到它对应的 <code>y</code> 轴上的值分别是多少，也就是会给你一个连续的输出，我们可以在图上看到这个 <code>y</code> 轴从 <code>0</code> 到 <code>35</code> 也是一个连续的输出。</p><p>那么这个线性回归跟机器学习有什么关系呢？如我们上面所说的，这个线性回归问题通过<strong>数据或以往的经验</strong>来解决。比如说我们这个图里面有很多<strong>黄色</strong>的点，那么我们就可以沿着这些黄色的点，根据它的分布来画一条黄色的线，画完之后你随便给我一个 <code>x</code> 轴上的值，我都可以找到与之对应的 <code>y</code> 轴上的值。</p><p>比如说图上的 <code>x</code> 为 <code>20</code> 的时候，那么它的 <code>y</code> 大概就在 <code>5- 10</code> 之间这个位置，且就是你给我任意一个 <code>x</code> 轴上的值，我都可以得到 <code>y</code> 轴对应的值。当然不只是刚才那个<code>20</code>，其他值也都可以。这就是通过数据以及以往的经验来解决线性回归问题，这些<strong>黄色</strong>的点就是数据或者说是以往的经验。</p><p>还有个问题是，可能有的小伙伴会有疑问：不使用机器学习，我也能画出这条黄线 or 红线。既然自己可以做到了，那为什么还需要机器学习呢？</p><p>其实啊，我们的目的就是为了实现人工智能，就是想办法让机器来代替人去画这两条线。</p><h2 id="_2、机器学习应用场景" tabindex="-1">2、机器学习应用场景 <a class="header-anchor" href="#_2、机器学习应用场景" aria-label="Permalink to &quot;2、机器学习应用场景&quot;">​</a></h2><p>上面我们说了机器学习的基础概念，接下来再列举一些常见的应用场景：</p><ul><li><strong>图片分类</strong> —— 准备大量图片，让机器去学习，判断这是一只猫、还是一只狗。</li></ul><p><img src="https://pzfqk98jn1.feishu.cn/space/api/box/stream/download/asynccode/?code=NDIyYjBkNDc4YjkyMmM5NDlmYWI4OGViNTc3N2E5MzVfS2R4d1RGWEt1STRCNjZwQXloNWFuSFJrT094NzJ1Q09fVG9rZW46WW5IU2I4RnlVb1g3Ykp4cTRyd2NKaFR4bnJoXzE2OTEyMDM1MDI6MTY5MTIwNzEwMl9WNA" alt="img"></p><ul><li><strong>语音助手</strong> —— siri、小爱同学等等，给机器足够多的声音数据以及对应的标签，那么机器就可以识别我们的语音在讲什么了。</li></ul><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202308051046710.(null)" alt="img"></p><h2 id="_3、为何要用机器学习" tabindex="-1">3、为何要用机器学习？ <a class="header-anchor" href="#_3、为何要用机器学习" aria-label="Permalink to &quot;3、为何要用机器学习？&quot;">​</a></h2><p>①<strong>有些棘手问题只能用机器学习来解决：</strong></p><ul><li>比如说给我一张图片，让我判断这个图片里有没有一只猫。这个问题看似简单，但是即便是很聪明的程序员，也没有办法通过<strong>编写规则和编写代码</strong>的方法来解决这个问题，这是不可能的。</li><li>比如说先是编写了一堆规则，然后判断一只猫，判断一个图片里面有没有一只猫。但是我们想一下，如果这个猫随便换个位置，换个动作，换个颜色，换个品种，那么它的规则是不是就被废弃掉了，就没用了？它要写多少条规则？它要写无数份规则，无数行代码，这显然是不可能解决的。</li><li>因此，我们可以通过机器，来学大量猫🐱的图片。之后，机器就大概知道了猫的特征是什么样的。然后等下次你再给它一张新的猫的图片，它就能判断这张图片里有一只猫的概率有多大了。</li></ul><p>②<strong>获取数据比编写规则更加容易：</strong></p><ul><li>有些问题它既可以用机器学习来解决，也可以通过编写规则就是编写程序来解决。但是<strong>如果获取数据比获取规则更加容易</strong>的话，那么这时候就应该用<strong>机器学习</strong>来解决。</li><li>举个例子，比如说你写了一个翻译程序，可以把这个英文翻译成中文，但第二天PM跟你说，想让你把这个翻译程序拓展一下，可以把英文翻译成日语。</li><li>如果是通过传统的编程，就会编写一堆的规则，一堆的 <code>if else</code> 逻辑。很大概率所有代码你还要全部再重写一遍，工作量非常大。</li><li>但是如果是通过机器学习的手段来做这个翻译程序的话，那么你一行代码都不需要改。我们要做的是，只需要把<strong>训练数据</strong>换一下，重新训练一个新模型就 OK 了。这也就是为什么要使用机器学习的原因，因为有时候往往<strong>获取数据比编写规则</strong>要容易得多。</li></ul><p>③<strong>GPU等计算能力显著提升：</strong></p><ul><li>机器学习的训练需要消耗大量的计算能力。在过去我们的算力非常的差的时候，其实使用机器学习的成本是很高的，或者说几乎是不可能的。在过去科学家跑一次训练可能得几个月，而且几个月跑一次训练实验，在这个过程中一般还要失败很多次。这个训练实验需要不断地试错，不断地试验，才能慢慢降低失败的次数。</li><li>but…这么看的话，一次试验都要跑好几个月，那这个实验基本上也就没有什么可行性了，这也是为啥上世纪这个神经网络算法就已经被发明出来，但是到最近几年才火起来，就是因为过去的计算能力太差了。</li><li>但是现在我们的计算能力显著提升了，可能一个小时内我就能跑完一次训练，得到一个模型，看到实验结果了。那么这时候使用机器学习的可行性就变得非常高了。</li></ul><h2 id="_4、机器学习如何运作" tabindex="-1">4、机器学习如何运作？ <a class="header-anchor" href="#_4、机器学习如何运作" aria-label="Permalink to &quot;4、机器学习如何运作？&quot;">​</a></h2><ul><li>机器学习可以通过<strong>神经网络算法</strong>来进行运作。</li><li>除了神经网络之外，还可以用很多其他的算法来进行机器学习，比如说<strong>决策树</strong>、<strong>支持向量机</strong>、<strong>贝叶斯分类器</strong>、<strong>强化学习</strong>等等。</li></ul><h1 id="二、神经网络简介" tabindex="-1">二、神经网络简介 <a class="header-anchor" href="#二、神经网络简介" aria-label="Permalink to &quot;二、神经网络简介&quot;">​</a></h1><h2 id="_1、什么是神经网络" tabindex="-1">1、什么是神经网络 <a class="header-anchor" href="#_1、什么是神经网络" aria-label="Permalink to &quot;1、什么是神经网络&quot;">​</a></h2><ul><li>神经网络，也称人工神经网络。</li><li>人工神经网络是一种<strong>运算模型</strong>（就是输入输出的映射），由大量的节点（或称神经元）之间相互联接构成。</li><li>运算模型指的是：从输入到输出的一种映射。</li></ul><h2 id="_2、人工神经网络模型的特点" tabindex="-1">2、人工神经网络模型的特点 <a class="header-anchor" href="#_2、人工神经网络模型的特点" aria-label="Permalink to &quot;2、人工神经网络模型的特点&quot;">​</a></h2><h3 id="_1-特点" tabindex="-1">（1）特点 <a class="header-anchor" href="#_1-特点" aria-label="Permalink to &quot;（1）特点&quot;">​</a></h3><p>人工神经网络的特点就是：由<strong>大量的节点或神经元</strong>相互连接构成，连接之后就形成了一张类似于<strong>网络状</strong>的结构，所以我们把它称为<strong>神经网络</strong>。</p><h3 id="_2-举例" tabindex="-1">（2）举例 <a class="header-anchor" href="#_2-举例" aria-label="Permalink to &quot;（2）举例&quot;">​</a></h3><p>举例生活中很常见的相亲例子：</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202308051046628.(null)" alt="img"></p><p>左边是输入层，右边是输出层。中间的隐藏层，其实就是<strong>神经元</strong>，这个隐藏层是为了用来输出最后结果的。</p><p>对于输入来说，输入是我们可以从相亲对象身上直观看到的一些信息，那这些信息，每一个对应到形象、财富、品质和有趣的权重值，都不太一样。</p><p>可能五官跟财富和品质就没啥关系，那在财富和品质这两个神经元中，五官的权重就低一点。又或者说，学历和家境可能会对一个人的品质造成影响，所以说在品质这个神经元里面，它的权重可能就比较偏向于学历和家境。</p><p>总之，每一个神经元里面都存储着一些权重，然后把上一层的输入乘上这些权重加起来之后就得到一个值，得到值之后，就进入到下一层的神经元。</p><p>下一层的神经元就是最后一层的神经元，这个神经元叫<strong>满意程度</strong>，这个神经元里面也存着 <code>4</code> 个权重，它是把前面形象、财富、品质和有趣这四个神经元算出来权重，加起来得到的满意程度。</p><p>不过呢，现实生活中的机器学习比这还要复杂的多。比如说：有些用户他的眼光是比较高的，可能在我们看来已经很好看很漂亮的女孩，或者很帅的小伙，但是在他看来就是一般人，那么这时候我们光靠权重来算形象就不够了，可能还要加上一个<strong>偏置</strong>。比如说在其他用户眼中，一个相亲对象他的形象有十分，但是在那个眼光比较高的用户眼里，只有 <strong>1 分</strong>，那么<strong>他的偏置就是-9。</strong></p><p>值得注意的是，<strong>偏置</strong>是最后加上的，也就是那些权重乘完之后加起来然后再加上这个偏执。</p><p>接着，我们再来考虑一种情况，大多数人可能都会对相亲对象的财富有一定的要求，但是假设说超过了一定范围，其实对我们来说就没有区别了。比如说你觉得你的相亲对象只要年薪超过百万就可以了，那么他年薪 100 万、 200 万对你来说其实差别不大，但是对计算机来说这可是整整两倍的差距。所以说我们要告诉计算机，你不能再这么线性的增长上去了，对我来说只要超过 100 万都没有区别，不要再增加它的值了。</p><p><strong>那么如何实现这一点呢？<strong>神经元里面还有一个东西叫做</strong>激活函数</strong>，激活函数的作用就是用来做一些<strong>非线性的变化</strong>。所谓非线性的变化，就是：比如刚才我们举的例子，年薪超过 100 万就可以了，不要再线性的增长了，接下来我们可以把它想象成一条线，增长着增长这，最后就趋于直线平稳了，这就是一个非线性变化。</p><h2 id="_3、神经网络总结" tabindex="-1">3、神经网络总结 <a class="header-anchor" href="#_3、神经网络总结" aria-label="Permalink to &quot;3、神经网络总结&quot;">​</a></h2><p>最后，我们来对上面所讨论的做一个小结：</p><ul><li>每个神经元里存储着若干权重（weight）、偏置（bias）和一个激活函数（activation）。</li><li>输入乘上权重加上偏置，经过激活函数得到输出。</li><li>激活函数用于添加一些非线性变换。</li><li>神经网络通常包含一个输入层、若干隐藏层、一个输出层。</li><li>输入层通常不用于计算神经网络的层数。</li></ul><h1 id="三、神经网络的训练" tabindex="-1">三、神经网络的训练 <a class="header-anchor" href="#三、神经网络的训练" aria-label="Permalink to &quot;三、神经网络的训练&quot;">​</a></h1><h2 id="_1、什么是神经网络的训练" tabindex="-1">1、什么是神经网络的训练？ <a class="header-anchor" href="#_1、什么是神经网络的训练" aria-label="Permalink to &quot;1、什么是神经网络的训练？&quot;">​</a></h2><ul><li>给大量输入和输出，算出神经网络里所有神经元的权重、偏置，然后给定新的输入，可以算出新的输出。</li><li>在机器学习里输入输出被称为<strong>特征</strong>和<strong>标签</strong>，大量输入输出被称为<strong>训练集</strong>。</li><li>同样拿上面的相亲例子做举例：给 <strong>1000 个</strong> 相亲对象的数据（特征），以及对应的满意程度（标签）。训练完之后给一份新的相亲对象数据，就可以判定满意程度了。</li></ul><h2 id="_2、如何训练神经网络" tabindex="-1">2、如何训练神经网络？ <a class="header-anchor" href="#_2、如何训练神经网络" aria-label="Permalink to &quot;2、如何训练神经网络？&quot;">​</a></h2><ul><li><strong>初始化：</strong> 随机生成一些权重和偏置。</li><li><strong>计算损失：</strong> 给定<strong>特征</strong>，计算出<strong>标签</strong>，看标签与真实标签差得多远。</li><li><strong>优化：</strong> 微调权重和偏置（隐藏层），使损失变小。（微调与微积分中求导求梯度有关，哪个方向损失降得最快，那个方向就是正确的方向）</li></ul><h2 id="_3、前向传播与反向传播" tabindex="-1">3、前向传播与反向传播 <a class="header-anchor" href="#_3、前向传播与反向传播" aria-label="Permalink to &quot;3、前向传播与反向传播&quot;">​</a></h2><ul><li>前向传播：把训练数据的特征送入网络，得到标签。</li><li>反向传播：计算损失并优化。（在最后一层计算损失，然后微调和优化，之后计算倒数第二层的权重）</li></ul><h2 id="_4、如何计算损失" tabindex="-1">4、如何计算损失？ <a class="header-anchor" href="#_4、如何计算损失" aria-label="Permalink to &quot;4、如何计算损失？&quot;">​</a></h2><ul><li>使用业界已经研究出来的且很成熟的损失函数</li><li>常见损失函数：均方误差、对数损失、交叉熵…</li></ul><h2 id="_5、如何优化" tabindex="-1">5、如何优化？ <a class="header-anchor" href="#_5、如何优化" aria-label="Permalink to &quot;5、如何优化？&quot;">​</a></h2><ul><li>使用业界科学家们已经研发的优化器</li><li>常见优化器：随机梯度下降（SGD）、Adam（从第三方库中调用）</li></ul><h1 id="结束语" tabindex="-1">结束语 <a class="header-anchor" href="#结束语" aria-label="Permalink to &quot;结束语&quot;">​</a></h1><p>在上面的文章中，我们学习了机器学习的基础知识，以及由机器学习衍生而来的人工神经网络。同时，我们还谈到了如何去训练一个神经网络。</p><p>通过本文的介绍，相信你对机器学习和神经网络会有一个基础的认识。</p><p>以上就是本文的全部内容，我们下期见~🍻</p><p>参考材料：<a href="https://www.imooc.com/search/?words=%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0" target="_blank" rel="noreferrer">JavaScript玩转机器学习 - Tensorflow.js</a></p>',65),i=[r];function n(s,c,d,h,g,u){return e(),a("div",null,i)}const m=l(o,[["render",n]]);export{_ as __pageData,m as default};
