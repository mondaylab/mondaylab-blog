import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.98c15f2e.js";const u=JSON.parse('{"title":"万字总结webpack实战案例配置","description":"","frontmatter":{"title":"万字总结webpack实战案例配置","author":"周一","date":"2021-08-04","categories":["前端开发"],"tags":["Webpack"],"sidebar":"auto"},"headers":[{"level":1,"title":"🛴 序言","slug":"🛴-序言","link":"#🛴-序言","children":[]},{"level":1,"title":"🚌 一、Library 的打包","slug":"🚌-一、library-的打包","link":"#🚌-一、library-的打包","children":[{"level":2,"title":"1. webpack 打包库","slug":"_1-webpack-打包库","link":"#_1-webpack-打包库","children":[]},{"level":2,"title":"2. 库引用冲突","slug":"_2-库引用冲突","link":"#_2-库引用冲突","children":[]}]},{"level":1,"title":"🚍 二、PWA 的打包配置","slug":"🚍-二、pwa-的打包配置","link":"#🚍-二、pwa-的打包配置","children":[{"level":2,"title":"1. PWA 是什么","slug":"_1-pwa-是什么","link":"#_1-pwa-是什么","children":[]},{"level":2,"title":"2. webpack 中的 PWA","slug":"_2-webpack-中的-pwa","link":"#_2-webpack-中的-pwa","children":[]}]},{"level":1,"title":"🚎 三、TypeScript 的打包配置","slug":"🚎-三、typescript-的打包配置","link":"#🚎-三、typescript-的打包配置","children":[{"level":2,"title":"1. 引例阐述","slug":"_1-引例阐述","link":"#_1-引例阐述","children":[]},{"level":2,"title":"2. webpack 对 ts 的配置","slug":"_2-webpack-对-ts-的配置","link":"#_2-webpack-对-ts-的配置","children":[{"level":3,"title":"（1）背景","slug":"_1-背景","link":"#_1-背景","children":[]},{"level":3,"title":"（2）配置步骤","slug":"_2-配置步骤","link":"#_2-配置步骤","children":[]}]},{"level":2,"title":"3. ts 识别第三方库","slug":"_3-ts-识别第三方库","link":"#_3-ts-识别第三方库","children":[]}]},{"level":1,"title":"🚕 四、WebpackDevServer 进阶操作","slug":"🚕-四、webpackdevserver-进阶操作","link":"#🚕-四、webpackdevserver-进阶操作","children":[{"level":2,"title":"1. WebpackDevServer 实现请求转发","slug":"_1-webpackdevserver-实现请求转发","link":"#_1-webpackdevserver-实现请求转发","children":[]},{"level":2,"title":"2. WebpackDevServer 解决单页面应用路由问题","slug":"_2-webpackdevserver-解决单页面应用路由问题","link":"#_2-webpackdevserver-解决单页面应用路由问题","children":[]}]},{"level":1,"title":"🚖 五、ESLint 在 Webpack 中的配置","slug":"🚖-五、eslint-在-webpack-中的配置","link":"#🚖-五、eslint-在-webpack-中的配置","children":[{"level":2,"title":"1. ESLint 是什么","slug":"_1-eslint-是什么","link":"#_1-eslint-是什么","children":[]},{"level":2,"title":"2. 如何安装 ESLint","slug":"_2-如何安装-eslint","link":"#_2-如何安装-eslint","children":[]},{"level":2,"title":"3. 为什么要在 webpack 中配置 ESLint","slug":"_3-为什么要在-webpack-中配置-eslint","link":"#_3-为什么要在-webpack-中配置-eslint","children":[]}]},{"level":1,"title":"🏎️ 六、Webpack 性能优化","slug":"🏎️-六、webpack-性能优化","link":"#🏎️-六、webpack-性能优化","children":[{"level":2,"title":"1. 跟上技术的迭代(Node,Npm,Yarn)","slug":"_1-跟上技术的迭代-node-npm-yarn","link":"#_1-跟上技术的迭代-node-npm-yarn","children":[]},{"level":2,"title":"2. 在尽可能少的模块上应用 Loader","slug":"_2-在尽可能少的模块上应用-loader","link":"#_2-在尽可能少的模块上应用-loader","children":[]},{"level":2,"title":"3. 合理使用插件","slug":"_3-合理使用插件","link":"#_3-合理使用插件","children":[]},{"level":2,"title":"4. resolve 参数合理配置","slug":"_4-resolve-参数合理配置","link":"#_4-resolve-参数合理配置","children":[{"level":3,"title":"（1）常见配置","slug":"_1-常见配置","link":"#_1-常见配置","children":[]},{"level":3,"title":"（2）参数讲解","slug":"_2-参数讲解","link":"#_2-参数讲解","children":[]}]},{"level":2,"title":"5. 使用 DllPlugin 提高打包速度","slug":"_5-使用-dllplugin-提高打包速度","link":"#_5-使用-dllplugin-提高打包速度","children":[]},{"level":2,"title":"6. 控制包文件大小","slug":"_6-控制包文件大小","link":"#_6-控制包文件大小","children":[]},{"level":2,"title":"7. 多进程打包","slug":"_7-多进程打包","link":"#_7-多进程打包","children":[]},{"level":2,"title":"8. 合理使用 sourceMap","slug":"_8-合理使用-sourcemap","link":"#_8-合理使用-sourcemap","children":[]},{"level":2,"title":"9. 结合 stats 分析打包结果","slug":"_9-结合-stats-分析打包结果","link":"#_9-结合-stats-分析打包结果","children":[]},{"level":2,"title":"10. 开发环境内存编译","slug":"_10-开发环境内存编译","link":"#_10-开发环境内存编译","children":[]},{"level":2,"title":"11. 开发环境无用插件剔除","slug":"_11-开发环境无用插件剔除","link":"#_11-开发环境无用插件剔除","children":[]}]},{"level":1,"title":"🏍️ 七、多页面打包配置","slug":"🏍️-七、多页面打包配置","link":"#🏍️-七、多页面打包配置","children":[]},{"level":1,"title":"🛵 八、结束语","slug":"🛵-八、结束语","link":"#🛵-八、结束语","children":[]},{"level":1,"title":"🐣 彩蛋 One More Thing","slug":"🐣-彩蛋-one-more-thing","link":"#🐣-彩蛋-one-more-thing","children":[{"level":2,"title":"（：往期推荐","slug":"往期推荐","link":"#往期推荐","children":[]}]}],"relativePath":"column/FrontEnd/Webpack/003.md","filePath":"column/FrontEnd/Webpack/003.md","lastUpdated":1685151998000}'),p={name:"column/FrontEnd/Webpack/003.md"},e=l(`<h1 id="🛴-序言" tabindex="-1">🛴 序言 <a class="header-anchor" href="#🛴-序言" aria-label="Permalink to &quot;🛴 序言&quot;">​</a></h1><p>在<a href="https://blog.csdn.net/weixin_44803753/category_11123550.html?spm=1001.2014.3001.5482" target="_blank" rel="noreferrer">前面的两篇文章</a>中，我们讲解了 <code>webpack</code> 的入门知识。但是呢，入门知识了解了之后，总得应用到具体的案例当中来。</p><p>因此，在下面的这篇文章中，将带领大家来了解关于 <code>webpack</code> 的一些实战案例配置，包括第三方库、 <code>PWA</code> 、 <code>ts</code> 的打包配置，以及 <code>WebpackDevServer</code> 的进阶操作，还有需重点掌握的，关于 <code>webpack</code> 如何做性能优化处理这个问题。</p><p>下面开始本文的介绍~🚦</p><h1 id="🚌-一、library-的打包" tabindex="-1">🚌 一、Library 的打包 <a class="header-anchor" href="#🚌-一、library-的打包" aria-label="Permalink to &quot;🚌 一、Library 的打包&quot;">​</a></h1><p>假设我们现在要开发一个组件库或者一个函数库时，对于这样的库代码，我们应该如何让 <code>webpack</code> 来进行打包呢？</p><h2 id="_1-webpack-打包库" tabindex="-1">1. webpack 打包库 <a class="header-anchor" href="#_1-webpack-打包库" aria-label="Permalink to &quot;1. webpack 打包库&quot;">​</a></h2><p>假如我们现在写了很多逻辑代码，同时呢，我们将这些逻辑代码进行打包，打包之后它全部生成在 <code>dist</code> 文件夹下的 <code>mondaylib.js</code> 文件中。</p><p>好了，现在这个库生成了。那如何让我们的用户，来引入 <code>mondaylib</code> 这个库呢？</p><p>一般情况下，别人引入我们的库的方法，<strong>具体有以下几种方式：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//方式一</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> mondaylib </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;mondaylib&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">//方式二</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mondaylib</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mondaylib&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//方式三</span></span>
<span class="line"><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;mondaylib&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//方式一</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> mondaylib </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;mondaylib&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//方式二</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mondaylib</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;mondaylib&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//方式三</span></span>
<span class="line"><span style="color:#6F42C1;">require</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;mondaylib&#39;</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>所以，如果想让我们的用户来引入这个库，我们需要在 <code>webpack.config.js</code> 下进行配置。<strong>具体配置如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;mondaylib.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//此处配置libraryTarget，umd表示支持commonJS这种语法</span></span>
<span class="line"><span style="color:#E1E4E8;">    libraryTarget: </span><span style="color:#9ECBFF;">&#39;umd&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  mode: </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  entry: </span><span style="color:#032F62;">&#39;./src/index.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  output: {</span></span>
<span class="line"><span style="color:#24292E;">    path: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;dist&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">&#39;mondaylib.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//此处配置libraryTarget，umd表示支持commonJS这种语法</span></span>
<span class="line"><span style="color:#24292E;">    libraryTarget: </span><span style="color:#032F62;">&#39;umd&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>libraryTarget: &#39;umd&#39;</code> 表示支持 <code>commonJS</code> 这种语法，因此可以引入上面三种方式。同时， <code>libraryTarget</code> 也可以设置为其他值，比如 <code>this</code> 和 <code>window</code> 。</p><p><code>libraryTarget: &#39;this&#39;</code> 的意思为，我要让 <code>mondaylib</code> 这个变量，挂载到页面上。 <code>libraryTarget: &#39;window&#39;</code> 则表示为， <code>mondaylib</code> 这个变量，将挂载到 <code>window</code> 上。</p><hr><p>除了以上三种情况，还有另外特殊情况，<strong>具体如下：</strong></p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;mondaylib.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;mondaylib.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此时我们需要在 <code>webpack.config.js</code> 中进行<strong>以下配置：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;mondaylib.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//将打包生成的代码挂载到页面的全局变量上</span></span>
<span class="line"><span style="color:#E1E4E8;">    library: </span><span style="color:#9ECBFF;">&#39;mondaylib&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//此处配置libraryTarget，umd表示支持commonJS这种语法</span></span>
<span class="line"><span style="color:#E1E4E8;">    libraryTarget: </span><span style="color:#9ECBFF;">&#39;umd&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  mode: </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  entry: </span><span style="color:#032F62;">&#39;./src/index.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  output: {</span></span>
<span class="line"><span style="color:#24292E;">    path: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;dist&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">&#39;mondaylib.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//将打包生成的代码挂载到页面的全局变量上</span></span>
<span class="line"><span style="color:#24292E;">    library: </span><span style="color:#032F62;">&#39;mondaylib&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//此处配置libraryTarget，umd表示支持commonJS这种语法</span></span>
<span class="line"><span style="color:#24292E;">    libraryTarget: </span><span style="color:#032F62;">&#39;umd&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>其中，第一个 <code>library</code> 是属性值，第二个 <code>mondaylib</code> 是我们的库名，这个配置的意思为，将打包生成的代码，即 <code>mondaylib.js</code> 这个库，给挂载到全局的变量上。</p><h2 id="_2-库引用冲突" tabindex="-1">2. 库引用冲突 <a class="header-anchor" href="#_2-库引用冲突" aria-label="Permalink to &quot;2. 库引用冲突&quot;">​</a></h2><p>假设现在，我们在上面 <code>mondaylib</code> 这个库中，引入了 <code>lodash</code> 这个库。然后呢，当用户使用的时候，用户又再引入了一次 lodash 这个库。像下面代码这样：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;lodash&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">//mondaylib这个库原先已经引入过lodash这个库</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> mondaylib </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;mondaylib&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;lodash&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//mondaylib这个库原先已经引入过lodash这个库</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> mondaylib </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;mondaylib&#39;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>所以现在，我们该如何来避免这种问题发生呢？我们再 <code>webpack.config.js</code> 中进行配置，<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  externals: [</span><span style="color:#9ECBFF;">&#39;lodash&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  externals: [</span><span style="color:#032F62;">&#39;lodash&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>从以上代码中我们可以知道，通过 <code>externals: [&quot;lodash&quot;]</code> 这个配置，来告诉 <code>webpack</code> ，告诉它说，如果在打包过程中， <code>mondaylib</code> 这个库中如果有遇到 <code>lodash</code> 这个库，那么就避开它，不要进行打包。通过这种方式，可以有效地避免库多次引用的问题，减少代码的打包大小。</p><hr><p><code>externals</code> 还有另外一种特殊配置，<strong>如下代码所示：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  externals: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 表明lodash这个库如果在commonjs这种环境下被使用，那么要求lodash加载的时候必须叫做lodash</span></span>
<span class="line"><span style="color:#E1E4E8;">    lodash: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      commonjs: </span><span style="color:#9ECBFF;">&#39;lodash&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  externals: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 表明lodash这个库如果在commonjs这种环境下被使用，那么要求lodash加载的时候必须叫做lodash</span></span>
<span class="line"><span style="color:#24292E;">    lodash: {</span></span>
<span class="line"><span style="color:#24292E;">      commonjs: </span><span style="color:#032F62;">&#39;lodash&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>如果这样配置，意在表明 <code>lodash</code> 这个库如果在 <code>commonjs</code> 这种环境下被使用，那么要求 <code>lodash</code> 加载的时候，必须命名为 <code>lodash</code> ，而不能随意命名。<strong>像下面这样：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//✔可使用方式：命名为lodash</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lodash </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;lodash&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">//✘不可使用方式：未命名为lodash</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;lodash&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//✔可使用方式：命名为lodash</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lodash </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;lodash&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//✘不可使用方式：未命名为lodash</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;lodash&#39;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h1 id="🚍-二、pwa-的打包配置" tabindex="-1">🚍 二、PWA 的打包配置 <a class="header-anchor" href="#🚍-二、pwa-的打包配置" aria-label="Permalink to &quot;🚍 二、PWA 的打包配置&quot;">​</a></h1><h2 id="_1-pwa-是什么" tabindex="-1">1. PWA 是什么 <a class="header-anchor" href="#_1-pwa-是什么" aria-label="Permalink to &quot;1. PWA 是什么&quot;">​</a></h2><p><strong>PWA</strong>，全称为 <code>Progressive Web Application</code> ，即渐进式 Web 应用程序。</p><p><code>PWA</code> 是一门比较新的前端技术，那它是一种什么样的技术呢？</p><p><code>PWA</code> 可以实现的效果是，如果你访问一个网站，有可能第一次你访问成功了，但是呢，突然间这个网站的服务器挂掉了。那么这个时候你访问网站应该就是没办法访问了。但是呢， <code>PWA</code> 会将你第一次访问的页面给缓存起来。之后即使服务器挂掉了，你依然可以把之前看到的页面再展示出来。</p><p>因此， <code>webpack</code> 中有一个插件，可以来实现这样的效果。我们来了解一下~</p><h2 id="_2-webpack-中的-pwa" tabindex="-1">2. webpack 中的 PWA <a class="header-anchor" href="#_2-webpack-中的-pwa" aria-label="Permalink to &quot;2. webpack 中的 PWA&quot;">​</a></h2><p><strong>第一步：</strong> 安装插件。<strong>具体代码如下：</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">workbox-webpack-plugin</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">workbox-webpack-plugin</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><p><strong>第二步：</strong> 在 <code>webpack.prod.js</code> 中引入该插件并使用。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">WorkboxPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;workbox-webpack-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> WorkboxPlugin.</span><span style="color:#B392F0;">GenerateSW</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      clientsClaim: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      skipWaiting: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">WorkboxPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;workbox-webpack-plugin&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> WorkboxPlugin.</span><span style="color:#6F42C1;">GenerateSW</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      clientsClaim: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      skipWaiting: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>通常情况下，我们只需要在线上环境 <code>prod</code> 引入 <code>PWA</code> ，而在开发环境中不需要考虑这个问题。通过以上的配置，我们在项目打包完成之后， <code>dist</code> 目录下将生成两个新的文件，一个是 <code>service-worker.js</code> ，另外一个是 <code>precache.js</code> 文件，这两个文件就是供我们来使用 PWA 的。</p><hr><p><strong>第三步：</strong> 引入以上文件。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;serviceWorker&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> navigator) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;load&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    navigator.serviceWorker</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/service-worker.js&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">registration</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;service-worker registed&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;service-worker regist error&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;serviceWorker&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> navigator) {</span></span>
<span class="line"><span style="color:#24292E;">  window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;load&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    navigator.serviceWorker</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/service-worker.js&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">registration</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;service-worker registed&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;service-worker regist error&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>我们需要在<strong>入口文件</strong>中，写一段业务代码，引入 <code>service-worker.js</code> 文件，来帮我们做 <code>PWA</code> 。这个时候我们对项目进行打包，之后呢，如果出现服务器突然挂了的情况，那也不用担心， <code>PWA</code> 会帮我们加载原先的页面来提供给我们浏览。</p><h1 id="🚎-三、typescript-的打包配置" tabindex="-1">🚎 三、TypeScript 的打包配置 <a class="header-anchor" href="#🚎-三、typescript-的打包配置" aria-label="Permalink to &quot;🚎 三、TypeScript 的打包配置&quot;">​</a></h1><h2 id="_1-引例阐述" tabindex="-1">1. 引例阐述 <a class="header-anchor" href="#_1-引例阐述" aria-label="Permalink to &quot;1. 引例阐述&quot;">​</a></h2><p>我们都知道，对于不同的开发者来说，不同的人写出的代码风格形式各异，这样在后期，项目的维护性就很难得到保证。那么，这个时候，风靡于 2018 年的 <code>Typescript</code> 出现了。 <code>ts</code> 规范了一套 <code>js</code> 的标准，因此，我们在项目代码的编写中，通过 <code>ts</code> ，就可以规范我们的代码，并且使得我们项目的维可维护性和可扩展性变得更好了。</p><p>接下来，我们就来了解一下，如何通过 <code>webpack</code> 的配置变更，来实现对 <code>ts</code> 语法的支持。</p><h2 id="_2-webpack-对-ts-的配置" tabindex="-1">2. webpack 对 ts 的配置 <a class="header-anchor" href="#_2-webpack-对-ts-的配置" aria-label="Permalink to &quot;2. webpack 对 ts 的配置&quot;">​</a></h2><h3 id="_1-背景" tabindex="-1">（1）背景 <a class="header-anchor" href="#_1-背景" aria-label="Permalink to &quot;（1）背景&quot;">​</a></h3><p>假设我们现在有这么一段 <code>ts</code> 的代码需要进行编译，<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Greeter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">greeting</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">message</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.greeting </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">greet</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Hello, &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.greeting;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> greeter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Greeter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;world&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> button </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">button.textContent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Say Hello&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">button.</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(greeter.</span><span style="color:#B392F0;">greet</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(button);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Greeter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">greeting</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">message</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.greeting </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> message;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Hello, &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.greeting;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> greeter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Greeter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> button </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;button&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">button.textContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Say Hello&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">button.</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(greeter.</span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">document.body.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(button);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>现在，我们想要让 <code>webpack</code> 来对这段 <code>ts</code> 代码进行编译，该怎么处理呢？</p><h3 id="_2-配置步骤" tabindex="-1">（2）配置步骤 <a class="header-anchor" href="#_2-配置步骤" aria-label="Permalink to &quot;（2）配置步骤&quot;">​</a></h3><p><strong>第一步：</strong> 安装 <code>ts-loader</code> 。<strong>具体命令如下：</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ts-loader</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">typescript</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ts-loader</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typescript</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>第二步：</strong> 我们在 <code>webpack.config.js</code> 文件下进行配置。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&#39;./src/index.tsx&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">tsx</span><span style="color:#F97583;">?$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: </span><span style="color:#9ECBFF;">&#39;ts-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        exclude:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  mode: </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  entry: </span><span style="color:#032F62;">&#39;./src/index.tsx&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">tsx</span><span style="color:#D73A49;">?$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        use: </span><span style="color:#032F62;">&#39;ts-loader&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        exclude:</span><span style="color:#032F62;"> /node_modules/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  output: {</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">&#39;bundle.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    path: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;dist&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><strong>第三步：</strong> 配置 <code>tsconfig.json</code> 文件。<strong>具体代码如下：</strong></p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;outDir&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./dist&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;module&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;es6&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;target&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;es5&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;allowJs&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;outDir&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./dist&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;module&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;es6&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;target&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;es5&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;allowJs&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_3-ts-识别第三方库" tabindex="-1">3. ts 识别第三方库 <a class="header-anchor" href="#_3-ts-识别第三方库" aria-label="Permalink to &quot;3. ts 识别第三方库&quot;">​</a></h2><p>有时候，我们会调用 <code>lodash</code> 中的 <code>join</code> 方法，但是呢，如果我们不进行特殊处理的话，在 <code>tsx</code> 文件中正常引入 <code>lodash</code> 这个库并使用，是不会报错的。因此，我们需要来安装另外一个 <code>ts</code> 的库，来对它进行处理一下。<strong>具体步骤如下：</strong></p><p><strong>第一步：</strong> 安装 <code>@types/lodash</code> 库。<strong>具体命令如下：</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@types/lodash</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@types/lodash</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装完这个库之后， <code>ts</code> 就可以去识别 <code>lodash</code> 的一些函数和方法，一旦出现引用不对，就会进行报错提示。</p><p>那有小伙伴就会有疑问说，是不是 <code>ts</code> 拥有所有这样的库（像 <code>jQuery</code> 等各种库）的类型文件呢？</p><p>答案当然是否定的。我们可以到 <code>github</code> 上的一个网址<a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noreferrer">👉</a><a href="https://microsoft.github.io/TypeSearch/" target="_blank" rel="noreferrer">https://microsoft.github.io/TypeSearch/</a>来进行搜索，如果搜索得到，那么我们就可以用 <code>@type/库名</code> 来进行安装，之后 <code>tsx</code> 文件就会支持对该库的类型检查。</p><h1 id="🚕-四、webpackdevserver-进阶操作" tabindex="-1">🚕 四、WebpackDevServer 进阶操作 <a class="header-anchor" href="#🚕-四、webpackdevserver-进阶操作" aria-label="Permalink to &quot;🚕 四、WebpackDevServer 进阶操作&quot;">​</a></h1><h2 id="_1-webpackdevserver-实现请求转发" tabindex="-1">1. WebpackDevServer 实现请求转发 <a class="header-anchor" href="#_1-webpackdevserver-实现请求转发" aria-label="Permalink to &quot;1. WebpackDevServer 实现请求转发&quot;">​</a></h2><p>一般情况下，我们可以通过 <code>charles fiddler</code> 工具，在本地搭建一个代理服务器。通过这台代理服务器，将我们想要请求的接口地址进行转发。</p><p>那在 <code>webpack</code> 中，给我们提供了一个工具， <code>devServer.Proxy</code> 。接下来，我们在 <code>webpack.config.js</code> 中进行配置，<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  devServer: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    proxy: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;/react/api&#39;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        target: </span><span style="color:#9ECBFF;">&#39;http://www.mondaylab.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//实现对https网址的请求转发</span></span>
<span class="line"><span style="color:#E1E4E8;">        secure: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">bypass</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">proxyOptions</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">//如果请求的内容是一个html地址，那么就直接返回根路径下index.html的内容</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (req.headers.accept.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;html&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Skipping proxy for browser request&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./index.html&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// return false; //表示如果遇到html请求，那么该给你返回什么就返回什么</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//在前端请求时写header.json，webpack会间接的帮我们拿到demo.json的数据（请求转发】）</span></span>
<span class="line"><span style="color:#E1E4E8;">        pathRewrite: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&#39;header.json&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;demo.json&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//如果有一些网站做了防爬虫，那么我们可能没办法进行跨域。需要进行如下配置，就可以突破对origin的限制</span></span>
<span class="line"><span style="color:#E1E4E8;">        changeOrigin: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 在请求头中自定义一些内容</span></span>
<span class="line"><span style="color:#E1E4E8;">        headers: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          host: </span><span style="color:#9ECBFF;">&#39;www.mondaylab.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">//在做请求转发时模拟一些登录等操作</span></span>
<span class="line"><span style="color:#E1E4E8;">          cookie: </span><span style="color:#9ECBFF;">&#39;gfhgfh&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  devServer: {</span></span>
<span class="line"><span style="color:#24292E;">    proxy: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;/react/api&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        target: </span><span style="color:#032F62;">&#39;http://www.mondaylab.com&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//实现对https网址的请求转发</span></span>
<span class="line"><span style="color:#24292E;">        secure: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">bypass</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">proxyOptions</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//如果请求的内容是一个html地址，那么就直接返回根路径下index.html的内容</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (req.headers.accept.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;html&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Skipping proxy for browser request&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./index.html&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// return false; //表示如果遇到html请求，那么该给你返回什么就返回什么</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//在前端请求时写header.json，webpack会间接的帮我们拿到demo.json的数据（请求转发】）</span></span>
<span class="line"><span style="color:#24292E;">        pathRewrite: {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&#39;header.json&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;demo.json&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//如果有一些网站做了防爬虫，那么我们可能没办法进行跨域。需要进行如下配置，就可以突破对origin的限制</span></span>
<span class="line"><span style="color:#24292E;">        changeOrigin: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 在请求头中自定义一些内容</span></span>
<span class="line"><span style="color:#24292E;">        headers: {</span></span>
<span class="line"><span style="color:#24292E;">          host: </span><span style="color:#032F62;">&#39;www.mondaylab.com&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//在做请求转发时模拟一些登录等操作</span></span>
<span class="line"><span style="color:#24292E;">          cookie: </span><span style="color:#032F62;">&#39;gfhgfh&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="_2-webpackdevserver-解决单页面应用路由问题" tabindex="-1">2. WebpackDevServer 解决单页面应用路由问题 <a class="header-anchor" href="#_2-webpackdevserver-解决单页面应用路由问题" aria-label="Permalink to &quot;2. WebpackDevServer 解决单页面应用路由问题&quot;">​</a></h2><p>对于现代的的主流框架来说，像 <code>vue.js</code> 、<code>React.js</code> 等等框架，基本都是单页面应用。那么，在单页面应用里，比如我们想要从 <code>http://mondaylab.com</code> 跳转到 <code>http://mondaylab.com/list</code> ，该怎么样进行跳转呢？</p><p>这就要谈到一个单页面应用的路由问题。我们需要在 <code>webpack.config.js</code> 中进行<strong>如下配置：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  devServer: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//第一种方式</span></span>
<span class="line"><span style="color:#E1E4E8;">    historyApiFallback: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*等同于</span></span>
<span class="line"><span style="color:#6A737D;">        historyApiFallback: {</span></span>
<span class="line"><span style="color:#6A737D;">            rewrites: [{</span></span>
<span class="line"><span style="color:#6A737D;">                from: /\\.*\\/,</span></span>
<span class="line"><span style="color:#6A737D;">                to: &#39;/list.html/&#39;</span></span>
<span class="line"><span style="color:#6A737D;">            }]</span></span>
<span class="line"><span style="color:#6A737D;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*第二种方式</span></span>
<span class="line"><span style="color:#6A737D;">        historyApiFallback: {</span></span>
<span class="line"><span style="color:#6A737D;">            rewrites: [{</span></span>
<span class="line"><span style="color:#6A737D;">                from: /abc.html/,</span></span>
<span class="line"><span style="color:#6A737D;">                //进行转换，当访问abc.html时，会把list.html的内容展示出来</span></span>
<span class="line"><span style="color:#6A737D;">                to: &#39;/list.html/&#39;</span></span>
<span class="line"><span style="color:#6A737D;">            }]</span></span>
<span class="line"><span style="color:#6A737D;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*第三种方式：更为灵活</span></span>
<span class="line"><span style="color:#6A737D;">        historyApiFallback: {</span></span>
<span class="line"><span style="color:#6A737D;">            rewrites: [{</span></span>
<span class="line"><span style="color:#6A737D;">            	//表明在做页面的替换时，通过一个函数function的形式，结合context的一些参数</span></span>
<span class="line"><span style="color:#6A737D;">            	//做一些js的逻辑放在里面，来决定最终它跳转到哪</span></span>
<span class="line"><span style="color:#6A737D;">                from: /^\\/(libs)\\/.*$/,</span></span>
<span class="line"><span style="color:#6A737D;">                to: function(context){</span></span>
<span class="line"><span style="color:#6A737D;">                	return &#39;/bower_components&#39; + context.match[0];</span></span>
<span class="line"><span style="color:#6A737D;">                }</span></span>
<span class="line"><span style="color:#6A737D;">            }]</span></span>
<span class="line"><span style="color:#6A737D;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        */</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  devServer: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//第一种方式</span></span>
<span class="line"><span style="color:#24292E;">    historyApiFallback: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*等同于</span></span>
<span class="line"><span style="color:#6A737D;">        historyApiFallback: {</span></span>
<span class="line"><span style="color:#6A737D;">            rewrites: [{</span></span>
<span class="line"><span style="color:#6A737D;">                from: /\\.*\\/,</span></span>
<span class="line"><span style="color:#6A737D;">                to: &#39;/list.html/&#39;</span></span>
<span class="line"><span style="color:#6A737D;">            }]</span></span>
<span class="line"><span style="color:#6A737D;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*第二种方式</span></span>
<span class="line"><span style="color:#6A737D;">        historyApiFallback: {</span></span>
<span class="line"><span style="color:#6A737D;">            rewrites: [{</span></span>
<span class="line"><span style="color:#6A737D;">                from: /abc.html/,</span></span>
<span class="line"><span style="color:#6A737D;">                //进行转换，当访问abc.html时，会把list.html的内容展示出来</span></span>
<span class="line"><span style="color:#6A737D;">                to: &#39;/list.html/&#39;</span></span>
<span class="line"><span style="color:#6A737D;">            }]</span></span>
<span class="line"><span style="color:#6A737D;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*第三种方式：更为灵活</span></span>
<span class="line"><span style="color:#6A737D;">        historyApiFallback: {</span></span>
<span class="line"><span style="color:#6A737D;">            rewrites: [{</span></span>
<span class="line"><span style="color:#6A737D;">            	//表明在做页面的替换时，通过一个函数function的形式，结合context的一些参数</span></span>
<span class="line"><span style="color:#6A737D;">            	//做一些js的逻辑放在里面，来决定最终它跳转到哪</span></span>
<span class="line"><span style="color:#6A737D;">                from: /^\\/(libs)\\/.*$/,</span></span>
<span class="line"><span style="color:#6A737D;">                to: function(context){</span></span>
<span class="line"><span style="color:#6A737D;">                	return &#39;/bower_components&#39; + context.match[0];</span></span>
<span class="line"><span style="color:#6A737D;">                }</span></span>
<span class="line"><span style="color:#6A737D;">            }]</span></span>
<span class="line"><span style="color:#6A737D;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        */</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>值得注意的是， <code>historyApiFallback</code> 只能用于开发环境下。如果到了线上环境的话，需要让后端的小伙伴去 <code>nginx</code> 或者 <code>apache</code> 上，仿照 <code>webpackDevServer</code> 的一些配置，在后端的服务器上做同样的配置，配置之后前端才可以使用对应的路由。</p><h1 id="🚖-五、eslint-在-webpack-中的配置" tabindex="-1">🚖 五、ESLint 在 Webpack 中的配置 <a class="header-anchor" href="#🚖-五、eslint-在-webpack-中的配置" aria-label="Permalink to &quot;🚖 五、ESLint 在 Webpack 中的配置&quot;">​</a></h1><h2 id="_1-eslint-是什么" tabindex="-1">1. ESLint 是什么 <a class="header-anchor" href="#_1-eslint-是什么" aria-label="Permalink to &quot;1. ESLint 是什么&quot;">​</a></h2><p>在我们日常的团队开发中，每个人写的代码都各式各样，比如有的人喜欢在代码后边加个分号，有的人又不喜欢加。这间接地，就很容易导致我们项目的可维护性变差了。因此呢，我们就引入了 <code>ESLint</code> 这个内容，来约束的代码规范，让项目的可维护性和可扩展性变高。</p><p>那 <code>ESLint</code> 在 <code>Webpack</code> 中是怎么样配置的呢？</p><h2 id="_2-如何安装-eslint" tabindex="-1">2. 如何安装 ESLint <a class="header-anchor" href="#_2-如何安装-eslint" aria-label="Permalink to &quot;2. 如何安装 ESLint&quot;">​</a></h2><p><strong>第一步：</strong> 安装 <code>ESLint</code> 工具。<strong>具体命令如下：</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">eslint</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eslint</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>第二步：</strong> 约束我们的代码。我们需要新建一个配置文件，来对我们的 ESLint 规范进行配置。<strong>具体命令如下：</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">eslint</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--init</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Use a popular style guide 使用通用的代码检测模板</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Airbnb</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Do you use React 根据自身需求填y或者n</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Javascript</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Would you like to install them now with npm</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Y</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eslint</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--init</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Use a popular style guide 使用通用的代码检测模板</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Airbnb</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Do you use React 根据自身需求填y或者n</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Javascript</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Would you like to install them now with npm</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>第三步：</strong> 使用 <code>eslint</code> 检测代码规范。<strong>具体代码如下：</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">eslint</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">src</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eslint</span><span style="color:#24292E;"> </span><span style="color:#032F62;">src</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>以上代码表示的是，使用 eslint 来检测 src 目录下的代码规范。</p><h2 id="_3-为什么要在-webpack-中配置-eslint" tabindex="-1">3. 为什么要在 webpack 中配置 ESLint <a class="header-anchor" href="#_3-为什么要在-webpack-中配置-eslint" aria-label="Permalink to &quot;3. 为什么要在 webpack 中配置 ESLint&quot;">​</a></h2><p>在上面中我们了解到，每个开发的小伙伴都可以用命令行来检测自己的代码规范，但是如果每回写完一次代码，我们都要去运行这样的命令，才能看我们的代码写的合不合理，这样会不会就有点麻烦了。同时，我们又也不能保证每个人的 <code>eslint</code> 的代码规范设置是不是一样的。</p><p>因此，我们可以在 <code>webpack</code> 中来进行配置，解决上述所说的问题。<strong>具体步骤如下：</strong></p><p><strong>第一步：</strong> 安装 <code>eslint-loader</code> 。<strong>具体命令行如下：</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">eslint-loader</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eslint-loader</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>第二步：</strong> 配置 <code>webpack.config.js</code> 。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  devServer: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*当我们运行webpack做打包时，</span></span>
<span class="line"><span style="color:#6A737D;">      一旦代码出现规范问题，</span></span>
<span class="line"><span style="color:#6A737D;">      webpack将会在浏览器上弹出一个报错层来提示我们*/</span></span>
<span class="line"><span style="color:#E1E4E8;">    overlay: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">js</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        exclude:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: [</span><span style="color:#9ECBFF;">&#39;babel-loader&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;eslint-loader&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  devServer: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*当我们运行webpack做打包时，</span></span>
<span class="line"><span style="color:#6A737D;">      一旦代码出现规范问题，</span></span>
<span class="line"><span style="color:#6A737D;">      webpack将会在浏览器上弹出一个报错层来提示我们*/</span></span>
<span class="line"><span style="color:#24292E;">    overlay: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">js</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        exclude:</span><span style="color:#032F62;"> /node_modules/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        use: [</span><span style="color:#032F62;">&#39;babel-loader&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;eslint-loader&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><hr><p>了解完基础配置之后，接下来我们来了解一些 <code>eslint-loader</code> 的一些其他配置。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">js</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        exclude:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&#39;babel-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          {</span></span>
<span class="line"><span style="color:#E1E4E8;">            loader: </span><span style="color:#9ECBFF;">&#39;eslint-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">//如果代码有一些比较浅显的问题，eslint-loader将会帮助我们自动修复</span></span>
<span class="line"><span style="color:#E1E4E8;">              fix: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">//降低eslint在打包过程中对项目性能的损耗</span></span>
<span class="line"><span style="color:#E1E4E8;">              cache: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//强制eslint-loader先执行</span></span>
<span class="line"><span style="color:#E1E4E8;">            fore: </span><span style="color:#9ECBFF;">&#39;pre&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">js</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        exclude:</span><span style="color:#032F62;"> /node_modules/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        use: [</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&#39;babel-loader&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          {</span></span>
<span class="line"><span style="color:#24292E;">            loader: </span><span style="color:#032F62;">&#39;eslint-loader&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            options: {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">//如果代码有一些比较浅显的问题，eslint-loader将会帮助我们自动修复</span></span>
<span class="line"><span style="color:#24292E;">              fix: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">//降低eslint在打包过程中对项目性能的损耗</span></span>
<span class="line"><span style="color:#24292E;">              cache: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//强制eslint-loader先执行</span></span>
<span class="line"><span style="color:#24292E;">            fore: </span><span style="color:#032F62;">&#39;pre&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h1 id="🏎️-六、webpack-性能优化" tabindex="-1">🏎️ 六、Webpack 性能优化 <a class="header-anchor" href="#🏎️-六、webpack-性能优化" aria-label="Permalink to &quot;🏎️ 六、Webpack 性能优化&quot;">​</a></h1><p>细心的小伙伴可能已经发现，webpack 的打包速度有时候可能会有一点点慢。这间接地，会浪费我们很多不该浪费的时间。所以，接下来就来谈谈，提升 <code>Webpack</code> 打包速度的几种方法。</p><h2 id="_1-跟上技术的迭代-node-npm-yarn" tabindex="-1">1. 跟上技术的迭代(Node,Npm,Yarn) <a class="header-anchor" href="#_1-跟上技术的迭代-node-npm-yarn" aria-label="Permalink to &quot;1. 跟上技术的迭代(Node,Npm,Yarn)&quot;">​</a></h2><p>如果我们想提升 <code>webpack</code> 的打包速度，我们可以升级 <code>webpack</code> 的版本，或者升级我们的 node、npm 管理器或者 yarn 的版本。</p><p>那为什么升级这些工具可以提升 <code>webpack</code> 的打包速度呢。</p><p>大家想一下， <code>webpack</code> 在做每一个版本的更新时，内部肯定会做很多版本的优化，因此，当我们做 <code>webpack</code> 的版本更新时，在速度上肯定会有所提升。 <code>node</code> 、 <code>npm</code> 、 <code>yarn</code> 的更新也是同样的道理。</p><p>试想一下，如果不提升，那它升级的意义又在哪呢？对吧。</p><h2 id="_2-在尽可能少的模块上应用-loader" tabindex="-1">2. 在尽可能少的模块上应用 Loader <a class="header-anchor" href="#_2-在尽可能少的模块上应用-loader" aria-label="Permalink to &quot;2. 在尽可能少的模块上应用 Loader&quot;">​</a></h2><p>一般情况下，第三方模块的库都是已经进行打包编译过的，所以我们需要在引入 <code>loader</code> 来进行编译时，对 <code>node_module</code> 的文件给忽略掉，或者只在某个文件夹下使用某个 <code>loader</code> ，以此来增加我们的打包速度。我们可以在 <code>webpack.config.js</code> 中进行配置，<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">js</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        exclude:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//或者以下这种方式-&gt;include</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//include: path.resolve(__dirname, &#39;../src&#39;),</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="color:#E1E4E8;">          {</span></span>
<span class="line"><span style="color:#E1E4E8;">            loader: </span><span style="color:#9ECBFF;">&#39;babel-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">js</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        exclude:</span><span style="color:#032F62;"> /node_modules/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//或者以下这种方式-&gt;include</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//include: path.resolve(__dirname, &#39;../src&#39;),</span></span>
<span class="line"><span style="color:#24292E;">        use: [</span></span>
<span class="line"><span style="color:#24292E;">          {</span></span>
<span class="line"><span style="color:#24292E;">            loader: </span><span style="color:#032F62;">&#39;babel-loader&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>当然，依据上面这个思路，还有其他的 <code>loader</code> 也都有其相对应的注意事项，这里不再展开细述。</p><h2 id="_3-合理使用插件" tabindex="-1">3. 合理使用插件 <a class="header-anchor" href="#_3-合理使用插件" aria-label="Permalink to &quot;3. 合理使用插件&quot;">​</a></h2><p>插件要合理的使用，不要使用那些冗余的，没有意义的插件。同时呢，也要选择那些，性能比较好的，官方认可的插件来使用，这样，可以有效的来提升 <code>webpack</code> 的打包速度。</p><h2 id="_4-resolve-参数合理配置" tabindex="-1">4. resolve 参数合理配置 <a class="header-anchor" href="#_4-resolve-参数合理配置" aria-label="Permalink to &quot;4. resolve 参数合理配置&quot;">​</a></h2><h3 id="_1-常见配置" tabindex="-1">（1）常见配置 <a class="header-anchor" href="#_1-常见配置" aria-label="Permalink to &quot;（1）常见配置&quot;">​</a></h3><p>有时候，我们想要对我们引入的文件进行一些<strong>自定义的配置</strong>，该怎么处理呢？<strong>具体配置如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  resolve: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    extensions: [</span><span style="color:#9ECBFF;">&#39;js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;jsx&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 1.当你只引入一个目录时，比如 import Child from &#39;./child/child&#39; ，</span></span>
<span class="line"><span style="color:#6A737D;">     * 这个时候webpack不知道我们具体是要引入哪个文件，</span></span>
<span class="line"><span style="color:#6A737D;">     * 那么会先去找index文件，如果找不到，那它会继续去找child文件</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    mainFiles: [</span><span style="color:#9ECBFF;">&#39;index&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;child&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * alias, 顾名思义是别名。</span></span>
<span class="line"><span style="color:#6A737D;">     * 比如，想要将某个文件的引入方式改为自己的名字</span></span>
<span class="line"><span style="color:#6A737D;">     * import Child from &#39;./Child&#39; -&gt; import Child from &#39;monday&#39;</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    alias: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      monday: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;../src/Child&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  resolve: {</span></span>
<span class="line"><span style="color:#24292E;">    extensions: [</span><span style="color:#032F62;">&#39;js&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;jsx&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 1.当你只引入一个目录时，比如 import Child from &#39;./child/child&#39; ，</span></span>
<span class="line"><span style="color:#6A737D;">     * 这个时候webpack不知道我们具体是要引入哪个文件，</span></span>
<span class="line"><span style="color:#6A737D;">     * 那么会先去找index文件，如果找不到，那它会继续去找child文件</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    mainFiles: [</span><span style="color:#032F62;">&#39;index&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;child&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * alias, 顾名思义是别名。</span></span>
<span class="line"><span style="color:#6A737D;">     * 比如，想要将某个文件的引入方式改为自己的名字</span></span>
<span class="line"><span style="color:#6A737D;">     * import Child from &#39;./Child&#39; -&gt; import Child from &#39;monday&#39;</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    alias: {</span></span>
<span class="line"><span style="color:#24292E;">      monday: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;../src/Child&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>接下来对以上的几个参数进行详细讲解。</p><h3 id="_2-参数讲解" tabindex="-1">（2）参数讲解 <a class="header-anchor" href="#_2-参数讲解" aria-label="Permalink to &quot;（2）参数讲解&quot;">​</a></h3><p><strong>1）extensions</strong></p><ul><li>比如当引入 <code>import Child from &#39;./child/child&#39;</code> 时，会先去找 <code>&#39;./child/child.js&#39;</code> 文件，找不到再去找 <code>&#39;./child/child.jsx&#39;</code> 文件。</li><li>一般不配置 css 和图片文件，因为 css 和图片可能数量会比较多，相应的会去执行很多次查找。间接地，本来想提升性能，结果又变成了浪费性能了。</li><li>所以，如果是像 <code>css</code> 和 <code>jpg</code> 等之类的资源文件，应该进行显式的引入；如果是像 <code>js</code> 和 <code>jsx</code> 之类的逻辑文件，可以在 <code>extesions</code> 中配置，进行显式的引入。</li></ul><p><strong>2）mainFiles</strong></p><p>当你只引入一个目录时，比如 <code>import Child from &#39;./child/child&#39;</code> ，这个时候 <code>webpack</code> 不知道我们具体是要引入哪个文件，那么会先去找 <code>index</code> 文件，如果找不到，那它会继续去找 <code>child</code> 文件。</p><p><strong>3）alias</strong></p><ul><li><code>alias</code> , 顾名思义是<strong>别名</strong>。比如，想要将某个文件的引入方式改为自己的名字 <strong>→</strong> <code>import Child from &#39;./Child&#39; -&gt; import Child from &#39;monday&#39;</code> 。</li><li>常用于多层级目录的情况下。</li></ul><h2 id="_5-使用-dllplugin-提高打包速度" tabindex="-1">5. 使用 DllPlugin 提高打包速度 <a class="header-anchor" href="#_5-使用-dllplugin-提高打包速度" aria-label="Permalink to &quot;5. 使用 DllPlugin 提高打包速度&quot;">​</a></h2><p>有时候，我们希望引入的第三方模块，只在第一次做打包的时候进行分析，而后续再做打包时就不要再进行分析了。那该怎么处理呢？</p><p><strong>第一步：</strong> 新建 <code>webpack.dll.js</code> 文件，并进行配置。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">webpack</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;webpack&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//此处填写我们想要单独进行打包的第三方库名</span></span>
<span class="line"><span style="color:#E1E4E8;">    vendors: [</span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;react-dom&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;lodash&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;[name].dll.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;../dll&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*用library把第三方模块里面的所有代码，</span></span>
<span class="line"><span style="color:#6A737D;">        通过全局变量的方式暴露出去*/</span></span>
<span class="line"><span style="color:#E1E4E8;">    library: </span><span style="color:#9ECBFF;">&#39;[name]&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*暴露完成之后，借助DllPlugin插件对暴露出来的模块代码进行分析，最终生成manifest.json的文件 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> webpack.</span><span style="color:#B392F0;">DllPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//对生成的vendors的库进行DllPlugin的分析(文件映射)</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&#39;[name]&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 分析结果所放的路径，分析之后结合全局变量，在common.js中进行配置</span></span>
<span class="line"><span style="color:#E1E4E8;">      path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;../dll/[name].manifest.json&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">webpack</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;webpack&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  mode: </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  entry: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//此处填写我们想要单独进行打包的第三方库名</span></span>
<span class="line"><span style="color:#24292E;">    vendors: [</span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;react-dom&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;lodash&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  output: {</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">&#39;[name].dll.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    path: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;../dll&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*用library把第三方模块里面的所有代码，</span></span>
<span class="line"><span style="color:#6A737D;">        通过全局变量的方式暴露出去*/</span></span>
<span class="line"><span style="color:#24292E;">    library: </span><span style="color:#032F62;">&#39;[name]&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*暴露完成之后，借助DllPlugin插件对暴露出来的模块代码进行分析，最终生成manifest.json的文件 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> webpack.</span><span style="color:#6F42C1;">DllPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//对生成的vendors的库进行DllPlugin的分析(文件映射)</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&#39;[name]&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 分析结果所放的路径，分析之后结合全局变量，在common.js中进行配置</span></span>
<span class="line"><span style="color:#24292E;">      path: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;../dll/[name].manifest.json&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p><strong>第二步：</strong> 安装 <code>add-asset-html-webpack-plugin</code> 插件。<strong>具体命令如下：</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add-asset-html-webpack-plugin</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add-asset-html-webpack-plugin</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>第三步：</strong> 配置 <code>webpack.common.js</code> 文件。<strong>具体配置如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">AddAssetHtmlWebpackPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;add-asset-html-webpack-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">webpack</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;webpack&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    main: </span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        template: </span><span style="color:#9ECBFF;">&#39;src/index.html&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      }),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 指的是要往HtmlWebpackPlugin插件生成的index.html中添加一些内容</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddAssetHtmlWebpackPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        filepath: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;../dll/vendors.dll.js&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      }),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 1.使用DllReferencePlugin插件，</span></span>
<span class="line"><span style="color:#6A737D;">       * 这个插件会到&#39;../dll/vendors.manifest.json&#39;中找第三方模块的映射关系，</span></span>
<span class="line"><span style="color:#6A737D;">       * 如果能找到映射关系，那么webpack就会知道，这个第三方模块没有必要再打包进来了，</span></span>
<span class="line"><span style="color:#6A737D;">       * 直接从vendors.dll.js中拿过来用就可以了</span></span>
<span class="line"><span style="color:#6A737D;">       * 2.如果发现并不再映射关系里面，那么才会再到node_modules中去找</span></span>
<span class="line"><span style="color:#6A737D;">       *</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> webpack.</span><span style="color:#B392F0;">DllReferencePlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        manifest: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;../dll/vendors.manifest.json&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">AddAssetHtmlWebpackPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;add-asset-html-webpack-plugin&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">webpack</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;webpack&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  entry: {</span></span>
<span class="line"><span style="color:#24292E;">    main: </span><span style="color:#032F62;">&#39;./src/index.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    plugins: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HtmlWebpackPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        template: </span><span style="color:#032F62;">&#39;src/index.html&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      }),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 指的是要往HtmlWebpackPlugin插件生成的index.html中添加一些内容</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddAssetHtmlWebpackPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        filepath: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;../dll/vendors.dll.js&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      }),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 1.使用DllReferencePlugin插件，</span></span>
<span class="line"><span style="color:#6A737D;">       * 这个插件会到&#39;../dll/vendors.manifest.json&#39;中找第三方模块的映射关系，</span></span>
<span class="line"><span style="color:#6A737D;">       * 如果能找到映射关系，那么webpack就会知道，这个第三方模块没有必要再打包进来了，</span></span>
<span class="line"><span style="color:#6A737D;">       * 直接从vendors.dll.js中拿过来用就可以了</span></span>
<span class="line"><span style="color:#6A737D;">       * 2.如果发现并不再映射关系里面，那么才会再到node_modules中去找</span></span>
<span class="line"><span style="color:#6A737D;">       *</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> webpack.</span><span style="color:#6F42C1;">DllReferencePlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        manifest: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;../dll/vendors.manifest.json&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      }),</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p><strong>第四步：</strong> 配置 <code>package.json</code> 文件。<strong>具体代码如下：</strong></p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;build:dll&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;webpack --config ./build/webpack.dll.js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;build:dll&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;webpack --config ./build/webpack.dll.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通过运行 <code>npm run build:dll</code> 命令，来实现对第三方库的打包。</p><h2 id="_6-控制包文件大小" tabindex="-1">6. 控制包文件大小 <a class="header-anchor" href="#_6-控制包文件大小" aria-label="Permalink to &quot;6. 控制包文件大小&quot;">​</a></h2><p>在我们做项目打包时，我们应该让我们打包生成的文件尽可能的小。有时我们在写代码的时候，经常会在页面里面引入一些没有用的模块，也就是引入一些我们使用的模块。</p><p>这个时候如果你没有配置 <code>Tree-Shaking</code> ，就会很容易造成打包的时候，出现大量冗余的代码。这些冗余代码呢，间接地，就会拖累我们 <code>webpack</code> 的打包速度。</p><p>所以呢，我们在做打包时，要控制好文件的大小。<strong>具体步骤参考如下：</strong></p><ul><li>配置 <code>Tree-shaking</code> ；</li><li>通过 <code>SplittingChunk</code> 来将一个大的文件分割成多个小的文件。</li></ul><h2 id="_7-多进程打包" tabindex="-1">7. 多进程打包 <a class="header-anchor" href="#_7-多进程打包" aria-label="Permalink to &quot;7. 多进程打包&quot;">​</a></h2><p><code>webpack</code> 是通过 node 来运行的，所以它的打包过程是单线程的。那有时候呢，我们也可以借助 <code>node</code> 里面的多进程，来帮助我们提升 <code>webpack</code> 的打包速度。</p><p>常见工具有 <code>thread-loader</code> ， <code>parallel-webpack</code> ， <code>happypack</code> 等工具，大家可以依据自身需求查找相关资料，选出最适合自己项目的工具，进行打包。这一块不再进行详细讲解~</p><h2 id="_8-合理使用-sourcemap" tabindex="-1">8. 合理使用 sourceMap <a class="header-anchor" href="#_8-合理使用-sourcemap" aria-label="Permalink to &quot;8. 合理使用 sourceMap&quot;">​</a></h2><p>通常情况下， <code>sourceMap</code> 越详细，那么打包的速度就会越慢。所以在做打包的时候，要根据当前是开发环境还是生产环境，选出最合适的 <code>sourceMap</code> 配置，来生成我们对应的代码调错文件。</p><p>这样，一方面能保证我们即使发现代码里的错误问题。另一方面呢，也可以尽可能地提升打包速度。</p><h2 id="_9-结合-stats-分析打包结果" tabindex="-1">9. 结合 stats 分析打包结果 <a class="header-anchor" href="#_9-结合-stats-分析打包结果" aria-label="Permalink to &quot;9. 结合 stats 分析打包结果&quot;">​</a></h2><p>在打包项目时，我们可以通过命令，来生成这次打包情况的 <code>stats</code> 文件，之后呢，通过借助一些线上或者本地的打包分析工具，来达到分析我们本次打包过程中的打包情况。</p><p>比如说，分析哪个模块打包的时间比较长，哪个模块打包分析的时间比较短等等内容，依据具体的情况进行优化。</p><h2 id="_10-开发环境内存编译" tabindex="-1">10. 开发环境内存编译 <a class="header-anchor" href="#_10-开发环境内存编译" aria-label="Permalink to &quot;10. 开发环境内存编译&quot;">​</a></h2><p>使用 <code>webpackDevServer</code> 来进行编译，它不会把打包生成的文件放在 <code>dist</code> 目录中去，而是把其放到了我们电脑的内存中。</p><h2 id="_11-开发环境无用插件剔除" tabindex="-1">11. 开发环境无用插件剔除 <a class="header-anchor" href="#_11-开发环境无用插件剔除" aria-label="Permalink to &quot;11. 开发环境无用插件剔除&quot;">​</a></h2><p>比如说，我们在开发环境的情况下，并不需要对代码进行压缩。因此，对应的压缩插件我们就不要在开发环境中配置，只在生产环境中配置就好了。这样，可以减少一些不必要的打包时间。</p><h1 id="🏍️-七、多页面打包配置" tabindex="-1">🏍️ 七、多页面打包配置 <a class="header-anchor" href="#🏍️-七、多页面打包配置" aria-label="Permalink to &quot;🏍️ 七、多页面打包配置&quot;">​</a></h1><p>通常情况来说，但凡我们在做打包的时候，基本上都是对单页面应用做打包。什么是单页面呢，也就是只有一个 <code>index.html</code> 文件。像目前比较主流的框架， <code>vue</code> 和 <code>react</code> 等框架，都是单页面应用。但是如果像一些比较老的框架，比如 <code>jquery</code> 和 <code>zepto</code> ，可能就需要进行多页面应用打包。</p><p>因此，顺着这个话题，我们来谈谈，在 <code>webpack</code> 中，如何对多页面应用，进行打包配置。</p><p>我们在 <code>webpack.common.js</code> 中进行配置，<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;html-webpack-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//引入多个入口文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    main: </span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    list: </span><span style="color:#9ECBFF;">&#39;./src/list.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      template: </span><span style="color:#9ECBFF;">&#39;src/index.html&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      filename: </span><span style="color:#9ECBFF;">&#39;index.html&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//chunk表明这些html文件要引入的文件有哪些</span></span>
<span class="line"><span style="color:#E1E4E8;">      chunks: [</span><span style="color:#9ECBFF;">&#39;runtime&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;vendors&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;main&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      template: </span><span style="color:#9ECBFF;">&#39;src/index.html&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      filename: </span><span style="color:#9ECBFF;">&#39;list.html&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      chunks: [</span><span style="color:#9ECBFF;">&#39;runtime&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;vendors&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;list&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HtmlWebpackPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;html-webpack-plugin&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  entry: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//引入多个入口文件</span></span>
<span class="line"><span style="color:#24292E;">    main: </span><span style="color:#032F62;">&#39;./src/index.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    list: </span><span style="color:#032F62;">&#39;./src/list.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HtmlWebpackPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      template: </span><span style="color:#032F62;">&#39;src/index.html&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      filename: </span><span style="color:#032F62;">&#39;index.html&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//chunk表明这些html文件要引入的文件有哪些</span></span>
<span class="line"><span style="color:#24292E;">      chunks: [</span><span style="color:#032F62;">&#39;runtime&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;vendors&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;main&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HtmlWebpackPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      template: </span><span style="color:#032F62;">&#39;src/index.html&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      filename: </span><span style="color:#032F62;">&#39;list.html&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      chunks: [</span><span style="color:#032F62;">&#39;runtime&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;vendors&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;list&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>通过以上代码我们可以知道，增加 <code>entry</code> 和 <code>plugins</code> 的配置，来增加多个入口页面，从而达到了<strong>多页面应用</strong>配置的效果。</p><h1 id="🛵-八、结束语" tabindex="-1">🛵 八、结束语 <a class="header-anchor" href="#🛵-八、结束语" aria-label="Permalink to &quot;🛵 八、结束语&quot;">​</a></h1><p>通过上文的讲解，相信大家对 <code>webpack</code> 在一些场景中的实战配置有了一定的了解。上面讲述的也是比较浅显的内容，大家可以根据相对应的知识点，进行知识面的拓宽，以便更好的应用到实际的项目当中。</p><p>到这里，关于 <code>webpack</code> 的实战案例配置就讲解结束啦！希望对大家有帮助~</p><p>如文章有误或有不理解的地方，欢迎小伙伴们评论区留言哦 💬</p><p>本文代码已上传至公众号，后台回复关键词 <code>webpack</code> 即可获取~</p><h1 id="🐣-彩蛋-one-more-thing" tabindex="-1">🐣 彩蛋 One More Thing <a class="header-anchor" href="#🐣-彩蛋-one-more-thing" aria-label="Permalink to &quot;🐣 彩蛋 One More Thing&quot;">​</a></h1><h2 id="往期推荐" tabindex="-1">（：往期推荐 <a class="header-anchor" href="#往期推荐" aria-label="Permalink to &quot;（：往期推荐&quot;">​</a></h2><ul><li>webpack 入门基础知识 👉<a href="https://blog.csdn.net/weixin_44803753/article/details/118728201" target="_blank" rel="noreferrer">不会 webpack 的前端可能是捡来的，万字总结 webpack 的超入门核心知识</a></li><li>webpack 入门进阶知识 👉<a href="https://blog.csdn.net/weixin_44803753/article/details/118885391" target="_blank" rel="noreferrer">webpack 入门核心知识还看不过瘾？速来围观进阶知识</a></li></ul>`,172),o=[e];function c(r,t,i,E,y,d){return n(),a("div",null,o)}const m=s(p,[["render",c]]);export{u as __pageData,m as default};
