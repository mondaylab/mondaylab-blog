import{_ as s,c as n,o as a,N as l}from"./chunks/framework.6510d215.js";const C=JSON.parse('{"title":"栈在前端中的应用，顺便再了解下深拷贝和浅拷贝！","description":"","frontmatter":{"title":"栈在前端中的应用，顺便再了解下深拷贝和浅拷贝！","author":"周一","date":"2021-05-17","categories":["前端开发"],"tags":["数构与前端"],"sidebar":"auto"},"headers":[{"level":1,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":1,"title":"一、栈是什么","slug":"一、栈是什么","link":"#一、栈是什么","children":[]},{"level":1,"title":"二、栈的应用场景","slug":"二、栈的应用场景","link":"#二、栈的应用场景","children":[]},{"level":1,"title":"三、前端与栈：深拷贝与浅拷贝","slug":"三、前端与栈-深拷贝与浅拷贝","link":"#三、前端与栈-深拷贝与浅拷贝","children":[{"level":2,"title":"1、JS 数据类型","slug":"_1、js-数据类型","link":"#_1、js-数据类型","children":[{"level":3,"title":"（1）js 数据类型的分类","slug":"_1-js-数据类型的分类","link":"#_1-js-数据类型的分类","children":[]},{"level":3,"title":"（2）js 数据类型的定义和存储方式","slug":"_2-js-数据类型的定义和存储方式","link":"#_2-js-数据类型的定义和存储方式","children":[]},{"level":3,"title":"（3）js 数据类型的判断方式","slug":"_3-js-数据类型的判断方式","link":"#_3-js-数据类型的判断方式","children":[]}]},{"level":2,"title":"2、深究浅拷贝和深拷贝","slug":"_2、深究浅拷贝和深拷贝","link":"#_2、深究浅拷贝和深拷贝","children":[{"level":3,"title":"（1）浅拷贝","slug":"_1-浅拷贝","link":"#_1-浅拷贝","children":[]},{"level":3,"title":"（2）深拷贝","slug":"_2-深拷贝","link":"#_2-深拷贝","children":[]}]}]},{"level":1,"title":"四、前端与栈：函数调用堆栈","slug":"四、前端与栈-函数调用堆栈","link":"#四、前端与栈-函数调用堆栈","children":[]},{"level":1,"title":"五、写在最后","slug":"五、写在最后","link":"#五、写在最后","children":[]}],"relativePath":"column/Algorithm/001_Stack.md","lastUpdated":1659789425000}'),p={name:"column/Algorithm/001_Stack.md"},o=l(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p><code>栈</code> 在日常生活中的应用非常广泛，比如我们最熟悉不过的十进制转二进制、迷宫求解等等问题。同时，它在前端中的应用也非常广泛，很多小伙伴都会误以为 <code>栈</code> 在前端中的应用很少，但殊不知的是，我们写的每一个程序，基本上都会用到 <code>栈</code> 这个数据结构。比如，函数调用堆栈、数据的深拷贝和浅拷贝……。</p><p>所以呢，对于一个前端工程师来说， <code>栈</code> 结构是一个必学的知识点。在接下来的这篇文章中，将讲解关于 <code>栈</code> 在前端中的应用。</p><h1 id="一、栈是什么" tabindex="-1">一、栈是什么 <a class="header-anchor" href="#一、栈是什么" aria-label="Permalink to &quot;一、栈是什么&quot;">​</a></h1><ul><li>栈是一种只能在<strong>表的一端（栈顶）<strong>进行插入和删除运算的</strong>线性表</strong>；</li><li>只能在<strong>栈顶</strong>运算，且访问结点时依照<strong>后进先出</strong> (LIFO) 或<strong>先进后出</strong> (FILO) 的原则。</li></ul><h1 id="二、栈的应用场景" tabindex="-1">二、栈的应用场景 <a class="header-anchor" href="#二、栈的应用场景" aria-label="Permalink to &quot;二、栈的应用场景&quot;">​</a></h1><ul><li>需要<strong>后进先出</strong>的场景；</li><li>比如：十进制转二进制、迷宫求解、马踏棋盘、判断字符串是否有效、函数调用堆栈……。</li></ul><h1 id="三、前端与栈-深拷贝与浅拷贝" tabindex="-1">三、前端与栈：深拷贝与浅拷贝 <a class="header-anchor" href="#三、前端与栈-深拷贝与浅拷贝" aria-label="Permalink to &quot;三、前端与栈：深拷贝与浅拷贝&quot;">​</a></h1><h2 id="_1、js-数据类型" tabindex="-1">1、JS 数据类型 <a class="header-anchor" href="#_1、js-数据类型" aria-label="Permalink to &quot;1、JS 数据类型&quot;">​</a></h2><p>谈到堆栈，我们需要先来了解一下关于 <code>js</code> 的两种数据类型。</p><h3 id="_1-js-数据类型的分类" tabindex="-1">（1）js 数据类型的分类 <a class="header-anchor" href="#_1-js-数据类型的分类" aria-label="Permalink to &quot;（1）js 数据类型的分类&quot;">​</a></h3><p>首先，JavaScript 中的数据类型分为<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p><p>了解完分类以后，相信很多小伙伴心里有一个疑惑：这两个数据类型是什么呢？且在内存中是存放在哪里呢？</p><h3 id="_2-js-数据类型的定义和存储方式" tabindex="-1">（2）js 数据类型的定义和存储方式 <a class="header-anchor" href="#_2-js-数据类型的定义和存储方式" aria-label="Permalink to &quot;（2）js 数据类型的定义和存储方式&quot;">​</a></h3><p><strong>基本数据类型：</strong></p><p>基本数据类型，是指 <code>Numer</code> 、 <code>Boolean</code> 、 <code>String</code> 、 <code>null</code> 、 <code>undefined</code> 、 <code>Symbol（ES6新增的）</code> 、 <code>BigInt（ES2020）</code> 等值，它们在内存中都是存储在 <strong>栈</strong> 中的，即直接访问该变量就可以得到存储在 <strong>栈</strong> 中的对应该变量的值。</p><p>若将一个变量的值赋值给另一个变量，则这两个变量在内存中是独立的，修改其中任意一个变量的值，不会影响另一个变量。这就是基本数据类型。</p><p><strong>引用数据类型：</strong></p><p>那引用数据类型呢，是指 <code>Object</code> 、 <code>Array</code> 、 <code>Function</code> 等值，他们在内存中是存在于 <strong>栈和堆</strong> 当中的，即我们要访问到引用类型的值时，需要先访问到该变量在 <strong>栈</strong> 中的地址（这个地址指向堆中的值），然后再通过这个地址，访问到存放在 <strong>堆</strong> 中的数据。这就是引用数据类型。</p><p>这样说可能有点抽象，让我们用一张图来理解一下。</p><p><img src="https://img-blog.csdnimg.cn/20210514123105988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="基本数据类型和引用数据类型"></p><p>从上图中可以看到， <code>name</code> 和 <code>age</code> 的值都是基本数据类型，所以他们指向程序中 <strong>栈</strong> 的位置。而 <code>like</code> 是数组类型，也就是引用数据类型，所以在 <strong>栈</strong> 中，它先存放了一个 <code>like</code> 的地址，之后再把 <code>like</code> 对应的值，存放到 <strong>堆</strong> 当中。</p><p>了解完数据类型和其存储方式后，在面试中，还有可能被问到如何判断某一个数据的类型是什么？什么意思呢？比如说，给你一个数字 <code>7</code> ，需要你来判断它是什么，我们都知道它是 Number 类型，但很多时候止步于如何做才能判断它是一个 Number 类型。接下来将详细介绍三种判断数据类型的方法。</p><h3 id="_3-js-数据类型的判断方式" tabindex="-1">（3）js 数据类型的判断方式 <a class="header-anchor" href="#_3-js-数据类型的判断方式" aria-label="Permalink to &quot;（3）js 数据类型的判断方式&quot;">​</a></h3><p>常用判断方式：typeof、instanceof、===</p><p><strong>1）typeof：</strong></p><p><strong>定义</strong>：返回数据类型的字符串表达（小写）</p><p><strong>用法</strong>：typeof + 变量</p><p><strong>可以判断</strong>：</p><ul><li><code>undefined</code> / 数值 / 字符串 / 布尔值 / <code>function</code> （ 返回 <code>undefined</code> / <code>number</code> / <code>string</code> / <code>boolean</code> / <code>function</code> ）</li><li><code>null</code> 、 <code>object</code> 与 <code>array</code> （null、array、object 都会返回 <code>object</code> ）</li></ul><p><strong>以下给出代码演示：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(typeof &quot;Tony&quot;);                // 返回 string</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(typeof 5.01);                  // 返回 number</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(typeof false);                 // 返回 boolean</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(typeof undefined);             // 返回 undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(typeof null);                  // 返回 object</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(typeof [1,2,3,4]);             // 返回 object</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(typeof </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">name:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> age:</span><span style="color:#F78C6C;">34</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">); // 返回 object</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>2）instanceof：</strong></p><p><strong>定义</strong>：判断对象的具体类型</p><p><strong>用法</strong>：b instanceof A → b 是否是 A 的实例对象</p><p><strong>可以判断</strong>：</p><ul><li><p>专门用来判断对象数据的类型: <code>Object</code> , <code>Array</code> 与 <code>Function</code></p></li><li><p>判断 <code>String</code> ，<code>Number</code> ，<code>Boolean</code> 这三种类型的数据时，直接赋值为 <code>false</code> ，调用<strong>构造函数</strong>创建的数据为 <code>true</code></p></li></ul><p><strong>以下给出代码演示：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  let str = new String(&quot;hello world&quot;) //console.log(str instanceof String); →</span></span>
<span class="line"><span style="color:#A6ACCD;">  true str = &quot;hello world&quot; //console.log(str instanceof String); → false let num</span></span>
<span class="line"><span style="color:#A6ACCD;">  = new Number(44) //console.log(num instanceof Number); → true num = 44</span></span>
<span class="line"><span style="color:#A6ACCD;">  //console.log(num instanceof Number); → false let bool = new Boolean(true)</span></span>
<span class="line"><span style="color:#A6ACCD;">  //console.log(bool instanceof Boolean); → true bool = true //console.log(bool</span></span>
<span class="line"><span style="color:#A6ACCD;">  instanceof Boolean); → false</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    let items = [];</span></span>
<span class="line"><span style="color:#A6ACCD;">    let object = </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    function reflect(value) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        return value;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(items instanceof Array);        // true</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(items instanceof Object);       // true</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(object instanceof Object);      // true</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(object instanceof Array);       // false</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(reflect instanceof Function);   // true</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(reflect instanceof Object);     // true</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>3）===：</strong></p><p><strong>可以判断</strong>：undefined，null</p><p><strong>以下给出代码演示：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  let str; console.log(typeof str, str === undefined); //&#39;undefined&#39;, true let</span></span>
<span class="line"><span style="color:#A6ACCD;">  str2 = null; console.log(typeof str2, str2 === null); // &#39;object&#39;, true</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>讲到这里，我们了解了 js 的两种数据类型，以及两种数据类型相关的存储方式和判断方式。那么，接下来将讲解他们在前端中常见的应用，深拷贝和浅拷贝。</p><h2 id="_2、深究浅拷贝和深拷贝" tabindex="-1">2、深究浅拷贝和深拷贝 <a class="header-anchor" href="#_2、深究浅拷贝和深拷贝" aria-label="Permalink to &quot;2、深究浅拷贝和深拷贝&quot;">​</a></h2><h3 id="_1-浅拷贝" tabindex="-1">（1）浅拷贝 <a class="header-anchor" href="#_1-浅拷贝" aria-label="Permalink to &quot;（1）浅拷贝&quot;">​</a></h3><p><strong>1）定义</strong></p><p>所谓浅拷贝，就是一个变量赋值给另一个变量，其中一个变量的值改变，则两个变量的值都变了，即对于浅拷贝来说，是数据在拷贝后，新拷贝的对象内部 <strong>仍然有一部分数据</strong> 会随着源对象的变化而变化。</p><p><strong>2）代码演示</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 浅拷贝-分析</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shallowCopy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">copyObj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">copyObj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">copyObj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 浅拷贝-实例</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">19</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">like</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">打篮球</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">唱歌</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">跳舞</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//将a拷贝给b</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shallowCopy</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">李四</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">like[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">打乒乓球</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    name: &#39;李四&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    age: 19,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    like: [&#39;打乒乓球&#39;, &#39;唱歌&#39;, &#39;跳舞&#39;]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(b)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    name: &#39;张三&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    age: 19,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    like: [&#39;打乒乓球&#39;, &#39;唱歌&#39;, &#39;跳舞&#39;]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p><strong>3）图例</strong></p><p>从上面中的代码可以看到，我们明明把 <code>a</code> 对象拷贝给 <code>b</code> 了，但是 <code>b</code> 最终打印出来的结果部分数据不变，部分数据却变了。这个时候很多小伙伴就很疑惑了，这究竟是为什么呢？</p><p>我们回顾上面所说到的关于 <strong>引用数据类型</strong> 的知识点，上述代码中的 <code>b</code> 中的 <code>like</code> ，是一个数组，也就是引用数据类型。我们都知道，引用数据类型的数据是存放于 <strong>栈和堆</strong> 当中的，所以上述中的 <code>like</code> 数组，我们将它视为一个地址，这个地址存放于 <strong>栈</strong> 当中，同时，这个地址里面的数据，就指向于 <strong>堆</strong> 当中。我们来看一下图例。</p><p><img src="https://img-blog.csdnimg.cn/20210514123202763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="浅拷贝"></p><p>从上图中可以看到，当对 <code>a</code> 中 <code>like</code> 的数据进行改变时，它对应的数据在 <strong>堆</strong> 中改变。而 <code>b</code> 拷贝后的 <code>like</code> 地址所指向的数据，也是跟 <code>a</code> 一样在 <strong>堆</strong> 中的位置。也就是说，<code>a</code> 和 <code>b</code> 中的 <code>like</code> 地址，它们的数据指向 <strong>堆</strong> 中的同一个位置，所以 <code>b</code> 在拷贝完数据以后，部分数据会随着 <code>a</code> 的变化而变化。这就是浅拷贝。</p><p>讲完浅拷贝，接下来来了解深拷贝。</p><h3 id="_2-深拷贝" tabindex="-1">（2）深拷贝 <a class="header-anchor" href="#_2-深拷贝" aria-label="Permalink to &quot;（2）深拷贝&quot;">​</a></h3><p><strong>1）定义</strong>：深拷贝就是，新拷贝的对象内部所有数据都是 <strong>独立存在</strong> 的，不会随着源对象的改变而改变。</p><p><strong>2）深拷贝有两种方式</strong>：递归拷贝和利用 <code>JSON</code> 函数进行深拷贝。</p><ul><li><strong>递归拷贝的实现原理是</strong>：对变量中的每个元素进行获取，若遇到基本类型值，直接获取；若遇到引用类型值，则继续对该值内部的每个元素进行获取。</li><li><strong>JSON 深拷贝的实现原理是</strong>：将变量的值转为字符串形式，然后再转化为对象赋值给新的变量。</li></ul><p><strong>3）局限性</strong>：深拷贝的局限性在于，会忽略 undefined，不能序列化函数，不能解决循环引用的对象。</p><p><strong>4）代码演示</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 深拷贝-递归函数方法分析</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">deepCopy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 判断是否为引用数据类型</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Array</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> [] </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">deepCopy</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 为基本数据类型，直接赋值返回</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 深拷贝-递归函数方法实例</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">like</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">打篮球</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">打羽毛球</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">打太极</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">deepCopy</span><span style="color:#A6ACCD;">(c)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">李四</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">like[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">打乒乓球</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(c)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    name: &#39;李四&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    age: 19,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    like: [&#39;打乒乓球&#39;, &#39;打羽毛球&#39;, &#39;打太极&#39;]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(d)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    name: &#39;张三&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    age: 19,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    like: [&#39;打篮球&#39;, &#39;打羽毛球&#39;, &#39;打太极&#39;]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 深拷贝-JSON函数方法实例</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">19</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">like</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">打篮球</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">唱歌</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">跳舞</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(c))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 注意： JSON函数做深度拷贝时不能拷贝正则表达式，Date，方法函数等</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">李四</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">like[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">打乒乓球</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(c)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    name: &#39;李四&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    age: 19,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    like: [&#39;打乒乓球&#39;, &#39;唱歌&#39;, &#39;跳舞&#39;]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(d)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    name: &#39;张三&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    age: 19,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    like: [&#39;打篮球&#39;, &#39;唱歌&#39;, &#39;跳舞&#39;]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>从上述代码中可以看到，深拷贝后的数据各自都是独立存在的，不会随着源对象的变化而变化，这就是深拷贝。不过值得注意的是，在我们平常的开发中，用的更多的是递归函数来进行深拷贝，原因在于递归函数方法的灵活性会更强一点。而 <code>JSON</code> 函数方法有很多局限性，在做深度拷贝时不能拷贝正则表达式、Date、方法函数等。</p><h1 id="四、前端与栈-函数调用堆栈" tabindex="-1">四、前端与栈：函数调用堆栈 <a class="header-anchor" href="#四、前端与栈-函数调用堆栈" aria-label="Permalink to &quot;四、前端与栈：函数调用堆栈&quot;">​</a></h1><p>在我们平常的开发中，经常会写很多函数，那函数在执行过程中，其实就是一个调用堆栈。接下来我们用一段代码来演示。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> func1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">func2</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> func2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">func3</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> func3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">5</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">func1</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//5 4 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>看到这里，很多小伙伴心中可能已经在构思整段代码的执行顺序是什么样的。接下来用一张图来展示。</p><p><img src="https://img-blog.csdnimg.cn/20210514123235249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="函数调用堆栈"></p><p>我们都知道， <code>JavaScript</code> 的执行环境是<strong>单线程</strong>的。所谓单线程是指一次只能完成一个任务，如果有多个任务，就必须排队，只有当前面一个任务完成时，才能执行后面一个任务，以此类推。上图中所演示的，即每调用一个函数，如果里面还有新的函数，那么就先把它放到调用堆栈里，等到所有任务都放满以后，开始依次执行。</p><p>而函数调用堆栈是一个典型的栈的数据结构，遵循后进先出原则，当 <code>func1</code> ， <code>func2</code> ， <code>func3</code> 依次放进调用栈后， <strong>遵循后进先出原则</strong> ，那么 <code>func3</code> 函数的内容会先被执行，之后是 <code>func2</code> ，最后是 <code>func1</code> 。这就是函数调用堆栈。</p><h1 id="五、写在最后" tabindex="-1">五、写在最后 <a class="header-anchor" href="#五、写在最后" aria-label="Permalink to &quot;五、写在最后&quot;">​</a></h1><p>栈在前端中的应用就讲到这里啦！栈在我们平常的开发中无处不在，我们写的每一个程序，基本上都会用到函数调用堆栈。且在前端的面试中，面试官也很喜欢问深拷贝和浅拷贝，大家可以对这块知识多回顾多实践。</p><p>如果有不理解或者有误的地方也欢迎私聊我或加我微信指正~</p><blockquote><ul><li>公众号：星期一研究室</li><li>微信：MondayLaboratory</li></ul></blockquote><p>创作不易，如果这篇文章对你有用，记得点个 <strong>Star</strong> 哦~</p>`,78),e=[o];function c(r,t,i,y,D,F){return a(),n("div",null,e)}const A=s(p,[["render",c]]);export{C as __pageData,A as default};
