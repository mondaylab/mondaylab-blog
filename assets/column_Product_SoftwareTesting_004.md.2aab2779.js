import{_ as s,c as n,o as a,N as l}from"./chunks/framework.6510d215.js";const d=JSON.parse('{"title":"『软件测试4』耗子尾汁！2021年了，你还不知道这4种白盒测试方法吗？","description":"","frontmatter":{"title":"『软件测试4』耗子尾汁！2021年了，你还不知道这4种白盒测试方法吗？","author":"周一","date":"2021-06-03","categories":["产品汪"],"tags":["软件测试"],"sidebar":"auto"},"headers":[{"level":1,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":1,"title":"一、白盒测试基本概念","slug":"一、白盒测试基本概念","link":"#一、白盒测试基本概念","children":[{"level":2,"title":"1、白盒测试的定义","slug":"_1、白盒测试的定义","link":"#_1、白盒测试的定义","children":[]},{"level":2,"title":"2、白盒测试的测试对象","slug":"_2、白盒测试的测试对象","link":"#_2、白盒测试的测试对象","children":[]},{"level":2,"title":"3、白盒测试的原则","slug":"_3、白盒测试的原则","link":"#_3、白盒测试的原则","children":[]},{"level":2,"title":"4、白盒测试的分类","slug":"_4、白盒测试的分类","link":"#_4、白盒测试的分类","children":[]}]},{"level":1,"title":"二、静态白盒测试","slug":"二、静态白盒测试","link":"#二、静态白盒测试","children":[{"level":2,"title":"1、代码检查法","slug":"_1、代码检查法","link":"#_1、代码检查法","children":[{"level":3,"title":"（1）代码审查的定义","slug":"_1-代码审查的定义","link":"#_1-代码审查的定义","children":[]},{"level":3,"title":"（2）代码审查的目的","slug":"_2-代码审查的目的","link":"#_2-代码审查的目的","children":[]},{"level":3,"title":"（3）代码审查的方法","slug":"_3-代码审查的方法","link":"#_3-代码审查的方法","children":[]},{"level":3,"title":"（4）代码检查规则","slug":"_4-代码检查规则","link":"#_4-代码检查规则","children":[]},{"level":3,"title":"（5）代码检查项目","slug":"_5-代码检查项目","link":"#_5-代码检查项目","children":[]}]},{"level":2,"title":"2、静态结构分析法","slug":"_2、静态结构分析法","link":"#_2、静态结构分析法","children":[{"level":3,"title":"（1）定义","slug":"_1-定义","link":"#_1-定义","children":[]},{"level":3,"title":"（2）目的","slug":"_2-目的","link":"#_2-目的","children":[]},{"level":3,"title":"（3）静态结构分析的两种方法","slug":"_3-静态结构分析的两种方法","link":"#_3-静态结构分析的两种方法","children":[]}]}]},{"level":1,"title":"三、动态白盒测试","slug":"三、动态白盒测试","link":"#三、动态白盒测试","children":[{"level":2,"title":"1、逻辑覆盖法","slug":"_1、逻辑覆盖法","link":"#_1、逻辑覆盖法","children":[{"level":3,"title":"（1）定义","slug":"_1-定义-1","link":"#_1-定义-1","children":[]},{"level":3,"title":"（2）6 种逻辑覆盖方法","slug":"_2-6-种逻辑覆盖方法","link":"#_2-6-种逻辑覆盖方法","children":[{"level":4,"title":"1）语句覆盖（SC）","slug":"_1-语句覆盖-sc","link":"#_1-语句覆盖-sc","children":[]},{"level":4,"title":"2）判定覆盖（DC）","slug":"_2-判定覆盖-dc","link":"#_2-判定覆盖-dc","children":[]},{"level":4,"title":"3）条件覆盖（CC）","slug":"_3-条件覆盖-cc","link":"#_3-条件覆盖-cc","children":[]},{"level":4,"title":"4）判定-条件覆盖（CDC）","slug":"_4-判定-条件覆盖-cdc","link":"#_4-判定-条件覆盖-cdc","children":[]},{"level":4,"title":"5）条件组合覆盖（MCC）","slug":"_5-条件组合覆盖-mcc","link":"#_5-条件组合覆盖-mcc","children":[]},{"level":4,"title":"6）路径覆盖","slug":"_6-路径覆盖","link":"#_6-路径覆盖","children":[]}]}]},{"level":2,"title":"2、基本路径测试法","slug":"_2、基本路径测试法","link":"#_2、基本路径测试法","children":[{"level":3,"title":"（1）独立路径","slug":"_1-独立路径","link":"#_1-独立路径","children":[]},{"level":3,"title":"（2）程序控制流图","slug":"_2-程序控制流图","link":"#_2-程序控制流图","children":[]},{"level":3,"title":"（3）软件复杂度","slug":"_3-软件复杂度","link":"#_3-软件复杂度","children":[]},{"level":3,"title":"（4）程序复杂度","slug":"_4-程序复杂度","link":"#_4-程序复杂度","children":[]},{"level":3,"title":"（5）环路复杂度","slug":"_5-环路复杂度","link":"#_5-环路复杂度","children":[]},{"level":3,"title":"（4）基本路径测试法","slug":"_4-基本路径测试法","link":"#_4-基本路径测试法","children":[]}]}]},{"level":1,"title":"四、写在最后","slug":"四、写在最后","link":"#四、写在最后","children":[]}],"relativePath":"column/Product/SoftwareTesting/004.md","lastUpdated":1685151998000}'),p={name:"column/Product/SoftwareTesting/004.md"},o=l(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p>在上一篇文章中，我们讲到了<a href="https://blog.csdn.net/weixin_44803753/article/details/115395928" target="_blank" rel="noreferrer">黑盒测试</a>。黑盒测试相较于白盒测试来说比较简单，不需要了解程序内部的代码，与软件的内部实现无关；而白盒测试就像是一个透明的盒子，它需要测试人员利用<strong>程序内部的逻辑结构</strong>来设计测试用例，相对于黑盒测试来说会难一些。</p><p>在下面的这篇文章中，我们将讲解白盒测试的基本概念，以及四大常用的白盒测试方法。</p><h1 id="一、白盒测试基本概念" tabindex="-1">一、白盒测试基本概念 <a class="header-anchor" href="#一、白盒测试基本概念" aria-label="Permalink to &quot;一、白盒测试基本概念&quot;">​</a></h1><h2 id="_1、白盒测试的定义" tabindex="-1">1、白盒测试的定义 <a class="header-anchor" href="#_1、白盒测试的定义" aria-label="Permalink to &quot;1、白盒测试的定义&quot;">​</a></h2><p>白盒测试又称为<strong>结构测试</strong>或<strong>逻辑驱动测试</strong>，它是把测试对象看成一个<strong>透明</strong>的盒子，它允许测试人员利用程序<strong>内部的逻辑结构</strong>设计测试用例，对程序所有逻辑路径进行测试。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270910280.png" alt="白盒测试"></p><h2 id="_2、白盒测试的测试对象" tabindex="-1">2、白盒测试的测试对象 <a class="header-anchor" href="#_2、白盒测试的测试对象" aria-label="Permalink to &quot;2、白盒测试的测试对象&quot;">​</a></h2><p>白盒测试的测试对象是基于被测试程序的<strong>源代码</strong>，而不是软件的需求规格说明书。</p><p>使用白盒测试方法时，测试人员必须全面了解程序内部逻辑结构，检查程序的<strong>内部结构</strong>，从检查程序的逻辑着手，对相关的逻辑路径进行测试，最后得出测试结果。</p><h2 id="_3、白盒测试的原则" tabindex="-1">3、白盒测试的原则 <a class="header-anchor" href="#_3、白盒测试的原则" aria-label="Permalink to &quot;3、白盒测试的原则&quot;">​</a></h2><p>采用白盒测试方法必须遵循以下原则：</p><ul><li>保证一个模块中的<strong>所有独立路径至少被测试一次</strong>。</li><li>对所有的逻辑判定均需测试<strong>取真和取假</strong>两种情况。</li><li>在上下边界及可操作范围内运行所有循环。</li><li>检查程序的内部数据结构，保证其结构的有效性。</li></ul><h2 id="_4、白盒测试的分类" tabindex="-1">4、白盒测试的分类 <a class="header-anchor" href="#_4、白盒测试的分类" aria-label="Permalink to &quot;4、白盒测试的分类&quot;">​</a></h2><p>白盒测试方法有两大类：<strong>静态测试方法</strong>和<strong>动态测试方法</strong>。</p><p><strong>静态测试：</strong> 不要求在计算机上实际执行所测试的程序，主要以一些人工的模拟技术对软件进行分析和测试，如<strong>代码检查法</strong>、<strong>静态结构分析法</strong>等；</p><p><strong>动态测试：</strong> 是通过输入一组预先按照<strong>一定的测试准则</strong>构造实际数据来动态运行程序，达到发现程序错误的过程。白盒测试中的动态分析技术主要有<strong>逻辑覆盖法</strong>和<strong>基本路径测试法</strong>。（ ★ ★ ★ ）</p><p>下面将对两种白盒测试方法进行讲解。</p><h1 id="二、静态白盒测试" tabindex="-1">二、静态白盒测试 <a class="header-anchor" href="#二、静态白盒测试" aria-label="Permalink to &quot;二、静态白盒测试&quot;">​</a></h1><h2 id="_1、代码检查法" tabindex="-1">1、代码检查法 <a class="header-anchor" href="#_1、代码检查法" aria-label="Permalink to &quot;1、代码检查法&quot;">​</a></h2><h3 id="_1-代码审查的定义" tabindex="-1">（1）代码审查的定义 <a class="header-anchor" href="#_1-代码审查的定义" aria-label="Permalink to &quot;（1）代码审查的定义&quot;">​</a></h3><p>代码审查（Code Review）是指对<strong>计算机源代码</strong>进行系统地审查，找出并修正在软件开发初期未发现的错误，提升软件质量及开发者的技术。</p><h3 id="_2-代码审查的目的" tabindex="-1">（2）代码审查的目的 <a class="header-anchor" href="#_2-代码审查的目的" aria-label="Permalink to &quot;（2）代码审查的目的&quot;">​</a></h3><p>代码审查的目的是<strong>为了产生合格的代码</strong>，<strong>检查源程序编码是否符合详细设计的编码规定</strong>，确保编码与设计的一致性和可追踪性。</p><h3 id="_3-代码审查的方法" tabindex="-1">（3）代码审查的方法 <a class="header-anchor" href="#_3-代码审查的方法" aria-label="Permalink to &quot;（3）代码审查的方法&quot;">​</a></h3><p>代码审查包括<strong>桌面检查</strong>、<strong>代码审查</strong>和<strong>走查</strong>。</p><p><strong>1）桌面检查（程序员自己检查）</strong></p><p>这是一种<strong>传统的</strong>检查方法，由程序员检查自己编写的程序。程序员在程序通过编译之后，对源程序代码进行分析、检查，并补充相关的文档，目的是发现程序中的错误。</p><p><strong>2）代码审查（审查小组通过读程序和对照错误检查表进行检查）</strong></p><p>代码审查是由若干<strong>程序员</strong>和<strong>测试员</strong>组成一个审查小组，通过阅读、讨论和争议，对程序进行静态分析的过程。<strong>具体过程如下：</strong></p><p><strong>第一步，</strong> 小组负责人提前把设计规格说明书、控制流程图、程序文本及有关要求、规范等分发给小组成员，作为审查的依据。小组成员在充分阅读这些材料后，进入审查的下一步。</p><p><strong>第二步，召开程序审查会。</strong> 每个成员将所发材料作为审查依据，但是由程序员讲解程序的结构、逻辑和源程序。在此过程中，小组成员可以提出自己的疑问；程序员在讲解自己的程序时，也能发现自己原来没有注意到的问题。</p><p><strong>注意：</strong> 在进行代码检查前应准备好需求文档、程序设计文档、程序的源代码清单、代码编码标准、代码缺陷检查表和流程图等。</p><p><strong>3）走查 （审查小组需要准备有代表性的测试用例沿程序逻辑运行）</strong></p><p>走查与代码审查基本相同，<strong>其过程分为两步：</strong></p><p><strong>第一步：</strong> 把材料先发给走查小组每个成员，让他们认真研究程序。</p><p><strong>第二步：</strong> 开会。</p><p>与代码审查不同的是，让审查小组成员“充当”计算机，即首先由测试组成员为所测程序准备一批有代表性的测试用例，提交给走查小组。走查小组开会，集体扮演计算机角色，让测试用例沿着程序的逻辑运行一遍，随时记录程序的踪迹，提供给最后阶段的分析和讨论使用。</p><h3 id="_4-代码检查规则" tabindex="-1">（4）代码检查规则 <a class="header-anchor" href="#_4-代码检查规则" aria-label="Permalink to &quot;（4）代码检查规则&quot;">​</a></h3><p>在代码检查中，需要依据被测试软件的特点，选用适当的<strong>标准</strong>与<strong>规则规范</strong>。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270911829.png" alt="代码检查规则图"></p><h3 id="_5-代码检查项目" tabindex="-1">（5）代码检查项目 <a class="header-anchor" href="#_5-代码检查项目" aria-label="Permalink to &quot;（5）代码检查项目&quot;">​</a></h3><ul><li>目录文件组织</li><li>检查函数</li><li>数据类型及变量</li><li>检查条件判断语句</li><li>检查循环体制</li><li>检查代码注释</li><li>桌面检查</li><li>其他检查</li></ul><h2 id="_2、静态结构分析法" tabindex="-1">2、静态结构分析法 <a class="header-anchor" href="#_2、静态结构分析法" aria-label="Permalink to &quot;2、静态结构分析法&quot;">​</a></h2><h3 id="_1-定义" tabindex="-1">（1）定义 <a class="header-anchor" href="#_1-定义" aria-label="Permalink to &quot;（1）定义&quot;">​</a></h3><p>在静态结构分析法中，测试人员通常通过使用测试工具分析程序源代码的系统结构、数据结构、数据接口、内部控制逻辑等内部结构，<strong>生成函数调用关系图</strong>、<strong>模块控制流图</strong>、<strong>内部文件调用关系图</strong>等各种图形、图表，清晰地标识整个软件的组成结构。</p><h3 id="_2-目的" tabindex="-1">（2）目的 <a class="header-anchor" href="#_2-目的" aria-label="Permalink to &quot;（2）目的&quot;">​</a></h3><p>通过分析这些图表，包括控制流分析、数据流分析、接口分析、表达式分析等，使其便于阅读与理解，然后可以通过分析这些图表，检查软件有没有存在缺陷或错误。</p><h3 id="_3-静态结构分析的两种方法" tabindex="-1">（3）静态结构分析的两种方法 <a class="header-anchor" href="#_3-静态结构分析的两种方法" aria-label="Permalink to &quot;（3）静态结构分析的两种方法&quot;">​</a></h3><p><strong>1）通过生成各种图表，来帮助对源程序的静态分析</strong></p><p><strong>常用的各种引用表主要有：</strong> <strong>①</strong>标号交叉引用表；<strong>②</strong>变量交叉引用表；<strong>③</strong>子程序（宏、函数）引用表；<strong>④</strong> 等价表；<strong>⑤</strong>常数表。</p><p><strong>常用的各种关系图、控制流图主要有：</strong></p><p><strong>① 函数调用关系图：</strong> 列出所有函数，用连线表示调用关系，通过应用程序各函数之间的调用关系展示了系统的结构。</p><p><strong>② 模块控制流图：</strong> 由<strong>许多结点和连接结点的边</strong>组成的图形，其中每个结点代表一条或多条语句，<strong>边表示节点间的控制流向</strong>，用于<strong>显示函数的内部逻辑结构。</strong>（★ ★ ★ ）</p><p><strong>2) 错误静态分析</strong></p><p>静态错误分析主要用于确定在源程序中<strong>是否有某类错误或“危险”结构</strong>。</p><p><strong>① 类型和单位分析：</strong> 数据类型的错误和单位上的不一致。</p><p><strong>② 引用分析：</strong> 引用异常，变量赋值先引用，或赋值未引用。</p><p><strong>③ 表达式分析：</strong> 表达式错误，不正确使用括号，数组下标越界等。</p><p><strong>④ 接口分析：</strong> 模块的接口，参数的一致性。</p><h1 id="三、动态白盒测试" tabindex="-1">三、动态白盒测试 <a class="header-anchor" href="#三、动态白盒测试" aria-label="Permalink to &quot;三、动态白盒测试&quot;">​</a></h1><h2 id="_1、逻辑覆盖法" tabindex="-1">1、逻辑覆盖法 <a class="header-anchor" href="#_1、逻辑覆盖法" aria-label="Permalink to &quot;1、逻辑覆盖法&quot;">​</a></h2><h3 id="_1-定义-1" tabindex="-1">（1）定义 <a class="header-anchor" href="#_1-定义-1" aria-label="Permalink to &quot;（1）定义&quot;">​</a></h3><p>逻辑覆盖是<strong>以程序内部的逻辑结构为基础</strong>来设计测试用例的测试技术，通过对程序内部的逻辑结构的遍历来实现程序的覆盖。它属于白盒测试中动态测试技术之一。</p><h3 id="_2-6-种逻辑覆盖方法" tabindex="-1">（2）6 种逻辑覆盖方法 <a class="header-anchor" href="#_2-6-种逻辑覆盖方法" aria-label="Permalink to &quot;（2）6 种逻辑覆盖方法&quot;">​</a></h3><p>从覆盖源程序语句的详尽程度分析，<strong>逻辑覆盖包括以下 6 种覆盖标准：</strong></p><ul><li>语句覆盖（SC）；</li><li>判定覆盖（DC）；</li><li>条件覆盖（CC）；</li><li>判定-条件覆盖（CDC）；</li><li>条件组合覆盖（MCC）；</li><li>路径覆盖。</li></ul><p>接下来将对这 6 种逻辑覆盖方法进行一一讲解。</p><h4 id="_1-语句覆盖-sc" tabindex="-1">1）语句覆盖（SC） <a class="header-anchor" href="#_1-语句覆盖-sc" aria-label="Permalink to &quot;1）语句覆盖（SC）&quot;">​</a></h4><p><strong>① 定义：</strong> 语句覆盖(Statement Coverage)的含义就<strong>是设计足够的测试用例，使得被测程序中每条语句至少执行一次</strong>。又称行覆盖、段覆盖、基本块覆盖，它是最常见的覆盖方式。</p><p><strong>② 例子展示</strong>🌰</p><p><strong>Question：</strong></p><p>如下 C 语言程序语句和对应的程序流程图：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">function</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">z</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> z</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      x</span><span style="color:#89DDFF;">=(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">/</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">     x</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270911808.png" alt="语句覆盖"></p><p>请使用<strong>语句覆盖</strong>来为该程序设计测试用例。</p><p><strong>Answer：</strong></p><p>为了使每条语句都能够至少执行一次，我们可以构造以下测试用例：</p><p>输入： <code>x=4</code> , <code>y=2</code> , <code>z=0</code></p><p>执行路径为：<code>sacbed</code></p><p>语句覆盖虽然可以测试执行语句是否被执行到，但却<strong>无法测试程序中存在的逻辑错误</strong>。因此，<strong>语句覆盖是一种弱覆盖</strong>。</p><p>例如，如果上述程序中的第一个逻辑判断符号 <code>“&amp;&amp;”</code> 误写了 <code>“||”</code> ，使用测试用例同样可以覆盖 <code>sacbed</code> 路径上的全部执行语句，但却无法发现错误。同样，如果第二个逻辑判断符号 <code>“||”</code> 误写了 <code>“&amp;&amp;”</code> ，使用同样的测试用例也可以执行 <code>sacbed</code> 路径上的全部执行语句，但却无法发现上述逻辑错误。</p><p><strong>③ 语句覆盖的目的：</strong></p><p>语句覆盖的目的是测试程序中的代码是否被执行，<strong>它只测试代码中的执行语句，这里的执行语句不包括头文件、注释、空行</strong>等。</p><p>语句覆盖在多分支的程序中，只能覆盖<strong>某一条路径</strong>，使得该路径中的每一个语句至少被执行一次，但<strong>不会考虑各种分支组合情况</strong>。</p><h4 id="_2-判定覆盖-dc" tabindex="-1">2）判定覆盖（DC） <a class="header-anchor" href="#_2-判定覆盖-dc" aria-label="Permalink to &quot;2）判定覆盖（DC）&quot;">​</a></h4><p><strong>① 定义：</strong></p><ul><li>判定覆盖(Decision Coverage)又称为<strong>分支覆盖</strong>，其原则是<strong>设计足够的测试用例</strong>，使得程序中每个判定语句的取真和取假分支<strong>至少被执行一次</strong>。</li><li>除了双值的<strong>判定语句</strong>外，还有<strong>多值判定语句</strong>，如<strong>case 语句</strong>，因此判定覆盖更一般的含义是：<strong>使得每一个判定获得每一种可能的结果至少一次</strong>。</li></ul><p><strong>② 例子展示</strong>🌰</p><p><strong>Question：</strong></p><p>如下 C 语言程序语句和对应的程序流程图：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">function</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">z</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> z</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      x</span><span style="color:#89DDFF;">=(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">/</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">     x</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270911960.png" alt="判定覆盖"></p><p>请使用<strong>判定覆盖</strong>来为该程序设计测试用例。</p><p><strong>Answer：</strong></p><p>以上述代码为例，构造以下测试用例即可实现判定覆盖标准：</p><p>输入：① <code>x=1,y=3,z=0</code> ，执行路径为 <code>sacbd</code></p><p>（判断的结果分别为<strong>T，F</strong>）</p><p>输入：② <code>x=3,y=1,z=1</code> ，执行路径为 <code>sabed</code></p><p>（判断的结果分别为<strong>F，T</strong>）</p><p>上述两组测试用例不仅满足了判定覆盖，而且满足了语句覆盖，从这一点可以看出判定覆盖比语句覆盖更强一些。所以<strong>只要满足了判定覆盖就一定满足语句覆盖，反之则不然</strong>。</p><p>判定覆盖仍然具有和语句覆盖一样无法发现逻辑判断符号 <code>“&amp;&amp;”</code> 误写了 <code>“||”</code> 的逻辑错误。</p><p>判定覆盖仅仅判断判定语句执行的最终结果而<strong>忽略每个条件的取值</strong>，所以也属于<strong>弱覆盖</strong>。</p><h4 id="_3-条件覆盖-cc" tabindex="-1">3）条件覆盖（CC） <a class="header-anchor" href="#_3-条件覆盖-cc" aria-label="Permalink to &quot;3）条件覆盖（CC）&quot;">​</a></h4><p><strong>① 定义：</strong></p><p>条件覆盖(Condition Coverage)指的是<strong>设计足够的测试用例</strong>，使判定语句中的<strong>每个逻辑条件取真值与取假值至少出现一次</strong>。</p><p>例如，对于判定语句 <code>if(a&gt;1 OR c&lt;0)</code> 中存在 <code>a&gt;1、c&lt;0</code> 两个逻辑条件，设计条件覆盖测试用例时，要保证 <code>a&gt;1、c&lt;0</code> 的“真”、“假”值至少出现一次。</p><p><strong>② 例子展示</strong>🌰</p><p><strong>Question：</strong></p><p>如下 C 语言程序语句和对应的程序流程图：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">function</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">z</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> z</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      x</span><span style="color:#89DDFF;">=(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">/</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">     x</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270911648.png" alt="条件覆盖"></p><p>请使用<strong>条件覆盖</strong>来为该程序设计测试用例。</p><p><strong>Answer：</strong></p><p>要使程序中每个判断的每个条件都至少取真值、假值一次，我们可以构造以下测试用例： 输入：① <code>x=1,y=2,z=0</code> ，执行路径为 <code>sacbed</code></p><p>（条件的结果分别为<strong>TTTF</strong>）</p><p>输入：② <code>x=2,y=1,z=1</code> ，执行路径为 <code>sabed</code></p><p>（条件的结果分别为<strong>FFFT</strong>）</p><p>从条件覆盖的测试用例可知，使用 2 个测试用例就达到了使每个逻辑条件取真值与取假值都至少出现了一次，但从测试用例的执行路径来看，<strong>条件分支覆盖的状态下仍旧不能满足判定覆盖</strong>，即没有覆盖 <code>bd</code> 这条路径。相比于语句覆盖与判定覆盖，条件覆盖达到了逻辑条件的最大覆盖率，但却不能保证判定覆盖。</p><h4 id="_4-判定-条件覆盖-cdc" tabindex="-1">4）判定-条件覆盖（CDC） <a class="header-anchor" href="#_4-判定-条件覆盖-cdc" aria-label="Permalink to &quot;4）判定-条件覆盖（CDC）&quot;">​</a></h4><p><strong>① 定义：</strong></p><ul><li>要求设计足够的测试用例，使得判定语句中<strong>所有条件的可能取值至少出现一次</strong>，同时，<strong>所有判定语句的可能结果也至少出现一次</strong>。</li><li>例如，对于判定语句 <code>if(a&gt;1 AND c&lt;1)</code> ，该判定语句有 <code>a&gt;1、c&lt;1</code> 两个条件，则在设计测试用例时，要保证 <code>a&gt;1、c&lt;1</code> 两个条件取“真”、“假”值至少一次，同时，判定语句 <code>if(a&gt;1 AND c&lt;1)</code> 取“真”、“假”也至少出现一次。</li></ul><p><strong>② 例子展示</strong>🌰</p><p><strong>Question：</strong></p><p>如下 C 语言程序语句和对应的程序流程图：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">function</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">z</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> z</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      x</span><span style="color:#89DDFF;">=(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">/</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">     x</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270911694.png" alt="判定条件覆盖"></p><p>请使用<strong>判定条件覆盖</strong>来为该程序设计测试用例。</p><p><strong>Answer：</strong></p><p>为满足判定-条件覆盖原则，我们可以构造以下测试用例：</p><p>输入：① <code>x=4,y=2,z=0</code> ，覆盖路径：<code>sacbed</code></p><p>（判断的结果分别为<strong>TT</strong>，条件的结果分别为：<strong>TTTT</strong> ）</p><p>输入：② <code>x=1,y=1,z=1</code> ，覆盖路径：<code>sabd</code></p><p>（判断的结果分别为<strong>FF</strong>，条件的结果分别为：<strong>FFFF</strong> ）</p><p>判定-条件覆盖满足了<strong>判定覆盖准则</strong>和<strong>条件覆盖准则</strong>，弥补了二者的不足。但是判定-条件覆盖不一定比条件覆盖的逻辑更强。</p><p><strong>③ 判定-条件覆盖的缺点：</strong> 没有考虑条件的组合情况。</p><h4 id="_5-条件组合覆盖-mcc" tabindex="-1">5）条件组合覆盖（MCC） <a class="header-anchor" href="#_5-条件组合覆盖-mcc" aria-label="Permalink to &quot;5）条件组合覆盖（MCC）&quot;">​</a></h4><p><strong>① 定义：</strong></p><p>条件组合(Multiple Condition Coverage)指的是设计足够的测试用例，使得<strong>每个判定中条件的各种可能组合都至少执行一次</strong>。满足了判定覆盖、条件覆盖、判定-条件覆盖准则。</p><p><strong>② 例子展示</strong>🌰</p><p><strong>Question：</strong></p><p>如下 C 语言程序语句和对应的程序流程图：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">function</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">z</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> z</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      x</span><span style="color:#89DDFF;">=(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">/</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">     x</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270911524.png" alt="条件组合覆盖"></p><p>请使用<strong>条件组合覆盖</strong>来为该程序设计测试用例。</p><p><strong>Answer：</strong></p><p>为满足<strong>条件组合覆盖</strong>原则，我们可以构造以下测试用例： 输入：① <code>x=4,y=2,z=0</code> ，覆盖路径： <code>sacbed</code> （条件的结果分别为：<strong>TTTT</strong> ）</p><p>输入： ② <code>x=1,y=2,z=1</code>，覆盖路径： <code>sabed</code> （条件的结果分别为：<strong>TFTF</strong> ）</p><p>输入：③ <code>x=2,y=1,z=0</code> ，覆盖路径： <code>sabed</code> （条件的结果分别为：<strong>FTFT</strong> ）</p><p>输入： ④ <code>x=1,y=1,z=1</code>，覆盖路径： <code>sabd</code> （条件的结果分别为：<strong>FFFF</strong> ）</p><p>由于这 4 个条件每个条件都有取“真”、“假”两个值，因此所有条件结果的组合有<strong>2<sup>4</sup>=16 种</strong>。但是，当一个程序中判定语句较多时，其条件取值的组合数目也较多。需要设计的测试用例也会增加，这样反而会使测试效率降低。</p><h4 id="_6-路径覆盖" tabindex="-1">6）路径覆盖 <a class="header-anchor" href="#_6-路径覆盖" aria-label="Permalink to &quot;6）路径覆盖&quot;">​</a></h4><p><strong>① 定义：</strong></p><p>路径覆盖指的是<strong>设计足够的测试用例</strong>，使得程序中的<strong>每一条可能组合的路径都至少执行一次</strong>。</p><p><strong>② 例子展示</strong>🌰</p><p><strong>Question：</strong></p><p>如下 C 语言程序语句和对应的程序流程图：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">function</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">z</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> z</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      x</span><span style="color:#89DDFF;">=(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)(</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">/</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">     x</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270911033.png" alt="路径覆盖"></p><p>请使用<strong>路径覆盖</strong>来为该程序设计测试用例。</p><p><strong>Answer：</strong></p><p>为满足路径覆盖原则，我们可以构造以下测试用例： 输入：① <code>x=4,y=2,z=0</code> ，覆盖路径：<code>sacbed</code></p><p>（判定的结果分别为：<strong>TT</strong> ）</p><p>输入：② <code>x=1,y=2,z=1</code>，覆盖路径： <code>sabed</code></p><p>（判定的结果分别为：<strong>FT</strong> ）</p><p>输入：③ <code>x=1,y=3,z=0</code> ，覆盖路径： <code>sacbd</code></p><p>（判定的结果分别为：<strong>TF</strong> ）</p><p>输入：④ <code>x=1,y=1,z=1</code> ，覆盖路径： <code>sabd</code></p><p>（判定的结果分别为：<strong>FF</strong> ）</p><h2 id="_2、基本路径测试法" tabindex="-1">2、基本路径测试法 <a class="header-anchor" href="#_2、基本路径测试法" aria-label="Permalink to &quot;2、基本路径测试法&quot;">​</a></h2><h3 id="_1-独立路径" tabindex="-1">（1）独立路径 <a class="header-anchor" href="#_1-独立路径" aria-label="Permalink to &quot;（1）独立路径&quot;">​</a></h3><p>独立路径是指包括一组以前没有处理的的语句或条件的一条路径。</p><p>从控制流图来看，一条独立路径是至少包含一条在其他独立路径中<strong>从未有过的边</strong>的路径。</p><h3 id="_2-程序控制流图" tabindex="-1">（2）程序控制流图 <a class="header-anchor" href="#_2-程序控制流图" aria-label="Permalink to &quot;（2）程序控制流图&quot;">​</a></h3><p><strong>1）程序控制流图的定义</strong></p><p>控制流程图是描述<strong>程序控制流</strong>的一种图示方式。<strong>（有向图）</strong></p><p><strong>2）控制流图的两种图形符号</strong></p><ul><li>图中的每一个圆圈称为流图的结点，表示一个或多个无分支的语句或源程序语句。</li><li>流图中的箭头称为边或连接，表示控制流线。</li></ul><p><strong>3）程序控制流图的 5 种基本结构</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270911103.png" alt="程序控制流图的5种基本结构"></p><p><strong>4）程序控制流图的描述</strong></p><ul><li>程序控制流图实际上可以看作是一种简化了的程序流程图。</li><li>在控制流图中，<strong>只关注程序的流程，不关心各个处理框的细节</strong>。</li><li>因此，原来程序流程图中的各个<strong>处理框（包括语句框、判断框、输入/输出框等）<strong>都被简化为</strong>结点</strong>，一般用<strong>圆圈</strong>表示，而原来程序流程图中的<strong>带有箭头的控制流</strong>变成了控制流图中的<strong>有向边</strong>。</li></ul><p><strong>5）举个栗子🌰</strong></p><p>下图是典型的程序流程图转换为相对应的流图。对（a）图所示的程序流程图进行简化，得到（b）图所示的流图。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270911699.png" alt="程序控制流图"></p><p><strong>6）注意事项</strong></p><p>在将程序流程图简化成控制流图时，应注意如下几点：</p><ul><li>一组顺序结构可以映射为一个<strong>单一的结点</strong>。</li><li>在选择多分支结构中分支的汇集处时，即使没有执行语句也应该添加一个<strong>汇聚结点</strong>。</li><li>边和结点圈定的范围叫做<strong>区域</strong>，当对区域计数时，<strong>图形外的区域也应记为一个区域（开放区域）</strong> 。</li><li>如果判断中的条件表达式是由多个逻辑运算符（OR，AND…）连接的复合条件表达式，则<strong>需要改为一系列<u>只有单个条件的嵌套</u>的判断</strong>。</li></ul><h3 id="_3-软件复杂度" tabindex="-1">（3）软件复杂度 <a class="header-anchor" href="#_3-软件复杂度" aria-label="Permalink to &quot;（3）软件复杂度&quot;">​</a></h3><ul><li><strong>软件复杂度</strong>是指理解和处理软件的难易程度。</li><li><strong>程序复杂度是软件度量的重要组成部分</strong>。</li><li><strong>度量方法：</strong> <code>McCabe</code> 度量法（环路度量）</li></ul><h3 id="_4-程序复杂度" tabindex="-1">（4）程序复杂度 <a class="header-anchor" href="#_4-程序复杂度" aria-label="Permalink to &quot;（4）程序复杂度&quot;">​</a></h3><p>环路复杂度又称为<strong>圈复杂度</strong>，是一种为<strong>程序逻辑复杂度</strong>提供定量尺度的软件度量。它可以提供程序基本路径集的<strong>独立路径数量</strong>，这是确保所有语句至少执行一次的过程所必须的<strong>最少测试用例数</strong>。常用于<strong>基本路径测试法</strong>。</p><h3 id="_5-环路复杂度" tabindex="-1">（5）环路复杂度 <a class="header-anchor" href="#_5-环路复杂度" aria-label="Permalink to &quot;（5）环路复杂度&quot;">​</a></h3><p><code>McCabe</code> 复杂性度量方式有如下三种：</p><p>V（G）= $\\begin{cases} 区域数 \\ 边数-结点数+2 \\ 判定结点数+1\\ \\end{cases}$ ​ ⭐⭐⭐</p><p><strong>1）通过控制流图的区域个数来计算</strong></p><p>公式：<code>V(G)＝区域数</code></p><p>程序的环路复杂性为控制流图的区域数（即封闭的区域数+1）。</p><p>在下图中可以看到，有 <code>1</code> 和 <code>2</code> 两个封闭区域，因此，环路复杂度 V(G)＝ 2 + 1 = 3。</p><p>（２个封闭的区域＋１个开放区域）</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270911106.png" alt="环路复杂度 1"></p><p><strong>2）通过控制流图的边数和结点数来计算</strong></p><p>公式：<code>V(G) = e - n + 2</code></p><p>其中， <code>e</code> 即 <code>edge</code> ，表示图中<strong>边的数目</strong>； <code>n</code> 即 <code>node</code> ，表示<strong>结点个数</strong>。</p><p>下图中 V(G)= e - n + 2 = ７条边 − ６个结点 + 2 = 3。</p><p>因此，环路复杂度 V(G)＝３。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270912862.png" alt="环路复杂度 2"></p><p><strong>3）通过控制流图中的判定结点个数来计算</strong></p><p>公式：<code>V(G) = P + 1</code></p><p>其中，P 表示判定结点的数目。所谓判定节点数，即有多个分支的节点，比如下图中的节点 <code>2</code> ，它可以走 3 或者 5，这个时候它就需要做判断了。所以， <code>2</code> 是一个判定节点。同样地，下面的 节点<code>3</code> 也像节点 <code>2</code> 一样分析。</p><p>因此，图中 V(G)=２个判定结点＋ 1 = 3，所以环路复杂度为３。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270912951.png" alt="环路复杂度 3"></p><p>讲到这里，我们来给<strong>环路复杂性</strong>做个小结。事实上，程序的环路复杂性给出了程序基本路径<strong>集中的独立路径条数</strong>，这是确保可执行语句<strong>至少执行一次</strong><u>所必需的测试用例数目</u>的上界。</p><p>通过对以上三个例子的了解，相信大家对环路复杂度的三种求解方式有了一个新的认识。有了上面一系列内容的铺垫，我们来开始讲解<strong>基本路径测试法</strong>。</p><h3 id="_4-基本路径测试法" tabindex="-1">（4）基本路径测试法 <a class="header-anchor" href="#_4-基本路径测试法" aria-label="Permalink to &quot;（4）基本路径测试法&quot;">​</a></h3><p><strong>1）基本路径测试法是什么</strong></p><p>路径测试就是从<strong>一个程序的入口</strong>开始，执行所经历的各个语句的完整过程。<strong>从广义的角度讲</strong>，任何有关路径分析的测试都可以被称为<strong>路径测试</strong>。</p><p>完成路径测试的理想情况就是做到<strong>路径覆盖</strong>，但对于复杂性较大的程序要做到所有的路径覆盖（测试所有可执行路径）是不可能的。</p><p>在不能做到所有路径覆盖的情况下，如果某一程序的<strong>每一个独立路径</strong>都被执行到，那么就可以认为程序中的每个语句都已经检验过了，即达到了<strong>语句覆盖</strong>。这种测试方法就是通常所说的<strong>基路径测试法</strong>。</p><p>基本路径测试法是在程序控制流图的基础上，通过分析控制构造的环路复杂性，导出基本可执行路径的集合，从而设计测试用例的方法。设计出的测试用例要保证在测试中程序的每个可执行语句至少执行一次。</p><p><strong>2）基本路径测试法的 4 个步骤</strong></p><p>基本路径测试法包括以下 4 个步骤：</p><ul><li>以<strong>详细设计</strong>或<strong>源代码</strong>作为基础，绘制程序的<strong>控制流图</strong>。</li><li>计算得到的控制流图 G 的<strong>环路复杂性 V（G）</strong>。</li><li><strong>确定独立路径的集合</strong>。通过程序控制流图导出基本路径集，列出程序的独立路径。所谓独立路径，是指至少包含一条新边的路径，也就是包含一些前面的路径未包含的语句，当所有的语句都包含了，基路径集就够了。<strong>（线性无关路径）</strong></li><li><strong>设计测试用例</strong>，确保基本路径集中每条路径的执行。</li></ul><p><strong>3）例子阐述 1 🌰</strong></p><p>依据以下代码，用基本路径测试法，设计该程序的测试用例。</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;">   //1,2</span></span>
<span class="line"><span style="color:#A6ACCD;">    m</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">       //3</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;">  //4,5</span></span>
<span class="line"><span style="color:#A6ACCD;">   m</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">       //6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>解答：</strong></p><p><strong>① 绘制程序控制流图，如下图所示。</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270912880.png" alt="案例1控制流图"></p><p><strong>② 计算环路复杂度</strong></p><p>V(G)=4（3 个封闭区域+1 个开放区域）</p><p><strong>③ 确定线性无关路径：</strong></p><p>路径 1：<code>1、4、6</code></p><p>路径 2：<code>1、4、5、6</code></p><p>路径 3：<code>1、2、4、5、6</code></p><p>路径 4：<code>1、2、3、4、5、6</code></p><p><strong>④ 设计测试用例</strong></p><table><thead><tr><th style="text-align:center;"><strong>编号</strong></th><th style="text-align:center;"><strong>输入数据</strong></th><th style="text-align:center;"><strong>预期输出</strong></th><th style="text-align:center;"><strong>覆盖路径</strong></th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">a=2,b=3,c=4</td><td style="text-align:center;">m=0</td><td style="text-align:center;">1、4、6</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">a=2,b=3,c=8</td><td style="text-align:center;">m=5</td><td style="text-align:center;">1、4、5、6</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">a=10,b=6,c=8</td><td style="text-align:center;">m=5</td><td style="text-align:center;">1、2、4、5、6</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">a=10,b=15,c=8</td><td style="text-align:center;">m=6</td><td style="text-align:center;">1、2、3、4、5、6</td></tr></tbody></table><p><strong>4）例子阐述 2 🌰</strong></p><p>依据以下代码，用基本路径测试法，设计该程序的测试用例。</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">permute_args</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">panonopt_start</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">panonopt_end</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">opt_eng</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ncycle</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> cstart</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> cycle</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> j</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> nnonopts</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> nopts</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pos</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> //1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    nnonopts </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> panonopt_end </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> panonopt_start</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    nopts </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> opt_end </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> panonopt_end</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    cyclelen </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">opt_end </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> panonopt_start</span><span style="color:#89DDFF;">)/</span><span style="color:#F07178;">ncycle</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> ncycle</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">++){</span><span style="color:#676E95;font-style:italic;"> //2</span></span>
<span class="line"><span style="color:#F07178;">        cstart </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> panonopt_end </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> //3</span></span>
<span class="line"><span style="color:#F07178;">        pos </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> cstart</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> cyclelen</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> j</span><span style="color:#89DDFF;">++){</span><span style="color:#676E95;font-style:italic;"> //4</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">pos </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> panonopt_end</span><span style="color:#89DDFF;">){</span><span style="color:#676E95;font-style:italic;"> //5</span></span>
<span class="line"><span style="color:#F07178;">                pos </span><span style="color:#89DDFF;">-=</span><span style="color:#F07178;"> nnonopts</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> //6</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                pos </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> nopts</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> //7</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;"> //8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>【问题 1】请针对上述 C 程序给出满足 100%DC（判定覆盖）所需的逻辑条件。</p><p>【问题 2】请画出上述程序的控制流图，并计算其控制流图的环路复杂度 V(G)。</p><p>【问题 3】请给出问题 2 种控制流图的线性无关路径。</p><p><strong>解答：</strong></p><p><strong>【问题 1】</strong></p><p>满足 100%判定的逻辑条件为：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">i&lt;ncycle;</span></span>
<span class="line"><span style="color:#A6ACCD;">i&gt;=ncycle;</span></span>
<span class="line"><span style="color:#A6ACCD;">j&lt;cyclelen;</span></span>
<span class="line"><span style="color:#A6ACCD;">j&gt;=yclelen;</span></span>
<span class="line"><span style="color:#A6ACCD;">pos&gt;=panonopt_end;</span></span>
<span class="line"><span style="color:#A6ACCD;">pos&lt;panonopt_end;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>【问题 2】</strong></p><p>控制流图如下图所示，V(G)=4。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270912649.png" alt="案例2控制流图"></p><p><strong>【问题 3】</strong></p><p>线性无关路径：</p><p>路径 1：<code>1、2、8</code></p><p>路径 2：<code>1、2、3、4、2…</code></p><p>路径 3：<code>1、2、3、4、5、6、4…</code></p><p>路径 4：<code>1、2、3、4、5、7、4…</code></p><h1 id="四、写在最后" tabindex="-1">四、写在最后 <a class="header-anchor" href="#四、写在最后" aria-label="Permalink to &quot;四、写在最后&quot;">​</a></h1><p>🙋🙋🙋</p><p>对于软件测试中的白盒测试来说，主要需要了解白盒测试的基本概念，静态和动态白盒测试的方法，内容较黑盒测试来说逻辑性会更强一些。同时，值得注意的是，在动态测试中的基本路径测试法中，线性无关路径的识别要尤为小心，在计算过程中很容易出现多写的问题。因此，在此基础上，大家可以再多找几道相关的题目进行练习，举一反三。</p><p>白盒测试的内容就讲到这里啦！如有需要了解软件测试相关的其他内容，可到『<a href="https://blog.csdn.net/weixin_44803753/category_10923158.html" target="_blank" rel="noreferrer">软件测试</a>』栏目进行查看学习~</p>`,261),e=[o];function t(r,c,i,y,F,g){return a(),n("div",null,e)}const b=s(p,[["render",t]]);export{d as __pageData,b as default};
