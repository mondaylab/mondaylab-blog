import{_ as e,o as l,c as o,Q as i}from"./chunks/framework.98c15f2e.js";const g=JSON.parse('{"title":"使用预测训练模型进行图片分类","description":"","frontmatter":{"title":"使用预测训练模型进行图片分类","author":"周一","date":"2023-08-05","categories":["人工智能"],"tags":["机器学习"],"sidebar":"auto"},"headers":[{"level":1,"title":"一、任务简介","slug":"一、任务简介","link":"#一、任务简介","children":[{"level":2,"title":"1、什么是预训练模型","slug":"_1、什么是预训练模型","link":"#_1、什么是预训练模型","children":[]},{"level":2,"title":"2、操作步骤","slug":"_2、操作步骤","link":"#_2、操作步骤","children":[]}]},{"level":1,"title":"二、加载 MobileNet 模型","slug":"二、加载-mobilenet-模型","link":"#二、加载-mobilenet-模型","children":[{"level":2,"title":"1、操作步骤","slug":"_1、操作步骤","link":"#_1、操作步骤","children":[]},{"level":2,"title":"2、Coding Time","slug":"_2、coding-time","link":"#_2、coding-time","children":[{"level":3,"title":"（1）加载数据","slug":"_1-加载数据","link":"#_1-加载数据","children":[]}]}]}],"relativePath":"column/MachineLearning/Tensorflow/10_ImgCls.md","filePath":"column/MachineLearning/Tensorflow/10_ImgCls.md","lastUpdated":1720881464000}'),a={name:"column/MachineLearning/Tensorflow/10_ImgCls.md"},t=i('<h1 id="一、任务简介" tabindex="-1">一、任务简介 <a class="header-anchor" href="#一、任务简介" aria-label="Permalink to &quot;一、任务简介&quot;">​</a></h1><h2 id="_1、什么是预训练模型" tabindex="-1">1、什么是预训练模型 <a class="header-anchor" href="#_1、什么是预训练模型" aria-label="Permalink to &quot;1、什么是预训练模型&quot;">​</a></h2><ul><li>已经事先训练好的模型，无需训练即可预测。也就是说我们无需训练，直接就可以拿来预测了。那么这些模型是谁训练好的？可能是一些大公司，比如说像谷歌，也有可能是一些研究机构、大学教授等等，即已经有人训练好了，并上传到了网上，我们只需要下载就行了。</li><li>在 <code>Tensorflow.js</code> 中可以调用 <code>Web</code> 格式的模型文件。当然还有其他类型的格式，比如，<code>Python</code>版本的<code>Tensorflow.js</code>， 它就有一个叫 <code>SavedModel</code> 的格式，这也是一个非常通用的格式。</li></ul><h2 id="_2、操作步骤" tabindex="-1">2、操作步骤 <a class="header-anchor" href="#_2、操作步骤" aria-label="Permalink to &quot;2、操作步骤&quot;">​</a></h2><ul><li><strong>加载MobileNet模型</strong> —— MobileNet是一种卷积神经网络，且MobileNet这种卷积神经网络的特点就是<strong>比较轻量</strong>，它的模型文件非常的小，响应速度非常的快。但是它的缺点就是相比于更复杂的一些模型、或者更复杂的那些卷积神经网络的模型来比较的话，准确度就没有他们那么高，不过基本上也够用了。正如它的名字一样，这种模型通常被用于<strong>移动端</strong>。</li><li><strong>进行预测</strong> —— 之前我们的任务都是要<strong>先准备数据</strong>，然后构建复杂的神经网络，然后再进行训练，训练完之后才能预测。而使用了MobileNet模型之后，我们就可以直接进行预测了。</li></ul><h1 id="二、加载-mobilenet-模型" tabindex="-1">二、加载 MobileNet 模型 <a class="header-anchor" href="#二、加载-mobilenet-模型" aria-label="Permalink to &quot;二、加载 MobileNet 模型&quot;">​</a></h1><h2 id="_1、操作步骤" tabindex="-1">1、操作步骤 <a class="header-anchor" href="#_1、操作步骤" aria-label="Permalink to &quot;1、操作步骤&quot;">​</a></h2><ul><li>下载<code>MobileNet</code>模型文件</li><li>在本地开启静态文件服务器</li><li>使用<code>Tensorflow.js</code>的<code>loadLayersModel</code>方法加载模型</li></ul><h2 id="_2、coding-time" tabindex="-1">2、Coding Time <a class="header-anchor" href="#_2、coding-time" aria-label="Permalink to &quot;2、Coding Time&quot;">​</a></h2><h3 id="_1-加载数据" tabindex="-1">（1）加载数据 <a class="header-anchor" href="#_1-加载数据" aria-label="Permalink to &quot;（1）加载数据&quot;">​</a></h3><p>首先我们，要先准备mobilenet的数据集，目录如下：</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202407132155382.png" alt="img"></p><p>更详细内容请见：<a href="https://pzfqk98jn1.feishu.cn/wiki/Khs4wuRfHiA29NkEdU7c8sXdnT0?from=from_copylink" target="_blank" rel="noreferrer">https://pzfqk98jn1.feishu.cn/wiki/Khs4wuRfHiA29NkEdU7c8sXdnT0?from=from_copylink</a></p>',13),n=[t];function r(s,d,c,h,_,m){return l(),o("div",null,n)}const f=e(a,[["render",r]]);export{g as __pageData,f as default};
