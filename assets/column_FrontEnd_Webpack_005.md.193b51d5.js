import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.98c15f2e.js";const b=JSON.parse('{"title":"手写一个简易bundler打包工具带你了解Webpack原理","description":"","frontmatter":{"title":"手写一个简易bundler打包工具带你了解Webpack原理","author":"周一","date":"2021-08-06","categories":["前端开发"],"tags":["Webpack"],"sidebar":"auto"},"headers":[{"level":1,"title":"🥝 序言","slug":"🥝-序言","link":"#🥝-序言","children":[]},{"level":1,"title":"🍉 一、模块分析(入口文件代码分析)","slug":"🍉-一、模块分析-入口文件代码分析","link":"#🍉-一、模块分析-入口文件代码分析","children":[{"level":2,"title":"1. 项目结构","slug":"_1-项目结构","link":"#_1-项目结构","children":[]},{"level":2,"title":"2. 安装第三方依赖","slug":"_2-安装第三方依赖","link":"#_2-安装第三方依赖","children":[]},{"level":2,"title":"3. 业务代码","slug":"_3-业务代码","link":"#_3-业务代码","children":[]},{"level":2,"title":"4. 开始打包","slug":"_4-开始打包","link":"#_4-开始打包","children":[]}]},{"level":1,"title":"🥑 二、依赖图谱 Dependencies Graph","slug":"🥑-二、依赖图谱-dependencies-graph","link":"#🥑-二、依赖图谱-dependencies-graph","children":[{"level":2,"title":"1. 结果分析","slug":"_1-结果分析","link":"#_1-结果分析","children":[]},{"level":2,"title":"2. 分析所有模块的依赖关系","slug":"_2-分析所有模块的依赖关系","link":"#_2-分析所有模块的依赖关系","children":[]}]},{"level":1,"title":"🍐 三、生成代码","slug":"🍐-三、生成代码","link":"#🍐-三、生成代码","children":[{"level":2,"title":"1. 逻辑编写","slug":"_1-逻辑编写","link":"#_1-逻辑编写","children":[]},{"level":2,"title":"2. 结果分析","slug":"_2-结果分析","link":"#_2-结果分析","children":[]}]},{"level":1,"title":"🍓 四、结束语","slug":"🍓-四、结束语","link":"#🍓-四、结束语","children":[]},{"level":1,"title":"🐣 彩蛋 One More Thing","slug":"🐣-彩蛋-one-more-thing","link":"#🐣-彩蛋-one-more-thing","children":[{"level":2,"title":"（：往期推荐","slug":"往期推荐","link":"#往期推荐","children":[]}]}],"relativePath":"column/FrontEnd/Webpack/005.md","filePath":"column/FrontEnd/Webpack/005.md","lastUpdated":1685151998000}'),p={name:"column/FrontEnd/Webpack/005.md"},o=l(`<h1 id="🥝-序言" tabindex="-1">🥝 序言 <a class="header-anchor" href="#🥝-序言" aria-label="Permalink to &quot;🥝 序言&quot;">​</a></h1><p>我们都知道， <code>webpack</code> 是一个<strong>打包工具</strong>。在我们对它进行配置之前，它也是经过一系列的代码编写，才生成的打包工具。那这背后，又做了什么事情呢？</p><p>今天，我们就来原生 <code>js</code> ，来手写一个简易的打包工具 <code>bundler</code> ，实现对项目代码的打包。</p><p>下面开始进行本文的讲解~</p><h1 id="🍉-一、模块分析-入口文件代码分析" tabindex="-1">🍉 一、模块分析(入口文件代码分析) <a class="header-anchor" href="#🍉-一、模块分析-入口文件代码分析" aria-label="Permalink to &quot;🍉 一、模块分析(入口文件代码分析)&quot;">​</a></h1><h2 id="_1-项目结构" tabindex="-1">1. 项目结构 <a class="header-anchor" href="#_1-项目结构" aria-label="Permalink to &quot;1. 项目结构&quot;">​</a></h2><p>下面先来看下我们的项目文件结构。<strong>请看下图 👇</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270745757.png" alt="bundler项目结构"></p><h2 id="_2-安装第三方依赖" tabindex="-1">2. 安装第三方依赖 <a class="header-anchor" href="#_2-安装第三方依赖" aria-label="Permalink to &quot;2. 安装第三方依赖&quot;">​</a></h2><p>我们需要用到 <code>4</code> 个第三方依赖包，<strong>分别是：</strong></p><ul><li>@babel/parser —— 帮助我们分析源代码并生成抽象语法树 <strong>(AST)</strong> ；</li><li>@babel/traverse —— 帮助我们<strong>对抽象语法树进行遍历</strong>，并分析里语法树里面的语句；</li><li>@babel/core —— 将原始代码打包编译成浏览器能够运行的代码；</li><li>@babel/preset-env —— 用于在解析抽象语法树时进行配置。</li></ul><p>下面依次给出安装这四个库的命令，<strong>分别是：</strong></p><p><strong>（1）@babel/parser</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@babel/parser</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@babel/parser</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>（2）@babel/traverse</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@babel/traverse</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@babel/traverse</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>（3）@babel/core</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@balbel/core</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@balbel/core</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>（4）@babel/preset-env</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@babel/preset-env</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@babel/preset-env</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_3-业务代码" tabindex="-1">3. 业务代码 <a class="header-anchor" href="#_3-业务代码" aria-label="Permalink to &quot;3. 业务代码&quot;">​</a></h2><p>当我们去做一个项目打包时，首先需要先对项目中的模块进行分析，现在我们先对<strong>入口文件</strong>进行分析。假设我们要实现一个业务，输出的是 <code>hello monday</code> 。那么我们先来编写我们的业务代码。</p><p><strong>第一步：</strong> 编写 <code>word.js</code> 文件代码。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">word</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;monday&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">word</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;monday&#39;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>第二步：</strong> 编写 <code>message.js</code> 文件代码。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { word } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./word.js&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`hello \${</span><span style="color:#E1E4E8;">word</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> message;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { word } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./word.js&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">message</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`hello \${</span><span style="color:#24292E;">word</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> message;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>第三步：</strong> 编写 <code>index.js</code> 文件代码。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> message </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./message.js&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(message);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./message.js&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(message);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_4-开始打包" tabindex="-1">4. 开始打包 <a class="header-anchor" href="#_4-开始打包" aria-label="Permalink to &quot;4. 开始打包&quot;">​</a></h2><p>编写完业务代码之后，现在，我们要先来对入口文件 <code>index.js</code> 进行打包。注意，这里除了 <code>babel</code> 外，我们不使用任何工具，没有 <code>webpack</code> 、也没有 <code>webpack-cli</code> 等工具。</p><p>我们在根目录下先创建一个文件，命名为 <code>bundler.js</code> ，用这个文件来编写我们的打包逻辑。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/parser&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">traverse</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/traverse&#39;</span><span style="color:#E1E4E8;">).default;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">babel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/core&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">moduleAnalyser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">filename</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//1. 首先拿到文件名，拿到文件名之后我们去读取文件里面的内容</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">content</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(filename, </span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//2. 借助Babel-parser，将文件里js的字符串，转化成一个js的对象-&gt;这个js对象就是我们所说的抽象语法树</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ast</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(content, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 3. 如果你传入的ES6的语法，那么需要设置sourceType为module</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceType: </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//收集入口文件中的依赖文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dependencies</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">traverse</span><span style="color:#E1E4E8;">(ast, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*4. 有了抽象语法树之后，我们需要去分析，</span></span>
<span class="line"><span style="color:#6A737D;">        它里面的声明都在哪些地方，</span></span>
<span class="line"><span style="color:#6A737D;">        去找到import这些语句对应的内容</span></span>
<span class="line"><span style="color:#6A737D;">        5. 需要借助@babel/traverse这个工具，</span></span>
<span class="line"><span style="color:#6A737D;">        这个工具表明当抽象语法树有ImportDeclaration这样的语句时，</span></span>
<span class="line"><span style="color:#6A737D;">        它就会继续下面的函数*/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ImportDeclaration</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">node</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// console.log(node);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dirname</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">dirname</span><span style="color:#E1E4E8;">(filename);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newFile</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(dirname, node.source.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// console.log(newFile);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//6. 找到import语句之后，将这些语句拼装成一个对象，放在dependencies这个变量中（以键值对的方式来进行存储）</span></span>
<span class="line"><span style="color:#E1E4E8;">      dependencies[node.source.value] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newFile;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    7. 分析好了之后，对模块的源代码进行一次编译。通过使用transformFromAst，</span></span>
<span class="line"><span style="color:#6A737D;">    把它从一个ES module，转换成浏览器可以执行的语法，并将其存储在code里面，</span></span>
<span class="line"><span style="color:#6A737D;">    code生成的代码就是我们可以在浏览器上运行的代码*/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> babel.</span><span style="color:#B392F0;">transformFromAst</span><span style="color:#E1E4E8;">(ast, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    presets: [</span><span style="color:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//返回入口文件的名字</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//返回入口文件中的依赖文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    dependencies,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//返回浏览器上可以运行的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">    code,</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// console.log(dependencies);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">moduleInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">moduleAnalyser</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(moduleInfo);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/parser&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">traverse</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/traverse&#39;</span><span style="color:#24292E;">).default;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">babel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/core&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">moduleAnalyser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">filename</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//1. 首先拿到文件名，拿到文件名之后我们去读取文件里面的内容</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">content</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(filename, </span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//2. 借助Babel-parser，将文件里js的字符串，转化成一个js的对象-&gt;这个js对象就是我们所说的抽象语法树</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ast</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(content, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 3. 如果你传入的ES6的语法，那么需要设置sourceType为module</span></span>
<span class="line"><span style="color:#24292E;">    sourceType: </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//收集入口文件中的依赖文件</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dependencies</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">traverse</span><span style="color:#24292E;">(ast, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*4. 有了抽象语法树之后，我们需要去分析，</span></span>
<span class="line"><span style="color:#6A737D;">        它里面的声明都在哪些地方，</span></span>
<span class="line"><span style="color:#6A737D;">        去找到import这些语句对应的内容</span></span>
<span class="line"><span style="color:#6A737D;">        5. 需要借助@babel/traverse这个工具，</span></span>
<span class="line"><span style="color:#6A737D;">        这个工具表明当抽象语法树有ImportDeclaration这样的语句时，</span></span>
<span class="line"><span style="color:#6A737D;">        它就会继续下面的函数*/</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ImportDeclaration</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">node</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// console.log(node);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dirname</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">dirname</span><span style="color:#24292E;">(filename);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newFile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(dirname, node.source.value);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// console.log(newFile);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//6. 找到import语句之后，将这些语句拼装成一个对象，放在dependencies这个变量中（以键值对的方式来进行存储）</span></span>
<span class="line"><span style="color:#24292E;">      dependencies[node.source.value] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newFile;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    7. 分析好了之后，对模块的源代码进行一次编译。通过使用transformFromAst，</span></span>
<span class="line"><span style="color:#6A737D;">    把它从一个ES module，转换成浏览器可以执行的语法，并将其存储在code里面，</span></span>
<span class="line"><span style="color:#6A737D;">    code生成的代码就是我们可以在浏览器上运行的代码*/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> babel.</span><span style="color:#6F42C1;">transformFromAst</span><span style="color:#24292E;">(ast, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    presets: [</span><span style="color:#032F62;">&#39;@babel/preset-env&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//返回入口文件的名字</span></span>
<span class="line"><span style="color:#24292E;">    filename,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//返回入口文件中的依赖文件</span></span>
<span class="line"><span style="color:#24292E;">    dependencies,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//返回浏览器上可以运行的代码</span></span>
<span class="line"><span style="color:#24292E;">    code,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// console.log(dependencies);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">moduleInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">moduleAnalyser</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./src/index.js&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(moduleInfo);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><p>通过以上代码，相信大家对打包入口文件有一个基本的了解。之后呢，在控制台运行 <code>node bundler.js</code> 命令，可以对打包过程中的各种分析进行查看。</p><p>下面我们继续第二块的内容~</p><h1 id="🥑-二、依赖图谱-dependencies-graph" tabindex="-1">🥑 二、依赖图谱 Dependencies Graph <a class="header-anchor" href="#🥑-二、依赖图谱-dependencies-graph" aria-label="Permalink to &quot;🥑 二、依赖图谱 Dependencies Graph&quot;">​</a></h1><p>对于上述所讲的内容，我们谈到的，只是对一个入口文件进行分析。但是呢，这还远远不够。所以，现在我们要来对整个工程文件进行分析。</p><h2 id="_1-结果分析" tabindex="-1">1. 结果分析 <a class="header-anchor" href="#_1-结果分析" aria-label="Permalink to &quot;1. 结果分析&quot;">​</a></h2><p>我们先来看下上述代码中，只分析入口文件时的打印情况。<strong>具体代码如下：</strong></p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">filename</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">dependencies</span><span style="color:#E1E4E8;">: { </span><span style="color:#FDAEB7;font-style:italic;">&#39;./message.js&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">&#39;./src\\\\message.js&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">code</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">&#39;</span><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#FDAEB7;font-style:italic;">;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">&#39;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">&#39;var</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">_message</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">_interopRequireDefault(require(</span><span style="color:#9ECBFF;">&quot;./message.js&quot;</span><span style="color:#FDAEB7;font-style:italic;">));\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">&#39;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">&#39;function</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">_interopRequireDefault(obj)</span><span style="color:#E1E4E8;"> { </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">obj.__esModule</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">obj</span><span style="color:#E1E4E8;"> : { </span><span style="color:#79B8FF;">&quot;default&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">obj</span><span style="color:#E1E4E8;"> }</span><span style="color:#FDAEB7;font-style:italic;">;</span><span style="color:#E1E4E8;"> }</span><span style="color:#FDAEB7;font-style:italic;">\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">&#39;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">&#39;console.log(_message</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">]</span><span style="color:#FDAEB7;font-style:italic;">);&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">filename</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">&#39;./src/index.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">dependencies</span><span style="color:#24292E;">: { </span><span style="color:#B31D28;font-style:italic;">&#39;./message.js&#39;</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">&#39;./src\\\\message.js&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">code</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">&#39;</span><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#B31D28;font-style:italic;">;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">&#39;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">&#39;var</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">_message</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">=</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">_interopRequireDefault(require(</span><span style="color:#032F62;">&quot;./message.js&quot;</span><span style="color:#B31D28;font-style:italic;">));\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">&#39;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">&#39;function</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">_interopRequireDefault(obj)</span><span style="color:#24292E;"> { </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">obj</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">obj.__esModule</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">?</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">obj</span><span style="color:#24292E;"> : { </span><span style="color:#005CC5;">&quot;default&quot;</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">obj</span><span style="color:#24292E;"> }</span><span style="color:#B31D28;font-style:italic;">;</span><span style="color:#24292E;"> }</span><span style="color:#B31D28;font-style:italic;">\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">&#39;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">&#39;console.log(_message</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">]</span><span style="color:#B31D28;font-style:italic;">);&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>大家可以看到，入口文件分析完了以后，还有一层一层的依赖和 code。现在，我们需要去顺着这些依赖，来把整个项目的内容分析出来。</p><h2 id="_2-分析所有模块的依赖关系" tabindex="-1">2. 分析所有模块的依赖关系 <a class="header-anchor" href="#_2-分析所有模块的依赖关系" aria-label="Permalink to &quot;2. 分析所有模块的依赖关系&quot;">​</a></h2><p>我们现在来对 <code>bundler.js</code> 进行升级改造，把所有模块的依赖关系给描绘出来。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/parser&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">traverse</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/traverse&#39;</span><span style="color:#E1E4E8;">).default;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">babel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/core&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">moduleAnalyser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">filename</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//1. 首先拿到文件名，拿到文件名之后我们去读取文件里面的内容</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">content</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(filename, </span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//2. 借助Babel-parser，将文件里js的字符串，转化成一个js的对象-&gt;这个js对象就是我们所说的抽象语法树</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ast</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(content, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 3. 如果你传入的ES6的语法，那么需要设置sourceType为module</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceType: </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//收集入口文件中的依赖文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dependencies</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">traverse</span><span style="color:#E1E4E8;">(ast, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*4. 有了抽象语法树之后，我们需要去分析，</span></span>
<span class="line"><span style="color:#6A737D;">        它里面的声明都在哪些地方，</span></span>
<span class="line"><span style="color:#6A737D;">        去找到import这些语句对应的内容</span></span>
<span class="line"><span style="color:#6A737D;">        5. 需要借助@babel/traverse这个工具，</span></span>
<span class="line"><span style="color:#6A737D;">        这个工具表明当抽象语法树有ImportDeclaration这样的语句时，</span></span>
<span class="line"><span style="color:#6A737D;">        它就会继续下面的函数*/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ImportDeclaration</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">node</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// console.log(node);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dirname</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">dirname</span><span style="color:#E1E4E8;">(filename);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newFile</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(dirname, node.source.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// console.log(newFile);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//6. 找到import语句之后，将这些语句拼装成一个对象，放在dependencies这个变量中（以键值对的方式来进行存储）</span></span>
<span class="line"><span style="color:#E1E4E8;">      dependencies[node.source.value] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newFile;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    7. 分析好了之后，对模块的源代码进行一次编译。通过使用transformFromAst，</span></span>
<span class="line"><span style="color:#6A737D;">    把它从一个ES module，转换成浏览器可以执行的语法，并将其存储在code里面，</span></span>
<span class="line"><span style="color:#6A737D;">    code生成的代码就是我们可以在浏览器上运行的代码*/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> babel.</span><span style="color:#B392F0;">transformFromAst</span><span style="color:#E1E4E8;">(ast, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    presets: [</span><span style="color:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//返回入口文件的名字</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename,</span></span>
<span class="line"><span style="color:#E1E4E8;">    dependencies,</span></span>
<span class="line"><span style="color:#E1E4E8;">    code,</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// console.log(dependencies);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makeDependenciesGraph</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">entry</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//1. 对入口模块进行一次分析</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">entryModule</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">moduleAnalyser</span><span style="color:#E1E4E8;">(entry);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// console.log(entryModule);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//2. 定义一个数组，存放入口文件和依赖</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">graphArray</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [entryModule];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//3. 对graphArray进行遍历</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> graphArray.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//4. 取出graphArray中的每一项</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> graphArray[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//5. 取出每一项中的依赖dependencies</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">dependencies</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//6. 如果入口文件有依赖时，就对依赖进行循环</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (dependencies) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/*7. 通过不断的循环，最终，可以把它的入口文件，以及它的依赖，</span></span>
<span class="line"><span style="color:#6A737D;">            还有它的依赖的依赖，一层一层的遍历出来，并推到graphArray当中*/</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> dependencies) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/*8. 通过队列(先进先出)的方式实现递归的效果；</span></span>
<span class="line"><span style="color:#6A737D;">                为什么用递归？递归地进行分析，是因为每个依赖下面有可能还有依赖*/</span></span>
<span class="line"><span style="color:#E1E4E8;">        graphArray.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">moduleAnalyser</span><span style="color:#E1E4E8;">(dependencies[j]));</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//9. 处理后的graphArray是一个数组，现在需要对它进行格式上的转换</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">graph</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  graphArray.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    graph[item.filename] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      dependencies: item.dependencies,</span></span>
<span class="line"><span style="color:#E1E4E8;">      code: item.code,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> graph;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &#39;./src/index.js&#39; 为入口文件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">graphInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makeDependenciesGraph</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(graphInfo);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/parser&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">traverse</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/traverse&#39;</span><span style="color:#24292E;">).default;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">babel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/core&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">moduleAnalyser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">filename</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//1. 首先拿到文件名，拿到文件名之后我们去读取文件里面的内容</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">content</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(filename, </span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//2. 借助Babel-parser，将文件里js的字符串，转化成一个js的对象-&gt;这个js对象就是我们所说的抽象语法树</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ast</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(content, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 3. 如果你传入的ES6的语法，那么需要设置sourceType为module</span></span>
<span class="line"><span style="color:#24292E;">    sourceType: </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//收集入口文件中的依赖文件</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dependencies</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">traverse</span><span style="color:#24292E;">(ast, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*4. 有了抽象语法树之后，我们需要去分析，</span></span>
<span class="line"><span style="color:#6A737D;">        它里面的声明都在哪些地方，</span></span>
<span class="line"><span style="color:#6A737D;">        去找到import这些语句对应的内容</span></span>
<span class="line"><span style="color:#6A737D;">        5. 需要借助@babel/traverse这个工具，</span></span>
<span class="line"><span style="color:#6A737D;">        这个工具表明当抽象语法树有ImportDeclaration这样的语句时，</span></span>
<span class="line"><span style="color:#6A737D;">        它就会继续下面的函数*/</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ImportDeclaration</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">node</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// console.log(node);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dirname</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">dirname</span><span style="color:#24292E;">(filename);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newFile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(dirname, node.source.value);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// console.log(newFile);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//6. 找到import语句之后，将这些语句拼装成一个对象，放在dependencies这个变量中（以键值对的方式来进行存储）</span></span>
<span class="line"><span style="color:#24292E;">      dependencies[node.source.value] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newFile;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    7. 分析好了之后，对模块的源代码进行一次编译。通过使用transformFromAst，</span></span>
<span class="line"><span style="color:#6A737D;">    把它从一个ES module，转换成浏览器可以执行的语法，并将其存储在code里面，</span></span>
<span class="line"><span style="color:#6A737D;">    code生成的代码就是我们可以在浏览器上运行的代码*/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> babel.</span><span style="color:#6F42C1;">transformFromAst</span><span style="color:#24292E;">(ast, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    presets: [</span><span style="color:#032F62;">&#39;@babel/preset-env&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//返回入口文件的名字</span></span>
<span class="line"><span style="color:#24292E;">    filename,</span></span>
<span class="line"><span style="color:#24292E;">    dependencies,</span></span>
<span class="line"><span style="color:#24292E;">    code,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// console.log(dependencies);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeDependenciesGraph</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">entry</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//1. 对入口模块进行一次分析</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">entryModule</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">moduleAnalyser</span><span style="color:#24292E;">(entry);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// console.log(entryModule);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//2. 定义一个数组，存放入口文件和依赖</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">graphArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [entryModule];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//3. 对graphArray进行遍历</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> graphArray.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//4. 取出graphArray中的每一项</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">item</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> graphArray[i];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//5. 取出每一项中的依赖dependencies</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">dependencies</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//6. 如果入口文件有依赖时，就对依赖进行循环</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (dependencies) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">/*7. 通过不断的循环，最终，可以把它的入口文件，以及它的依赖，</span></span>
<span class="line"><span style="color:#6A737D;">            还有它的依赖的依赖，一层一层的遍历出来，并推到graphArray当中*/</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> dependencies) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/*8. 通过队列(先进先出)的方式实现递归的效果；</span></span>
<span class="line"><span style="color:#6A737D;">                为什么用递归？递归地进行分析，是因为每个依赖下面有可能还有依赖*/</span></span>
<span class="line"><span style="color:#24292E;">        graphArray.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">moduleAnalyser</span><span style="color:#24292E;">(dependencies[j]));</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//9. 处理后的graphArray是一个数组，现在需要对它进行格式上的转换</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">graph</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  graphArray.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    graph[item.filename] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      dependencies: item.dependencies,</span></span>
<span class="line"><span style="color:#24292E;">      code: item.code,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> graph;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &#39;./src/index.js&#39; 为入口文件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">graphInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeDependenciesGraph</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./src/index.js&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(graphInfo);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br></div></div><p>大家可以看到，我们制造了一个新的函数 <code>makeDependenciesGraph</code> ，来描述所有模块的依赖关系，并在最终对它进行格式上的转换，转换成我们理想中的 <code>js</code> 对象。现在，我们来看下依赖关系的打印结果。<strong>打印结果如下：</strong></p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">dependencies</span><span style="color:#E1E4E8;">: { </span><span style="color:#FDAEB7;font-style:italic;">&#39;./message.js&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">&#39;./src\\\\message.js&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">code</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">&#39;</span><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#FDAEB7;font-style:italic;">;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;var</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">_message</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">_interopRequireDefault(require(</span><span style="color:#9ECBFF;">&quot;./message.js&quot;</span><span style="color:#FDAEB7;font-style:italic;">));\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;function</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">_interopRequireDefault(obj)</span><span style="color:#E1E4E8;"> { </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">obj.__esModule</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">obj</span><span style="color:#E1E4E8;"> : { </span><span style="color:#79B8FF;">&quot;default&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">obj</span><span style="color:#E1E4E8;"> }</span><span style="color:#FDAEB7;font-style:italic;">;</span><span style="color:#E1E4E8;"> }</span><span style="color:#FDAEB7;font-style:italic;">\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;console.log(_message</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">]</span><span style="color:#FDAEB7;font-style:italic;">);&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">&#39;./src\\\\message.js&#39;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">dependencies</span><span style="color:#E1E4E8;">: { </span><span style="color:#FDAEB7;font-style:italic;">&#39;./word.js&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">&#39;./src\\\\word.js&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">code</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">&#39;</span><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#FDAEB7;font-style:italic;">;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;Object.defineProperty(exports</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;__esModule&quot;</span><span style="color:#FDAEB7;font-style:italic;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">{\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;</span><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#FDAEB7;font-style:italic;">\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;</span><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;font-style:italic;">);\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;exports</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#FDAEB7;font-style:italic;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;font-style:italic;">;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;var</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">_word</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">require(</span><span style="color:#9ECBFF;">&quot;./word.js&quot;</span><span style="color:#FDAEB7;font-style:italic;">);\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;var</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello &quot;</span><span style="color:#FDAEB7;font-style:italic;">.concat(_word.word);\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;var</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">_default</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">message;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;exports</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#FDAEB7;font-style:italic;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">_default;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  &#39;./src\\\\word.js&#39;: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">dependencies</span><span style="color:#E1E4E8;">: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">code</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">&#39;</span><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#FDAEB7;font-style:italic;">;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;Object.defineProperty(exports</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;__esModule&quot;</span><span style="color:#FDAEB7;font-style:italic;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">{\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;</span><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#FDAEB7;font-style:italic;">\\n&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">&#39;</span><span style="color:#E1E4E8;">});\\n&#39; +</span></span>
<span class="line"><span style="color:#E1E4E8;">      &#39;exports.word = void </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;\\n&#39; +</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;var word = &#39;monday&#39;;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> +</span></span>
<span class="line"><span style="color:#E1E4E8;">      &#39;exports.word = word;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">&#39;./src/index.js&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">dependencies</span><span style="color:#24292E;">: { </span><span style="color:#B31D28;font-style:italic;">&#39;./message.js&#39;</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">&#39;./src\\\\message.js&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">code</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">&#39;</span><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#B31D28;font-style:italic;">;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;var</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">_message</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">=</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">_interopRequireDefault(require(</span><span style="color:#032F62;">&quot;./message.js&quot;</span><span style="color:#B31D28;font-style:italic;">));\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;function</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">_interopRequireDefault(obj)</span><span style="color:#24292E;"> { </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">obj</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">obj.__esModule</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">?</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">obj</span><span style="color:#24292E;"> : { </span><span style="color:#005CC5;">&quot;default&quot;</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">obj</span><span style="color:#24292E;"> }</span><span style="color:#B31D28;font-style:italic;">;</span><span style="color:#24292E;"> }</span><span style="color:#B31D28;font-style:italic;">\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;console.log(_message</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">]</span><span style="color:#B31D28;font-style:italic;">);&#39;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">&#39;./src\\\\message.js&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">dependencies</span><span style="color:#24292E;">: { </span><span style="color:#B31D28;font-style:italic;">&#39;./word.js&#39;</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">&#39;./src\\\\word.js&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">code</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">&#39;</span><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#B31D28;font-style:italic;">;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;Object.defineProperty(exports</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;__esModule&quot;</span><span style="color:#B31D28;font-style:italic;">,</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">{\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;</span><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">value</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#B31D28;font-style:italic;">\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;</span><span style="color:#24292E;">}</span><span style="color:#B31D28;font-style:italic;">);\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;exports</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">] </span><span style="color:#B31D28;font-style:italic;">=</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">void</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#B31D28;font-style:italic;">;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;var</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">_word</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">=</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">require(</span><span style="color:#032F62;">&quot;./word.js&quot;</span><span style="color:#B31D28;font-style:italic;">);\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;var</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">message</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello &quot;</span><span style="color:#B31D28;font-style:italic;">.concat(_word.word);\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;var</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">_default</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">=</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">message;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;exports</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">] </span><span style="color:#B31D28;font-style:italic;">=</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">_default;&#39;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  &#39;./src\\\\word.js&#39;: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">dependencies</span><span style="color:#24292E;">: {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">code</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">&#39;</span><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#B31D28;font-style:italic;">;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;Object.defineProperty(exports</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;__esModule&quot;</span><span style="color:#B31D28;font-style:italic;">,</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">{\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;</span><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">value</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#B31D28;font-style:italic;">\\n&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">&#39;</span><span style="color:#24292E;">});\\n&#39; +</span></span>
<span class="line"><span style="color:#24292E;">      &#39;exports.word = void </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;\\n&#39; +</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;var word = &#39;monday&#39;;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> +</span></span>
<span class="line"><span style="color:#24292E;">      &#39;exports.word = word;&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>大家可以看到，所有模块的依赖关系都给遍历出来了。这也就说明了，我们成功进行了这一步的分析。</p><h1 id="🍐-三、生成代码" tabindex="-1">🍐 三、生成代码 <a class="header-anchor" href="#🍐-三、生成代码" aria-label="Permalink to &quot;🍐 三、生成代码&quot;">​</a></h1><h2 id="_1-逻辑编写" tabindex="-1">1. 逻辑编写 <a class="header-anchor" href="#_1-逻辑编写" aria-label="Permalink to &quot;1. 逻辑编写&quot;">​</a></h2><p>上面我们已经成功生成了依赖图谱，那现在，我们就来把这个依赖图谱，生成能够真正在浏览器上运行的代码。我们继续在 <code>bundle.js</code> 上，编写一个生成代码的逻辑。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/parser&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">traverse</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/traverse&#39;</span><span style="color:#E1E4E8;">).default;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">babel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/core&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">moduleAnalyser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">filename</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//1. 首先拿到文件名，拿到文件名之后我们去读取文件里面的内容</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">content</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(filename, </span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//2. 借助Babel-parser，将文件里js的字符串，转化成一个js的对象-&gt;这个js对象就是我们所说的抽象语法树</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ast</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(content, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 3. 如果你传入的ES6的语法，那么需要设置sourceType为module</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceType: </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//收集入口文件中的依赖文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dependencies</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">traverse</span><span style="color:#E1E4E8;">(ast, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*4. 有了抽象语法树之后，我们需要去分析，</span></span>
<span class="line"><span style="color:#6A737D;">        它里面的声明都在哪些地方，</span></span>
<span class="line"><span style="color:#6A737D;">        去找到import这些语句对应的内容</span></span>
<span class="line"><span style="color:#6A737D;">        5. 需要借助@babel/traverse这个工具，</span></span>
<span class="line"><span style="color:#6A737D;">        这个工具表明当抽象语法树有ImportDeclaration这样的语句时，</span></span>
<span class="line"><span style="color:#6A737D;">        它就会继续下面的函数*/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ImportDeclaration</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">node</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// console.log(node);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dirname</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">dirname</span><span style="color:#E1E4E8;">(filename);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newFile</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(dirname, node.source.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// console.log(newFile);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//6. 找到import语句之后，将这些语句拼装成一个对象，放在dependencies这个变量中（以键值对的方式来进行存储）</span></span>
<span class="line"><span style="color:#E1E4E8;">      dependencies[node.source.value] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newFile;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    7. 分析好了之后，对模块的源代码进行一次编译。通过使用transformFromAst，</span></span>
<span class="line"><span style="color:#6A737D;">    把它从一个ES module，转换成浏览器可以执行的语法，并将其存储在code里面，</span></span>
<span class="line"><span style="color:#6A737D;">    code生成的代码就是我们可以在浏览器上运行的代码*/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> babel.</span><span style="color:#B392F0;">transformFromAst</span><span style="color:#E1E4E8;">(ast, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    presets: [</span><span style="color:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//返回入口文件的名字</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename,</span></span>
<span class="line"><span style="color:#E1E4E8;">    dependencies,</span></span>
<span class="line"><span style="color:#E1E4E8;">    code,</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// console.log(dependencies);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makeDependenciesGraph</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">entry</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//1. 对入口模块进行一次分析</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">entryModule</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">moduleAnalyser</span><span style="color:#E1E4E8;">(entry);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// console.log(entryModule);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//2. 定义一个数组，存放入口文件和依赖</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">graphArray</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [entryModule];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//3. 对graphArray进行遍历</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> graphArray.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//4. 取出graphArray中的每一项</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> graphArray[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//5. 取出每一项中的依赖dependencies</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">dependencies</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//6. 如果入口文件有依赖时，就对依赖进行循环</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (dependencies) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/*7. 通过不断的循环，最终，可以把它的入口文件，以及它的依赖，</span></span>
<span class="line"><span style="color:#6A737D;">            还有它的依赖的依赖，一层一层的遍历出来，并推到graphArray当中*/</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> dependencies) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/*8. 通过队列(先进先出)的方式实现递归的效果；</span></span>
<span class="line"><span style="color:#6A737D;">                为什么用递归？递归地进行分析，是因为每个依赖下面有可能还有依赖*/</span></span>
<span class="line"><span style="color:#E1E4E8;">        graphArray.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">moduleAnalyser</span><span style="color:#E1E4E8;">(dependencies[j]));</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//9. 处理后的graphArray是一个数组，现在需要对它进行格式上的转换</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">graph</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  graphArray.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    graph[item.filename] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      dependencies: item.dependencies,</span></span>
<span class="line"><span style="color:#E1E4E8;">      code: item.code,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> graph;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateCode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">entry</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//1. 将生成的依赖图谱进行格式转换</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">graph</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">makeDependenciesGraph</span><span style="color:#E1E4E8;">(entry));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/** 2. 构造require函数和exports对象，转化成浏览器认识的字符串</span></span>
<span class="line"><span style="color:#6A737D;">   * return require(graph[module].dependencies[relative]) 目的是为了找到真实的路径</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">        (function(graph){</span></span>
<span class="line"><span style="color:#9ECBFF;">            function require(module){</span></span>
<span class="line"><span style="color:#9ECBFF;">                function localRequire(relativePath) {</span></span>
<span class="line"><span style="color:#9ECBFF;">                    return require(graph[module].dependencies[relativePath])</span></span>
<span class="line"><span style="color:#9ECBFF;">                }</span></span>
<span class="line"><span style="color:#9ECBFF;">                var exports = {};</span></span>
<span class="line"><span style="color:#9ECBFF;">                (function(require, exports, code){</span></span>
<span class="line"><span style="color:#9ECBFF;">                    eval(code)</span></span>
<span class="line"><span style="color:#9ECBFF;">                })(localRequire, exports, graph[module].code);</span></span>
<span class="line"><span style="color:#9ECBFF;">                return exports;</span></span>
<span class="line"><span style="color:#9ECBFF;">            };</span></span>
<span class="line"><span style="color:#9ECBFF;">            require(&#39;\${</span><span style="color:#E1E4E8;">entry</span><span style="color:#9ECBFF;">}&#39;)</span></span>
<span class="line"><span style="color:#9ECBFF;">        })(\${</span><span style="color:#E1E4E8;">graph</span><span style="color:#9ECBFF;">});</span></span>
<span class="line"><span style="color:#9ECBFF;">    \`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &#39;./src/index.js&#39; 为入口文件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateCode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(code);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/parser&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">traverse</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/traverse&#39;</span><span style="color:#24292E;">).default;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">babel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/core&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">moduleAnalyser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">filename</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//1. 首先拿到文件名，拿到文件名之后我们去读取文件里面的内容</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">content</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(filename, </span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//2. 借助Babel-parser，将文件里js的字符串，转化成一个js的对象-&gt;这个js对象就是我们所说的抽象语法树</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ast</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(content, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 3. 如果你传入的ES6的语法，那么需要设置sourceType为module</span></span>
<span class="line"><span style="color:#24292E;">    sourceType: </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//收集入口文件中的依赖文件</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dependencies</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">traverse</span><span style="color:#24292E;">(ast, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*4. 有了抽象语法树之后，我们需要去分析，</span></span>
<span class="line"><span style="color:#6A737D;">        它里面的声明都在哪些地方，</span></span>
<span class="line"><span style="color:#6A737D;">        去找到import这些语句对应的内容</span></span>
<span class="line"><span style="color:#6A737D;">        5. 需要借助@babel/traverse这个工具，</span></span>
<span class="line"><span style="color:#6A737D;">        这个工具表明当抽象语法树有ImportDeclaration这样的语句时，</span></span>
<span class="line"><span style="color:#6A737D;">        它就会继续下面的函数*/</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ImportDeclaration</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">node</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// console.log(node);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dirname</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">dirname</span><span style="color:#24292E;">(filename);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newFile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(dirname, node.source.value);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// console.log(newFile);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//6. 找到import语句之后，将这些语句拼装成一个对象，放在dependencies这个变量中（以键值对的方式来进行存储）</span></span>
<span class="line"><span style="color:#24292E;">      dependencies[node.source.value] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newFile;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    7. 分析好了之后，对模块的源代码进行一次编译。通过使用transformFromAst，</span></span>
<span class="line"><span style="color:#6A737D;">    把它从一个ES module，转换成浏览器可以执行的语法，并将其存储在code里面，</span></span>
<span class="line"><span style="color:#6A737D;">    code生成的代码就是我们可以在浏览器上运行的代码*/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> babel.</span><span style="color:#6F42C1;">transformFromAst</span><span style="color:#24292E;">(ast, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    presets: [</span><span style="color:#032F62;">&#39;@babel/preset-env&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//返回入口文件的名字</span></span>
<span class="line"><span style="color:#24292E;">    filename,</span></span>
<span class="line"><span style="color:#24292E;">    dependencies,</span></span>
<span class="line"><span style="color:#24292E;">    code,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// console.log(dependencies);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeDependenciesGraph</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">entry</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//1. 对入口模块进行一次分析</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">entryModule</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">moduleAnalyser</span><span style="color:#24292E;">(entry);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// console.log(entryModule);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//2. 定义一个数组，存放入口文件和依赖</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">graphArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [entryModule];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//3. 对graphArray进行遍历</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> graphArray.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//4. 取出graphArray中的每一项</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">item</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> graphArray[i];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//5. 取出每一项中的依赖dependencies</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">dependencies</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//6. 如果入口文件有依赖时，就对依赖进行循环</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (dependencies) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">/*7. 通过不断的循环，最终，可以把它的入口文件，以及它的依赖，</span></span>
<span class="line"><span style="color:#6A737D;">            还有它的依赖的依赖，一层一层的遍历出来，并推到graphArray当中*/</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> dependencies) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/*8. 通过队列(先进先出)的方式实现递归的效果；</span></span>
<span class="line"><span style="color:#6A737D;">                为什么用递归？递归地进行分析，是因为每个依赖下面有可能还有依赖*/</span></span>
<span class="line"><span style="color:#24292E;">        graphArray.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">moduleAnalyser</span><span style="color:#24292E;">(dependencies[j]));</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//9. 处理后的graphArray是一个数组，现在需要对它进行格式上的转换</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">graph</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  graphArray.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    graph[item.filename] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      dependencies: item.dependencies,</span></span>
<span class="line"><span style="color:#24292E;">      code: item.code,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> graph;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateCode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">entry</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//1. 将生成的依赖图谱进行格式转换</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">graph</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">makeDependenciesGraph</span><span style="color:#24292E;">(entry));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/** 2. 构造require函数和exports对象，转化成浏览器认识的字符串</span></span>
<span class="line"><span style="color:#6A737D;">   * return require(graph[module].dependencies[relative]) 目的是为了找到真实的路径</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">        (function(graph){</span></span>
<span class="line"><span style="color:#032F62;">            function require(module){</span></span>
<span class="line"><span style="color:#032F62;">                function localRequire(relativePath) {</span></span>
<span class="line"><span style="color:#032F62;">                    return require(graph[module].dependencies[relativePath])</span></span>
<span class="line"><span style="color:#032F62;">                }</span></span>
<span class="line"><span style="color:#032F62;">                var exports = {};</span></span>
<span class="line"><span style="color:#032F62;">                (function(require, exports, code){</span></span>
<span class="line"><span style="color:#032F62;">                    eval(code)</span></span>
<span class="line"><span style="color:#032F62;">                })(localRequire, exports, graph[module].code);</span></span>
<span class="line"><span style="color:#032F62;">                return exports;</span></span>
<span class="line"><span style="color:#032F62;">            };</span></span>
<span class="line"><span style="color:#032F62;">            require(&#39;\${</span><span style="color:#24292E;">entry</span><span style="color:#032F62;">}&#39;)</span></span>
<span class="line"><span style="color:#032F62;">        })(\${</span><span style="color:#24292E;">graph</span><span style="color:#032F62;">});</span></span>
<span class="line"><span style="color:#032F62;">    \`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &#39;./src/index.js&#39; 为入口文件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateCode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./src/index.js&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(code);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br></div></div><p>通过上面的代码我们可以看到，我们先将生成的依赖图谱进行格式转换，之后呢，构造 <code>require</code> 函数和 <code>exports</code> 对象，最终转换成浏览器认识的字符串。</p><h2 id="_2-结果分析" tabindex="-1">2. 结果分析 <a class="header-anchor" href="#_2-结果分析" aria-label="Permalink to &quot;2. 结果分析&quot;">​</a></h2><p>通过上面的业务编写，我们完成了对整个项目进行打包的过程。现在，我们来看一下<strong>打印结果：</strong></p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(function(graph){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FDAEB7;font-style:italic;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">require(module){</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#FDAEB7;font-style:italic;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">localRequire(relativePath)</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">require(graph[module].dependencies[relativePath])</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                var exports = {};</span></span>
<span class="line"><span style="color:#E1E4E8;">                (function(require, exports, code){</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#FDAEB7;font-style:italic;">eval(code)</span></span>
<span class="line"><span style="color:#E1E4E8;">                })(localRequire, exports, graph[</span><span style="color:#FDAEB7;font-style:italic;">module</span><span style="color:#E1E4E8;">].code);</span></span>
<span class="line"><span style="color:#E1E4E8;">                return exports;</span></span>
<span class="line"><span style="color:#E1E4E8;">            };</span></span>
<span class="line"><span style="color:#E1E4E8;">            require(&#39;./src/index.js&#39;)</span></span>
<span class="line"><span style="color:#E1E4E8;">        })({</span><span style="color:#79B8FF;">&quot;./src/index.js&quot;</span><span style="color:#E1E4E8;">:{</span><span style="color:#79B8FF;">&quot;dependencies&quot;</span><span style="color:#E1E4E8;">:{</span><span style="color:#79B8FF;">&quot;./message.js&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;./src</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">message.js&quot;</span><span style="color:#E1E4E8;">},</span><span style="color:#79B8FF;">&quot;code&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">use strict</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">;</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">var _message = _interopRequireDefault(require(</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">./message.js</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">));</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">function _interopRequireDefault(obj) { return obj &amp;&amp; obj.__esModule ? obj : { </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">default</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">: obj }; }</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">console.log(_message[</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">default</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">]);&quot;</span><span style="color:#E1E4E8;">},</span><span style="color:#79B8FF;">&quot;./src\\\\message.js&quot;</span><span style="color:#E1E4E8;">:{</span><span style="color:#79B8FF;">&quot;dependencies&quot;</span><span style="color:#E1E4E8;">:{</span><span style="color:#79B8FF;">&quot;./word.js&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;./src</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">word.js&quot;</span><span style="color:#E1E4E8;">},</span><span style="color:#79B8FF;">&quot;code&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">use strict</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">;</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">Object.defineProperty(exports, </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">__esModule</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">, {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  value: true</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">});</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">exports[</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">default</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">] = void 0;</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">var _word = require(</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">./word.js</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">);</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">var message = </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">hello </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">.concat(_word.word);</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">var _default = message;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">exports[</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">default</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">] = _default;&quot;</span><span style="color:#E1E4E8;">},</span><span style="color:#79B8FF;">&quot;./src\\\\word.js&quot;</span><span style="color:#E1E4E8;">:{</span><span style="color:#79B8FF;">&quot;dependencies&quot;</span><span style="color:#E1E4E8;">:{},</span><span style="color:#79B8FF;">&quot;code&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">use strict</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">;</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">Object.defineProperty(exports, </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">__esModule</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">, {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  value: true</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">});</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">exports.word = void 0;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">var word = &#39;monday&#39;;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">exports.word = word;&quot;</span><span style="color:#E1E4E8;">}});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(function(graph){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#B31D28;font-style:italic;">function</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">require(module){</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#B31D28;font-style:italic;">function</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">localRequire(relativePath)</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">{</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">require(graph[module].dependencies[relativePath])</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                var exports = {};</span></span>
<span class="line"><span style="color:#24292E;">                (function(require, exports, code){</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#B31D28;font-style:italic;">eval(code)</span></span>
<span class="line"><span style="color:#24292E;">                })(localRequire, exports, graph[</span><span style="color:#B31D28;font-style:italic;">module</span><span style="color:#24292E;">].code);</span></span>
<span class="line"><span style="color:#24292E;">                return exports;</span></span>
<span class="line"><span style="color:#24292E;">            };</span></span>
<span class="line"><span style="color:#24292E;">            require(&#39;./src/index.js&#39;)</span></span>
<span class="line"><span style="color:#24292E;">        })({</span><span style="color:#005CC5;">&quot;./src/index.js&quot;</span><span style="color:#24292E;">:{</span><span style="color:#005CC5;">&quot;dependencies&quot;</span><span style="color:#24292E;">:{</span><span style="color:#005CC5;">&quot;./message.js&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;./src</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">message.js&quot;</span><span style="color:#24292E;">},</span><span style="color:#005CC5;">&quot;code&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">use strict</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">;</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">var _message = _interopRequireDefault(require(</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">./message.js</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">));</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">function _interopRequireDefault(obj) { return obj &amp;&amp; obj.__esModule ? obj : { </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">default</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">: obj }; }</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">console.log(_message[</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">default</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">]);&quot;</span><span style="color:#24292E;">},</span><span style="color:#005CC5;">&quot;./src\\\\message.js&quot;</span><span style="color:#24292E;">:{</span><span style="color:#005CC5;">&quot;dependencies&quot;</span><span style="color:#24292E;">:{</span><span style="color:#005CC5;">&quot;./word.js&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;./src</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">word.js&quot;</span><span style="color:#24292E;">},</span><span style="color:#005CC5;">&quot;code&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">use strict</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">;</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">Object.defineProperty(exports, </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">__esModule</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">, {</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  value: true</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">});</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">exports[</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">default</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">] = void 0;</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">var _word = require(</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">./word.js</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">);</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">var message = </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">hello </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">.concat(_word.word);</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">var _default = message;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">exports[</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">default</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">] = _default;&quot;</span><span style="color:#24292E;">},</span><span style="color:#005CC5;">&quot;./src\\\\word.js&quot;</span><span style="color:#24292E;">:{</span><span style="color:#005CC5;">&quot;dependencies&quot;</span><span style="color:#24292E;">:{},</span><span style="color:#005CC5;">&quot;code&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">use strict</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">;</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">Object.defineProperty(exports, </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">__esModule</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">, {</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  value: true</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">});</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">exports.word = void 0;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">var word = &#39;monday&#39;;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">exports.word = word;&quot;</span><span style="color:#24292E;">}});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>接下来，我们把这个打印结果，放到浏览器上进行检验。<strong>检验结果如下：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270745219.png" alt="检验结果"></p><p>大家可以看到，打包后的结果，在浏览器上成功运行了，并显示除了 <code>hello monday</code> ，至此，说明我们的项目打包成功。</p><h1 id="🍓-四、结束语" tabindex="-1">🍓 四、结束语 <a class="header-anchor" href="#🍓-四、结束语" aria-label="Permalink to &quot;🍓 四、结束语&quot;">​</a></h1><p>在上面的这篇文章中，从模块的入口文件分析，再到依赖图谱的解析，最后到生成浏览器所认识的代码，我们了解了打包工具的整个操作流程。</p><p>到这里，关于本文的讲解就结束啦！希望对大家有帮助~</p><p>如文章有误或有不理解的地方，欢迎小伙伴们评论区留言撒~💬</p><p>本文代码已上传至公众号，后台回复关键词 <code>webpack</code> 即可获取~</p><h1 id="🐣-彩蛋-one-more-thing" tabindex="-1">🐣 彩蛋 One More Thing <a class="header-anchor" href="#🐣-彩蛋-one-more-thing" aria-label="Permalink to &quot;🐣 彩蛋 One More Thing&quot;">​</a></h1><h2 id="往期推荐" tabindex="-1">（：往期推荐 <a class="header-anchor" href="#往期推荐" aria-label="Permalink to &quot;（：往期推荐&quot;">​</a></h2><p>webpack 入门核心知识 👉<a href="https://blog.csdn.net/weixin_44803753/article/details/118728201" target="_blank" rel="noreferrer">不会 webpack 的前端可能是捡来的，万字总结 webpack 的超入门核心知识</a></p><p>webpack 入门进阶知识 👉<a href="https://blog.csdn.net/weixin_44803753/article/details/118885391" target="_blank" rel="noreferrer">webpack 入门核心知识还看不过瘾？速来围观万字进阶知识</a></p><p>webpack 实战案例配置 👉<a href="https://blog.csdn.net/weixin_44803753/article/details/118977647" target="_blank" rel="noreferrer">[万字总结]webpack 只会基础配置可不行！快来把实战案例配置一起打包带走</a></p><p>手写 loader 和 plugin👉<a href="https://blog.csdn.net/weixin_44803753/article/details/119022964" target="_blank" rel="noreferrer">webpack 实战之手写一个 loader 和 plugin</a></p>`,68),e=[o];function c(t,r,y,E,i,F){return n(),a("div",null,e)}const d=s(p,[["render",c]]);export{b as __pageData,d as default};
