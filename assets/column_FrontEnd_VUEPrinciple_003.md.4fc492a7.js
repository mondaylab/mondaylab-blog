import{_ as s,c as n,o as a,N as l}from"./chunks/framework.6510d215.js";const u=JSON.parse('{"title":"模板编译template的背后，究竟发生了什么事？带你了解template的纸短情长","description":"","frontmatter":{"title":"模板编译template的背后，究竟发生了什么事？带你了解template的纸短情长","author":"周一","date":"2021-06-29","categories":["前端开发"],"tags":["vue.js原理解析"],"sidebar":"auto"},"headers":[{"level":1,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":1,"title":"一、📑 初识模板编译","slug":"一、📑-初识模板编译","link":"#一、📑-初识模板编译","children":[{"level":2,"title":"1、vue 组件中使用 render 代替 template","slug":"_1、vue-组件中使用-render-代替-template","link":"#_1、vue-组件中使用-render-代替-template","children":[]},{"level":2,"title":"2、模板编译总结","slug":"_2、模板编译总结","link":"#_2、模板编译总结","children":[]}]},{"level":1,"title":"二、✏️ 感受模板编译的美","slug":"二、✏️-感受模板编译的美","link":"#二、✏️-感受模板编译的美","children":[{"level":2,"title":"1、with 语法","slug":"_1、with-语法","link":"#_1、with-语法","children":[{"level":3,"title":"（1）例子展示 🌰","slug":"_1-例子展示-🌰","link":"#_1-例子展示-🌰","children":[]},{"level":3,"title":"（2）知识点归纳","slug":"_2-知识点归纳","link":"#_2-知识点归纳","children":[]}]}]},{"level":1,"title":"三、📈 编译模板","slug":"三、📈-编译模板","link":"#三、📈-编译模板","children":[{"level":2,"title":"1、编译模板碎碎念","slug":"_1、编译模板碎碎念","link":"#_1、编译模板碎碎念","children":[]},{"level":2,"title":"2、编译模板过程","slug":"_2、编译模板过程","link":"#_2、编译模板过程","children":[{"level":3,"title":"（1）初始化一个 npm 环境","slug":"_1-初始化一个-npm-环境","link":"#_1-初始化一个-npm-环境","children":[]},{"level":3,"title":"（2）安装编译器","slug":"_2-安装编译器","link":"#_2-安装编译器","children":[]},{"level":3,"title":"（3）新建新文件","slug":"_3-新建新文件","link":"#_3-新建新文件","children":[]},{"level":3,"title":"（4）了解缩写函数","slug":"_4-了解缩写函数","link":"#_4-了解缩写函数","children":[]},{"level":3,"title":"（5）编译插值","slug":"_5-编译插值","link":"#_5-编译插值","children":[]},{"level":3,"title":"（6）编译表达式","slug":"_6-编译表达式","link":"#_6-编译表达式","children":[]},{"level":3,"title":"（7）编译属性和动态属性","slug":"_7-编译属性和动态属性","link":"#_7-编译属性和动态属性","children":[]},{"level":3,"title":"（8）编译条件","slug":"_8-编译条件","link":"#_8-编译条件","children":[]},{"level":3,"title":"（9）编译循环","slug":"_9-编译循环","link":"#_9-编译循环","children":[]},{"level":3,"title":"（10）编译事件","slug":"_10-编译事件","link":"#_10-编译事件","children":[]},{"level":3,"title":"（11）编译 v-model","slug":"_11-编译-v-model","link":"#_11-编译-v-model","children":[]}]},{"level":2,"title":"3、模板编译总结","slug":"_3、模板编译总结","link":"#_3、模板编译总结","children":[]}]},{"level":1,"title":"四、🔑 组件渲染/更新过程","slug":"四、🔑-组件渲染-更新过程","link":"#四、🔑-组件渲染-更新过程","children":[{"level":2,"title":"1、初识组件渲染/更新","slug":"_1、初识组件渲染-更新","link":"#_1、初识组件渲染-更新","children":[]},{"level":2,"title":"2、组件渲染/更新过程","slug":"_2、组件渲染-更新过程","link":"#_2、组件渲染-更新过程","children":[{"level":3,"title":"（1）初次渲染过程","slug":"_1-初次渲染过程","link":"#_1-初次渲染过程","children":[{"level":4,"title":"1）解析模板为 render 函数","slug":"_1-解析模板为-render-函数","link":"#_1-解析模板为-render-函数","children":[]},{"level":4,"title":"2）触发响应式","slug":"_2-触发响应式","link":"#_2-触发响应式","children":[]},{"level":4,"title":"3）执行 render 函数，生成 vnode","slug":"_3-执行-render-函数-生成-vnode","link":"#_3-执行-render-函数-生成-vnode","children":[]}]},{"level":3,"title":"（2）更新过程","slug":"_2-更新过程","link":"#_2-更新过程","children":[{"level":4,"title":"1）更新过程细述","slug":"_1-更新过程细述","link":"#_1-更新过程细述","children":[]},{"level":4,"title":"2）完成流程图","slug":"_2-完成流程图","link":"#_2-完成流程图","children":[]}]},{"level":3,"title":"（3）异步渲染","slug":"_3-异步渲染","link":"#_3-异步渲染","children":[]}]},{"level":2,"title":"3、小结","slug":"_3、小结","link":"#_3、小结","children":[]}]},{"level":1,"title":"五、✔️ 结束语","slug":"五、✔️-结束语","link":"#五、✔️-结束语","children":[]}],"relativePath":"column/FrontEnd/VUEPrinciple/003.md","lastUpdated":1685151998000}'),e={name:"column/FrontEnd/VUEPrinciple/003.md"},p=l(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p>依稀记得我们在 vue 时，最上方总是有一个 <code>template</code> 包围着。而很多时候，我们也没有很在意的去意识到 <code>&lt;template&gt;&lt;/template&gt;</code> 究竟是什么。</p><p>在今天的这篇文章中，就带大家一起来了解，模板编译 <code>template</code> 的背后，究竟发生了什么事情？</p><p>一起来了解模板编译的纸短情长 🚋🚋🚋</p><h1 id="一、📑-初识模板编译" tabindex="-1">一、📑 初识模板编译 <a class="header-anchor" href="#一、📑-初识模板编译" aria-label="Permalink to &quot;一、📑 初识模板编译&quot;">​</a></h1><h2 id="_1、vue-组件中使用-render-代替-template" tabindex="-1">1、vue 组件中使用 render 代替 template <a class="header-anchor" href="#_1、vue-组件中使用-render-代替-template" aria-label="Permalink to &quot;1、vue 组件中使用 render 代替 template&quot;">​</a></h2><p><code>template</code> ，即模板。模板是 <code>vue</code> 开发中最常用的部分，即与 vue 的使用关联最紧密的原理。它不是 <code>html</code> ，它有指令、有插值、也有 <code>JS</code> 表达式，那它，到底是什么呢？我们来看个例子。</p><p>在 <code>vue</code> 中定义一个组件，通常会使用 <code>template</code> 模板字符串来定义一个组件。<strong>比如：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">heading</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>一般情况下，模板的定义是上面这种情况。同时，在程序编译期间，模板会将 <code>template</code> 的这种<strong>字符串类型</strong>，编译成 <code>render</code> 函数。</p><hr><p>但是呢，在有些复杂的情况下，可能就不能用 <code>template</code> 函数了，这个时候会考虑直接用 <code>render</code> 函数来定义一个组件。<strong>比如：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">heading</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">createElement</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">createElement</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">h</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">level</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//tag props</span></span>
<span class="line"><span style="color:#F07178;">      [</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//children</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">createElement</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            attrs</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">              name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">headerId</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">              href</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">headerId</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">this is a tag</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">        )</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      ]</span></span>
<span class="line"><span style="color:#F07178;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>就像上面这样子，我们也可以通过使用一个 <code>render</code> 函数来定义一个组件。</p><h2 id="_2、模板编译总结" tabindex="-1">2、模板编译总结 <a class="header-anchor" href="#_2、模板编译总结" aria-label="Permalink to &quot;2、模板编译总结&quot;">​</a></h2><p>看完上面的例子，我们来做个小结 ✨</p><ul><li>template，即模板。这个模板会编译成 <code>render</code> 函数，其中 <code>render</code> 函数用的是 <code>with</code> 语法。</li><li>过程：模板 → <code>render</code> 函数 → <code>vnode</code> → 组件渲染和更新过程。</li><li><code>vue</code> 组件可以用 <code>render</code> 函数代替 <code>template</code> 。</li><li><code>React</code> 一直都用 <code>render</code> ，没有模板（这里仅作知识补充，不做讲解）。</li></ul><h1 id="二、✏️-感受模板编译的美" tabindex="-1">二、✏️ 感受模板编译的美 <a class="header-anchor" href="#二、✏️-感受模板编译的美" aria-label="Permalink to &quot;二、✏️ 感受模板编译的美&quot;">​</a></h1><h2 id="_1、with-语法" tabindex="-1">1、with 语法 <a class="header-anchor" href="#_1、with-语法" aria-label="Permalink to &quot;1、with 语法&quot;">​</a></h2><h3 id="_1-例子展示-🌰" tabindex="-1">（1）例子展示 🌰 <a class="header-anchor" href="#_1-例子展示-🌰" aria-label="Permalink to &quot;（1）例子展示 🌰&quot;">​</a></h3><p>先来了解模板编译中一个很重要的知识点， <code>with</code> 语法。下面先用一个例子来展示 with 语法与普通语法的不同。</p><p><strong>不使用 with 语法执行程序时：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">b)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">c)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>使用 with 语法执行程序时：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//使用with，能改变 {} 内自由变量的查找方式</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将 {} 内自由变量，当作 obj 的属性来查找</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> (obj) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//会报错！！！</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_2-知识点归纳" tabindex="-1">（2）知识点归纳 <a class="header-anchor" href="#_2-知识点归纳" aria-label="Permalink to &quot;（2）知识点归纳&quot;">​</a></h3><p>看完上面 with 语法的例子，我们来对 <code>with</code> 语法做一个知识点归纳。</p><ul><li><code>with</code> 语法会改变 <code>{}</code> 内<strong>自由变量的查找规则</strong>，当作 <code>obj</code> 属性来查找；</li><li>如果在当前 <code>{}</code> 内找不到匹配的 <code>obj</code> 属性，就会报错；</li><li><code>with</code> 要谨慎使用，它打破了<strong>作用域规则</strong>，会让其<strong>易读性变差</strong>。</li></ul><h1 id="三、📈-编译模板" tabindex="-1">三、📈 编译模板 <a class="header-anchor" href="#三、📈-编译模板" aria-label="Permalink to &quot;三、📈 编译模板&quot;">​</a></h1><h2 id="_1、编译模板碎碎念" tabindex="-1">1、编译模板碎碎念 <a class="header-anchor" href="#_1、编译模板碎碎念" aria-label="Permalink to &quot;1、编译模板碎碎念&quot;">​</a></h2><p>在前面中我们讲过，模板它不是 <code>html</code> ，它有<strong>指令</strong>、有<strong>插值</strong>、也有<strong>JS 表达式</strong>，它能实现判断、也能实现循环。</p><p>试想一下模板为什么不是 <code>html</code> ？</p><p>思考一下，假如你在写程序时，能用 <code>html</code> 写出一个判断或者循环出来吗？答案自然时不行的。</p><p>所以说， <code>html</code> 只是一个<strong>静态的标签语言</strong>，你写什么它就显示什么，它没有办法实现一个逻辑，或者做循环和判断。</p><p>因此，对于前端浏览器而言，只有 <code>JS</code> 才能实现判断和循环等各种逻辑功能。</p><p>所以，<strong>模板</strong>一定是<strong>转换为某种 <code>JS</code> 代码</strong>之后才进行运行的。而这个模板怎么转换成 <code>js</code> 代码的这个过程，就称为<strong>编译模板</strong>。</p><p>那这个模板是怎么转的呢？接下来我们来看下编译模板的过程。</p><h2 id="_2、编译模板过程" tabindex="-1">2、编译模板过程 <a class="header-anchor" href="#_2、编译模板过程" aria-label="Permalink to &quot;2、编译模板过程&quot;">​</a></h2><h3 id="_1-初始化一个-npm-环境" tabindex="-1">（1）初始化一个 npm 环境 <a class="header-anchor" href="#_1-初始化一个-npm-环境" aria-label="Permalink to &quot;（1）初始化一个 npm 环境&quot;">​</a></h3><p>首先先建立一个新文件，可以命名为 <code>vue-template-complier-demo</code> 。之后用以下命令行初始化一个 npm 的环境：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-安装编译器" tabindex="-1">（2）安装编译器 <a class="header-anchor" href="#_2-安装编译器" aria-label="Permalink to &quot;（2）安装编译器&quot;">​</a></h3><p><code>npm</code> 安装模板编译器。<strong>命令行如下：</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">vue-template-compiler</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-新建新文件" tabindex="-1">（3）新建新文件 <a class="header-anchor" href="#_3-新建新文件" aria-label="Permalink to &quot;（3）新建新文件&quot;">​</a></h3><p>在根目录下初始化新建一个 <code>index.js</code> 文件，并引入 <code>vue-template-compiler</code> 。代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//引入vue-template-compiler</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> compiler </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue-template-compiler</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 编译</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> compiler</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#A6ACCD;">(template)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">render)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>接下来我们就来看下，模板中的插值、表达式、属性和动态属性等等类型的编译，到底是怎么样的？</p><h3 id="_4-了解缩写函数" tabindex="-1">（4）了解缩写函数 <a class="header-anchor" href="#_4-了解缩写函数" aria-label="Permalink to &quot;（4）了解缩写函数&quot;">​</a></h3><p>以下 vue 源码中的缩写函数先了解，将在下面的讲解中用到。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 从 vue 源码中找到缩写函数的含义</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">installRenderHelpers</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createElement</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_o</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">markOnce</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">toNumber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_s</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_l</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">renderList</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">renderSlot</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_q</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">looseEqual</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">looseIndexOf</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_m</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">renderStatic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_f</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">resolveFilter</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_k</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">checkKeyCodes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bindObjectProps</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_v</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createTextVNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_e</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createEmptyVNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_u</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">resolveScopedSlots</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_g</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bindObjectListeners</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_d</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bindDynamicKeys</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_p</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prependModifier</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="_5-编译插值" tabindex="-1">（5）编译插值 <a class="header-anchor" href="#_5-编译插值" aria-label="Permalink to &quot;（5）编译插值&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//引入vue-template-compiler</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> compiler </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue-template-compiler</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 插值</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> template </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">&lt;p&gt;{{message}}&lt;/p&gt;</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// with(this){return createElement(&#39;p&#39;,[createTextVNode(toString(message))])}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// h -&gt; vnode</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// createElement -&gt; vnode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 编译</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> compiler</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#A6ACCD;">(template)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">render)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>编译以上内容，打印结果如下：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270738251.png" alt="编译插值"></p><p>从上图中可以看到，<strong>插值</strong>类型的模板最终被编译成一个 <code>with</code> 语句，并且这个 <code>with</code> 语句的参数都指向了 <code>this</code> 。</p><p>同时，大家可以看到，里面有一个 <code>_c</code> ， <code>_v</code> ， <code>_s</code>。那这几个元素是什么呢？</p><p>这个就是上面第四点中提到的 <code>vue</code> 源码中的缩写函数。 <code>_c</code> 对应的就是源码中的 <code>createElement</code>， <code>_v</code> 对应的就是源码中的 <code>createTextVNode</code> ，<code>_s</code> 对应的就是源码中的 <code>toString</code> 。</p><p>所以，以上编译后的 <code>with</code> 语句 <code>with(this){return _c(&#39;p&#39;,[_v(_s(message))])} </code> ，事实上就是 <code>with(this){return createElement(&#39;p&#39;,[createTextVNode(toString(message))])}</code> 。</p><p>以上这个语句的意思为，编译创建一个 <code>p</code> 元素，之后呢， <code>p</code> 元素就没有子元素了，于是就创建它的文本节点 <code>message</code> ，同时 <code>message</code> 是字符串的形式存在，因此要进行 <code>toString</code> 。</p><p>额外再补充一个知识点， <code>createElement</code> 其实就等于我们平常所说的 <code>h</code> 函数，返回的是一个 <code>虚拟DOM</code> 节点。</p><p>以上就是一个<strong>插值模板</strong>编译的过程，下面再用几个例子让大家熟悉。</p><h3 id="_6-编译表达式" tabindex="-1">（6）编译表达式 <a class="header-anchor" href="#_6-编译表达式" aria-label="Permalink to &quot;（6）编译表达式&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//引入vue-template-compiler</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> compiler </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue-template-compiler</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 表达式</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> template </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">&lt;p&gt;{{flag ? message : &#39;no message found&#39;}}&lt;/p&gt;</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// with(this){return _c(&#39;p&#39;,[_v(_s(flag ? message : &#39;no message found&#39;))])}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 编译</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> compiler</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#A6ACCD;">(template)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">render)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>编译以上内容，打印结果如下：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270738272.png" alt="表达式"></p><p>依据上面插值的分析方法，我们来分析<strong>表达式</strong>的模板编译过程。</p><p><strong>表达式</strong>编译后的结果返回了一个虚拟 <code>DOM</code> 节点，同样地，查询 <code>vue</code> 源码中的缩写函数我们可以发现， <code>with(this){return _c(&#39;p&#39;,[_v(_s(flag ? message : &#39;no message found&#39;))])}</code> 最终的结果等于 <code>with(this){return createElement(&#39;p&#39;,[createTextVnode(toString(flag ? message : &#39;no message found&#39;))])}</code> 。</p><p>先创建了一个 <code>p</code> 元素，之后 <code>p</code> 元素<strong>没有子元素</strong>了，于是<strong>创建文本节点</strong>，最终 <code>toString</code> 三目表达式里面的内容。</p><h3 id="_7-编译属性和动态属性" tabindex="-1">（7）编译属性和动态属性 <a class="header-anchor" href="#_7-编译属性和动态属性" aria-label="Permalink to &quot;（7）编译属性和动态属性&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//引入vue-template-compiler</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> compiler </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue-template-compiler</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 属性和动态属性</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> template </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;div id=&quot;div1&quot; class=&quot;container&quot;&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">        &lt;img :src=&quot;imgUrl&quot;/&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// with(this){return _c(&#39;div&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//      {staticClass:&quot;container&quot;,attrs:{&quot;id&quot;:&quot;div1&quot;}},</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//      [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//          _c(&#39;img&#39;,{attrs:{&quot;src&quot;:imgUrl}})])}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 编译</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> compiler</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#A6ACCD;">(template)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">render)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><strong>编译以上内容，打印结果如下：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270738255.png" alt="属性和动态属性"></p><p>依据上面的分析方法，我们来分析<strong>属性和动态属性</strong>的模板编译过程。</p><p><strong>属性和动态属性</strong>编译后的结果返回了一个虚拟 <code>DOM</code> 节点，同样地，查询 <code>vue</code> 源码中的<strong>缩写函数</strong>我们可以发现， <code>with(this){return _c(&#39;div&#39;,{staticClass:&quot;container&quot;,attrs:{&quot;id&quot;:&quot;div1&quot;}},[_c(&#39;img&#39;,{attrs:{&quot;src&quot;:imgUrl}})])}</code> 最终的结果等于 <code>with(this){return createElement(&#39;div&#39;,{staticClass:&quot;container&quot;,attrs:{&quot;id&quot;:&quot;div1&quot;}},[createElement(&#39;img&#39;,{attrs:{&quot;src&quot;:imgUrl}})])}</code> 。</p><p>此时我们可以看到，返回的 <code>vnode</code> 节点中，包含 <code>class</code> 名字， <code>container</code> 。此时 <code>div</code> 有一个 <code>id</code> 选择器，这个 <code>id</code> 选择器是该 <code>div</code> 的一个属性，于是就通过 attrs 来表示。</p><p>最外层结束后，里面还有一层， <code>img</code> 。 <code>img</code> 可以视其为跟 <code>div</code> 一样的标签，于是先创建 <code>img</code> 元素，又因为 <code>img</code> 绑定了一个具体的值，就像是 <code> div</code> 里面绑定了 <code>id</code> 选择器。所以在创建完 <code>img</code> 的值之后，继续用 <code>attrs</code> 来传递 <code>img</code> 所绑定的值。</p><h3 id="_8-编译条件" tabindex="-1">（8）编译条件 <a class="header-anchor" href="#_8-编译条件" aria-label="Permalink to &quot;（8）编译条件&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 条件</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> template </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;div&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">        &lt;p v-if=&quot;flag === &#39;a&#39;&quot;&gt;A&lt;/p&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">        &lt;p v-else&gt;B&lt;/p&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// with(this){return _c(&#39;div&#39;,[(flag === &#39;a&#39;)?_c(&#39;p&#39;,[_v(&quot;A&quot;)]):_c(&#39;p&#39;,[_v(&quot;B&quot;)])])}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>编译以上内容，打印结果如下：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270738996.png" alt="条件"></p><p>依据上面的分析方法，我们来分析<strong>条件</strong>的模板编译过程。</p><p>对于<strong>条件</strong>来说，首先是先创建一个 <code>div</code> 元素，之后呢，模板编译把 <code>v-if</code> 和 <code>v-else</code> 分割成一个三目表达式的方式来进行编译。</p><h3 id="_9-编译循环" tabindex="-1">（9）编译循环 <a class="header-anchor" href="#_9-编译循环" aria-label="Permalink to &quot;（9）编译循环&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 循环</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> template </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;ul&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">        &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;{{item.title}}&lt;/li&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// with(this){return _c(&#39;ul&#39;,_l((list),function(item){return _c(&#39;li&#39;,{key:item.id},[_v(_s(item.title))])}),0)}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>编译以上内容，打印结果如下：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270738938.png" alt="循环"></p><p>依据上面的分析方法，我们来分析<strong>循环</strong>的模板编译过程。</p><p>对于以上<strong>循环</strong>来说，首先会创建一个 <code>ul</code> 元素，之后查询 <code>_l</code> 的缩写函数我们知道它是 <code>renderlist</code> ， 所以 <code>list</code> 列表会被 <code>renderList</code> 函数进行编译。</p><p>最后渲染后的 <code>item</code> 被当作<strong>函数的参数</strong>进行传递，并列返回对应 <code>item</code> 的 <code>li</code> 列表元素。</p><h3 id="_10-编译事件" tabindex="-1">（10）编译事件 <a class="header-anchor" href="#_10-编译事件" aria-label="Permalink to &quot;（10）编译事件&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 事件</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> template </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;button @click=&quot;clickHandler&quot;&gt;submit&lt;/button&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// with(this){return _c(&#39;button&#39;,{on:{&quot;click&quot;:clickHandler}},[_v(&quot;submit&quot;)])}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>编译以上内容，打印结果如下：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270738715.png" alt="事件"></p><p>依据上面的分析方法，我们来分析<strong>事件</strong>的模板编译过程。</p><p>对于<strong>事件</strong>来说，首先会创建一个 <code>button</code> 元素，之后 <code>@click</code> 即 <code>v-on:click</code> 会被编译成 <code>on:{&quot;click&quot;:clickHandler}</code> 。最后是 <code>_v</code> ，即 <code>createTextVNode</code> 。创建一个 <code>submit</code> 的文本节点，将 <code>click</code> 的内容提交上去。</p><h3 id="_11-编译-v-model" tabindex="-1">（11）编译 v-model <a class="header-anchor" href="#_11-编译-v-model" aria-label="Permalink to &quot;（11）编译 v-model&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// v-model</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> template </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 主要看 input 事件</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// with(this){return _c(&#39;input&#39;,{directives:[{name:&quot;model&quot;,rawName:&quot;v-model&quot;,value:(name),expression:&quot;name&quot;}],attrs:{&quot;type&quot;:&quot;text&quot;},domProps:{&quot;value&quot;:(name)},on:{&quot;input&quot;:function($event){if($event.target.composing)return;name=$event.target.value}}})}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>编译以上内容，打印结果如下：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270739381.png" alt="v-model"></p><p>依据上面的分析方法，我们来分析<strong>双向绑定 v-model</strong>的模板编译过程。</p><p>对于 <code>v-model</code> 来说，主要看的是 <code>input</code> 事件。 <code>v-model</code> 的背后，绑定的是 <code>name</code> 和 <code>value</code> 这两个语法糖。之后通过 <code>attrs</code> 去创建 <code>类型type</code> 为 <code>text</code> 的属性。</p><p>最终是 <code>input</code> 事件， <code>input</code> 事件绑定 <code>$event</code> ，最后， <code>name</code> 的值就等同于 <code>$event.target.value</code> ，这样，<strong>数据就实现了双向绑定</strong>。</p><h2 id="_3、模板编译总结" tabindex="-1">3、模板编译总结 <a class="header-anchor" href="#_3、模板编译总结" aria-label="Permalink to &quot;3、模板编译总结&quot;">​</a></h2><p>看完上述的内容，我们来对<strong>模板编译做个小结：</strong></p><p><strong>（1）从 render 函数到 vnode</strong></p><p>模板编译后是一个 <code>render</code> 函数，执行 <code>render</code> 函数后返回一个 <code>vnode</code> ；</p><p><strong>（2）vnode 到 patch 和 diff</strong></p><p>基于 <code>vnode</code> 的基础上，再执行 <code>patch</code> 和 <code>diff</code> ；</p><p><strong>（3）模板编译工具</strong></p><p>在平常的开发中，我们可以使用 <code>webpack</code> 、 <code>vue-loader</code> 等构建工具，在开发环境下<strong>编译模板</strong>。</p><h1 id="四、🔑-组件渲染-更新过程" tabindex="-1">四、🔑 组件渲染/更新过程 <a class="header-anchor" href="#四、🔑-组件渲染-更新过程" aria-label="Permalink to &quot;四、🔑 组件渲染/更新过程&quot;">​</a></h1><h2 id="_1、初识组件渲染-更新" tabindex="-1">1、初识组件渲染/更新 <a class="header-anchor" href="#_1、初识组件渲染-更新" aria-label="Permalink to &quot;1、初识组件渲染/更新&quot;">​</a></h2><p>讲完上完的内容，我们再来讲一个与编译模板关联性很强的知识点：<strong>组件渲染/更新过程</strong>。</p><p>一个组件，从<strong>渲染到页面上</strong>开始，再到修改 <code>data</code> 去触发更新（数据驱动视图），其背后的原理是什么，又需要掌握哪些要点呢？</p><p>事实上，组件在渲染之前，会先进行<strong>模板编译</strong>，模板 <code>template</code> 会编译成 <code>render</code> 函数。</p><p>之后就是数据的监听了，这就要谈到<strong>响应式数据</strong>。vue 的<strong>响应式</strong>通过操作 <code>Object.defineProperty()</code> ，去监听 <code>getter</code> 和 <code>setter</code> 方法，来使得数据实时更新。</p><p>监听完数据之后，就是执行 <code>render</code> 函数，生成 <code>vnode</code> 。</p><p>到了 <code>vnode</code> （即 <code>vdom</code> ）这一步之后，会进行 <code>patch(elem,vnode)</code> 和 <code>patch(vnode,newVnode)</code> 的比较。</p><p>关于<a href="https://blog.csdn.net/weixin_44803753/article/details/117535265" target="_blank" rel="noreferrer">响应式原理</a>和<a href="https://blog.csdn.net/weixin_44803753/article/details/117594534" target="_blank" rel="noreferrer">vdom 的解读</a>，如有需要可以查看我的前两篇文章进行学习，这里不再展开细述~</p><h2 id="_2、组件渲染-更新过程" tabindex="-1">2、组件渲染/更新过程 <a class="header-anchor" href="#_2、组件渲染-更新过程" aria-label="Permalink to &quot;2、组件渲染/更新过程&quot;">​</a></h2><p>组件渲染和更新过程主要经过以下三个步骤：<strong>初次渲染过程 → 更新过程 → 异步渲染</strong>。</p><p>接下来就这三个步骤进行一一讲解。</p><h3 id="_1-初次渲染过程" tabindex="-1">（1）初次渲染过程 <a class="header-anchor" href="#_1-初次渲染过程" aria-label="Permalink to &quot;（1）初次渲染过程&quot;">​</a></h3><p>初次渲染过程，即组件第一次渲染是怎么样的，怎么把模板渲染到页面上。<strong>具体有以下三个步骤：</strong></p><ul><li>解析模板为 <code>render</code> 函数；</li><li>触发响应式，监听 <code>data</code> 属性 <code>getter</code> 和 <code>setter</code> ；</li><li>执行 <code>render</code> 函数，生成 <code>vnode</code> ，进行 <code>patch(elem,vnode)</code> 。</li></ul><p>下面就这三个步骤来进行一一讲解。</p><h4 id="_1-解析模板为-render-函数" tabindex="-1">1）解析模板为 render 函数 <a class="header-anchor" href="#_1-解析模板为-render-函数" aria-label="Permalink to &quot;1）解析模板为 render 函数&quot;">​</a></h4><p>在<strong>开发环境</strong>下，解析模板为 <code>render</code> 函数一般是由 <code>vue-loader</code> 这个插件来处理的。还有一种情况就是，用户直接用 <code>cdn</code> 的方式引入 <code>vuejs</code> 的文件进行本地代码练习，这种情况下，解析模板为 <code>render</code> 函数就是在<strong>浏览器环境</strong>运行的。</p><p>小知识了解完，我们来看下这个步骤。</p><p>解析模板为 <code>render</code> 函数，即解析 <code>template</code> 为 <code>render</code> 函数，这个就是上述文章中说的<strong>编译模板</strong>。</p><h4 id="_2-触发响应式" tabindex="-1">2）触发响应式 <a class="header-anchor" href="#_2-触发响应式" aria-label="Permalink to &quot;2）触发响应式&quot;">​</a></h4><p>在编译完模板之后， <code>render</code> 函数有了，我们来开始监听 <code>data</code> 属性。</p><p>监听 <code>data</code> 属性，这个时候我们就需要触发响应式，也就是渲染数据。</p><p>那在这个阶段怎么渲染数据呢？</p><p>这个阶段我们需要执行 <code>render</code> 函数， <code>render</code> 函数会触发 <code>getter</code> 方法，因为数据没有进行更新，只是进行渲染。只有在进行渲染的时候才会操作 <code>setter</code> 方法。</p><h4 id="_3-执行-render-函数-生成-vnode" tabindex="-1">3）执行 render 函数，生成 vnode <a class="header-anchor" href="#_3-执行-render-函数-生成-vnode" aria-label="Permalink to &quot;3）执行 render 函数，生成 vnode&quot;">​</a></h4><p>最后，当数据渲染完毕后，就会执行第一步生成的 <code>render</code> 函数，然后生成虚拟 <code>DOM</code> 节点 <code>vnode</code> ，之后进行 <code>patch(elem,vnode)</code> 。</p><h3 id="_2-更新过程" tabindex="-1">（2）更新过程 <a class="header-anchor" href="#_2-更新过程" aria-label="Permalink to &quot;（2）更新过程&quot;">​</a></h3><h4 id="_1-更新过程细述" tabindex="-1">1）更新过程细述 <a class="header-anchor" href="#_1-更新过程细述" aria-label="Permalink to &quot;1）更新过程细述&quot;">​</a></h4><p>更新过程，即 <code>data</code> 修改之后，组件是怎么更新的。</p><p>在这个阶段呢，将会修改 <code>data</code> ，并且触发 <code>setter</code> （注意：在此之前 <code>data</code> 在 <code>getter</code> 中已经被监听）。</p><p>触发完 <code>setter</code> 之后，重新执行 <code>render</code> 函数，并生成 <code>newVnode</code> ，最后进行 <code>patch(vnode, newVnode)</code> 的 diff 比较。</p><h4 id="_2-完成流程图" tabindex="-1">2）完成流程图 <a class="header-anchor" href="#_2-完成流程图" aria-label="Permalink to &quot;2）完成流程图&quot;">​</a></h4><p>接下来我们用一张流程图来完整的回顾渲染和更新的过程。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270739582.png" alt="模板编译流程图"></p><h3 id="_3-异步渲染" tabindex="-1">（3）异步渲染 <a class="header-anchor" href="#_3-异步渲染" aria-label="Permalink to &quot;（3）异步渲染&quot;">​</a></h3><p>在渲染和更新结束之后，我们的程序可能还有可能会发生多个程序同时加载，这就涉及到一个<strong>异步渲染</strong>问题。</p><p>异步渲染问题，我们用 <code>$nextTick</code> 来作为例子讲解。</p><p>假设我们现在要实现一个功能，当我们点击按钮时，打印出列表的项数。这个时候我们大多人可能会这么操作。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- ref的设置时为了方便后续可以用来：取节点的DOM元素 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ul1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(item, index) in list</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{item}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">addItem</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">添加一项</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        list</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">addItem</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取 DOM 元素</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ulElem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$refs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ul1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ulElem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">childNodes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p><strong>此时浏览器的显示效果如下：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270739099.gif" alt="nextTick"></p><p>细心的小伙伴已经发现，浏览器并没有按照我们所想的打印。当页面上的列表显示 <code>6项</code> 内容时，此时控制台只打印 <code>3项</code> ；当显示 <code>9项</code> 时，此时控制台直接只打印 <code>6项</code> 。</p><p><strong>那这究竟时为什么呢？</strong></p><p>其实，当我们点击的那一刻， <code>data</code> 发生变化，但是 <code>DOM</code> 并不会立刻进行渲染。所以等到我们点击完成的时候，获取的元素还是原来触发的内容，而不会增添上新的内容。</p><p>那我们所期望的是，当点击之后立刻触发 <code>DOM</code> 渲染并拿到最新的值。这个时候就需要用到 <code>nextTick</code> 。<strong>具体代码如下：</strong></p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        list</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">addItem</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 1. 异步渲染，$nextTick 待 DOM 渲染完再回调，</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//    即NextTick函数会在多次data修改完并且全部DOM渲染完再触发，仅在最后触发一次</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 2. 页面渲染时会将 data 的修改做整合</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$nextTick</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// 获取 DOM 元素</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ulElem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$refs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ul1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ulElem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">childNodes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>我们通过给获取 <code>DOM</code> 元素的代码外面再嵌套一层 <code>$nextTick</code> 函数，来达到我们想要的效果。在此过程中，当我们点击结束后， <code>data</code> 的值发生变化，此时 <code>$nextTick</code> 会等待<strong>DOM 全部渲染完成之后</strong>再进行回调。</p><p><strong>最终浏览器的打印效果如下：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270739815.gif" alt="nextTick2"></p><p>所以，也就是说， <code>$nextTick</code> 通过汇总 <code>data</code> 的修改，最后再<strong>一次性更新视图</strong>。</p><p>这样可以减少 <code>DOM</code> 的操作次数，大大的提高了性能。</p><h2 id="_3、小结" tabindex="-1">3、小结 <a class="header-anchor" href="#_3、小结" aria-label="Permalink to &quot;3、小结&quot;">​</a></h2><p>经过上述一系列的讲解，我们可以把内容分割成以下<strong>两个要点：</strong></p><ul><li>要理解清楚<strong>渲染和响应式</strong>、<strong>渲染和模板编译</strong>、<strong>渲染和 vdom</strong>的关系。</li><li>要理解组件渲染/更新的过程：<strong>初次渲染过程 → 更新过程 → 异步渲染</strong>。</li></ul><h1 id="五、✔️-结束语" tabindex="-1">五、✔️ 结束语 <a class="header-anchor" href="#五、✔️-结束语" aria-label="Permalink to &quot;五、✔️ 结束语&quot;">​</a></h1><p>从模板编译，到组件渲染更新过程，我们了解了整个 <code>template</code> 背后的全过程。相信通过本文的学习，大家对模板编译有了一个更深的认识。</p><p>关于模板编译的内容就讲到这里啦！如有不理解或文章有误，欢迎提issue勘误~</p>`,169),o=[p];function t(c,r,i,y,D,F){return a(),n("div",null,o)}const C=s(e,[["render",t]]);export{u as __pageData,C as default};
