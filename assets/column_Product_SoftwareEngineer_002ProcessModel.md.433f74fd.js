import{_ as t,c as r,o as n,N as o}from"./chunks/framework.6510d215.js";const u=JSON.parse('{"title":"『软件工程2』详解软件工程和软件过程模型","description":"","frontmatter":{"title":"『软件工程2』详解软件工程和软件过程模型","author":"周一","date":"2021-05-17","categories":["产品汪"],"tags":["软件工程"],"sidebar":"auto"},"headers":[{"level":2,"title":"一、软件工程的定义","slug":"一、软件工程的定义","link":"#一、软件工程的定义","children":[{"level":3,"title":"1、Fritz Bauer 在 NATO 上给出的定义","slug":"_1、fritz-bauer-在-nato-上给出的定义","link":"#_1、fritz-bauer-在-nato-上给出的定义","children":[]},{"level":3,"title":"2、Barry Boehm","slug":"_2、barry-boehm","link":"#_2、barry-boehm","children":[]},{"level":3,"title":"3、IEEE 在软件工程术语汇编中的定义","slug":"_3、ieee-在软件工程术语汇编中的定义","link":"#_3、ieee-在软件工程术语汇编中的定义","children":[]}]},{"level":2,"title":"二、软件工程的层次","slug":"二、软件工程的层次","link":"#二、软件工程的层次","children":[{"level":3,"title":"1、软件工程三个要素","slug":"_1、软件工程三个要素","link":"#_1、软件工程三个要素","children":[]},{"level":3,"title":"2、软件工程的层次——图解","slug":"_2、软件工程的层次——图解","link":"#_2、软件工程的层次——图解","children":[]},{"level":3,"title":"3、软件工程的层次——逐一分析","slug":"_3、软件工程的层次——逐一分析","link":"#_3、软件工程的层次——逐一分析","children":[]}]},{"level":2,"title":"三、软件过程的三个阶段","slug":"三、软件过程的三个阶段","link":"#三、软件过程的三个阶段","children":[{"level":3,"title":"1、定义阶段——“做什么”","slug":"_1、定义阶段——-做什么","link":"#_1、定义阶段——-做什么","children":[]},{"level":3,"title":"2、开发阶段——“如何做”","slug":"_2、开发阶段——-如何做","link":"#_2、开发阶段——-如何做","children":[]},{"level":3,"title":"3、支持阶段——“变化”","slug":"_3、支持阶段——-变化","link":"#_3、支持阶段——-变化","children":[]}]},{"level":2,"title":"四、软件过程框架","slug":"四、软件过程框架","link":"#四、软件过程框架","children":[{"level":3,"title":"1、引例——煮蛋的启示","slug":"_1、引例——煮蛋的启示","link":"#_1、引例——煮蛋的启示","children":[]},{"level":3,"title":"2、软件工程的过程定义","slug":"_2、软件工程的过程定义","link":"#_2、软件工程的过程定义","children":[]},{"level":3,"title":"3、软件过程框架","slug":"_3、软件过程框架","link":"#_3、软件过程框架","children":[]}]},{"level":2,"title":"五、CMM","slug":"五、cmm","link":"#五、cmm","children":[{"level":3,"title":"1、基础知识","slug":"_1、基础知识","link":"#_1、基础知识","children":[]},{"level":3,"title":"2、CMM 的级别","slug":"_2、cmm-的级别","link":"#_2、cmm-的级别","children":[]}]},{"level":2,"title":"六、软件过程模型","slug":"六、软件过程模型","link":"#六、软件过程模型","children":[{"level":3,"title":"1、软件过程模型概述","slug":"_1、软件过程模型概述","link":"#_1、软件过程模型概述","children":[]},{"level":3,"title":"2、软件过程模型分类","slug":"_2、软件过程模型分类","link":"#_2、软件过程模型分类","children":[]},{"level":3,"title":"3、传统的软件过程模型","slug":"_3、传统的软件过程模型","link":"#_3、传统的软件过程模型","children":[{"level":4,"title":"（1）线性顺序模型（瀑布模型）","slug":"_1-线性顺序模型-瀑布模型","link":"#_1-线性顺序模型-瀑布模型","children":[]},{"level":4,"title":"（2）V 模型","slug":"_2-v-模型","link":"#_2-v-模型","children":[]},{"level":4,"title":"（3）原型实现模型","slug":"_3-原型实现模型","link":"#_3-原型实现模型","children":[]},{"level":4,"title":"（4）RAD 模型","slug":"_4-rad-模型","link":"#_4-rad-模型","children":[]},{"level":4,"title":"（5）增量模型","slug":"_5-增量模型","link":"#_5-增量模型","children":[]},{"level":4,"title":"（6）螺旋模型","slug":"_6-螺旋模型","link":"#_6-螺旋模型","children":[]},{"level":4,"title":"（7）形式化方法模型","slug":"_7-形式化方法模型","link":"#_7-形式化方法模型","children":[]}]},{"level":3,"title":"4、敏捷视角下的过程模型","slug":"_4、敏捷视角下的过程模型","link":"#_4、敏捷视角下的过程模型","children":[{"level":4,"title":"（1）什么是敏捷","slug":"_1-什么是敏捷","link":"#_1-什么是敏捷","children":[]},{"level":4,"title":"（2）敏捷团队必须具备的特点","slug":"_2-敏捷团队必须具备的特点","link":"#_2-敏捷团队必须具备的特点","children":[]},{"level":4,"title":"（3）几种重要的敏捷过程模型","slug":"_3-几种重要的敏捷过程模型","link":"#_3-几种重要的敏捷过程模型","children":[]}]}]},{"level":2,"title":"写在最后","slug":"写在最后","link":"#写在最后","children":[]}],"relativePath":"column/Product/SoftwareEngineer/002ProcessModel.md","lastUpdated":1644826256000}'),l={name:"column/Product/SoftwareEngineer/002ProcessModel.md"},s=o('<h2 id="一、软件工程的定义" tabindex="-1">一、软件工程的定义 <a class="header-anchor" href="#一、软件工程的定义" aria-label="Permalink to &quot;一、软件工程的定义&quot;">​</a></h2><p>1968 年在 NATO 会议上，首次提出“软件工程”这个术语。但软件工程一直以来都缺乏一个统一的定义，有很多学者、组织机构都分别给出了自己认可的定义。<strong>以下给出三种常用的定义</strong>：</p><h3 id="_1、fritz-bauer-在-nato-上给出的定义" tabindex="-1">1、Fritz Bauer 在 NATO 上给出的定义 <a class="header-anchor" href="#_1、fritz-bauer-在-nato-上给出的定义" aria-label="Permalink to &quot;1、Fritz Bauer 在 NATO 上给出的定义&quot;">​</a></h3><p>The establishment and use of sound engineering principles in order to obtain economically software that is reliable and works on real machines.</p><p>建立并使用完善的<strong>工程化原则</strong>，以较经济的手段获得能在实际机器上有效运行的可靠软件的一系列方法。</p><h3 id="_2、barry-boehm" tabindex="-1">2、Barry Boehm <a class="header-anchor" href="#_2、barry-boehm" aria-label="Permalink to &quot;2、Barry Boehm&quot;">​</a></h3><p>Software engineering is that form of engineering that applies the principles of computer science and mathematics to achieving cost-effective solutions to software problems.</p><p>软件工程就是应用计算机科学和数学的原理，来为软件问题提供经济高效的解决方案。</p><p><strong>通俗点来说：①</strong>运用现代科学技术知识来设计并构造计算机程序；<strong>②</strong>开发、运行和维护这些程序所必需的相关文件资料。</p><h3 id="_3、ieee-在软件工程术语汇编中的定义" tabindex="-1">3、IEEE 在软件工程术语汇编中的定义 <a class="header-anchor" href="#_3、ieee-在软件工程术语汇编中的定义" aria-label="Permalink to &quot;3、IEEE 在软件工程术语汇编中的定义&quot;">​</a></h3><p>The application of a systematic,disciplined,quantifiable approach to the development,operation,and maintenance of software.</p><p>将系统化的、严格约束的、可量化的方法应用于软件的开发、运行和维护，即将<strong>工程化</strong>应用于软件。</p><h2 id="二、软件工程的层次" tabindex="-1">二、软件工程的层次 <a class="header-anchor" href="#二、软件工程的层次" aria-label="Permalink to &quot;二、软件工程的层次&quot;">​</a></h2><p>软件工程是一种<strong>层次化</strong>的技术，支持软件工程的根基就在于<strong>对质量的关注</strong>。</p><h3 id="_1、软件工程三个要素" tabindex="-1">1、软件工程三个要素 <a class="header-anchor" href="#_1、软件工程三个要素" aria-label="Permalink to &quot;1、软件工程三个要素&quot;">​</a></h3><p>过程、方法、工具</p><h3 id="_2、软件工程的层次——图解" tabindex="-1">2、软件工程的层次——图解 <a class="header-anchor" href="#_2、软件工程的层次——图解" aria-label="Permalink to &quot;2、软件工程的层次——图解&quot;">​</a></h3><p><img src="https://img-blog.csdnimg.cn/20210321151005655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h3 id="_3、软件工程的层次——逐一分析" tabindex="-1">3、软件工程的层次——逐一分析 <a class="header-anchor" href="#_3、软件工程的层次——逐一分析" aria-label="Permalink to &quot;3、软件工程的层次——逐一分析&quot;">​</a></h3><p><strong>（1）质量焦点（a quality focus）</strong></p><p>软件工程的<strong>根基</strong>，任何工程方法都必须以<strong>有组织的质量承诺</strong>为基础</p><p><strong>（2）过程（process）</strong></p><p>是软件工程的基础，定义了一组<strong>关键过程区域框架</strong>，包括*<u>工程产品的产生</u>*，<u><em>里程碑的建立</em></u>等等</p><p><strong>（3）方法（methods）</strong></p><p>提供了建造软件在技术上需要“如何做”，包括<strong>需求分析</strong>（analysis）、<strong>设计</strong>（design）、<strong>编码</strong>（coding）、<strong>测试</strong>（testing）和<strong>支持</strong>（backing）</p><p><strong>（4）工具（tools）</strong></p><p>对过程和方法提供了<strong>自动或半自动的支持</strong></p><p>E.g. <strong>CASE 工具</strong>（计算机辅助软件工程）：集成硬件、软件和数据库而创建的软件工程环境，类似于硬件的 CAD（计算机辅助设计）/CAE（计算机辅助工程）</p><h2 id="三、软件过程的三个阶段" tabindex="-1">三、软件过程的三个阶段 <a class="header-anchor" href="#三、软件过程的三个阶段" aria-label="Permalink to &quot;三、软件过程的三个阶段&quot;">​</a></h2><h3 id="_1、定义阶段——-做什么" tabindex="-1">1、定义阶段——“做什么” <a class="header-anchor" href="#_1、定义阶段——-做什么" aria-label="Permalink to &quot;1、定义阶段——“做什么”&quot;">​</a></h3><p>（<strong>1</strong>）<strong>定义</strong>：系统和软件的关键需求被标识</p><p>（<strong>2</strong>）<strong>应用场景</strong>：<strong>①</strong>系统和信息工程；<strong>②</strong>软件项目计划；<strong>③</strong>需求分析</p><h3 id="_2、开发阶段——-如何做" tabindex="-1">2、开发阶段——“如何做” <a class="header-anchor" href="#_2、开发阶段——-如何做" aria-label="Permalink to &quot;2、开发阶段——“如何做”&quot;">​</a></h3><p>（<strong>1</strong>）<strong>定义</strong>：定义数据结构、体系结构、过程细节、界面表示、算法和测试如何执行</p><p>（<strong>2</strong>）<strong>应用场景</strong>：<strong>①</strong>软件设计；<strong>②</strong>代码生成；<strong>③</strong>软件测试</p><h3 id="_3、支持阶段——-变化" tabindex="-1">3、支持阶段——“变化” <a class="header-anchor" href="#_3、支持阶段——-变化" aria-label="Permalink to &quot;3、支持阶段——“变化”&quot;">​</a></h3><p>（<strong>1</strong>）<strong>定义</strong>：<strong>①</strong>纠正错误；<strong>②</strong>随着软件环境的演化而要求的适应性修改；<strong>③</strong>用户需求的变化而带来的增强型修改</p><p>（<strong>2</strong>）<strong>应用场景</strong>：<strong>①</strong>纠错性维护（校正式）；<strong>②</strong>适应性维护；<strong>③</strong>完善性维护；<strong>④</strong>预防性维护</p><p><strong>下面用一张图了解软件过程的三个阶段</strong>： <img src="https://img-blog.csdnimg.cn/20210321151034131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="四、软件过程框架" tabindex="-1">四、软件过程框架 <a class="header-anchor" href="#四、软件过程框架" aria-label="Permalink to &quot;四、软件过程框架&quot;">​</a></h2><h3 id="_1、引例——煮蛋的启示" tabindex="-1">1、引例——煮蛋的启示 <a class="header-anchor" href="#_1、引例——煮蛋的启示" aria-label="Permalink to &quot;1、引例——煮蛋的启示&quot;">​</a></h3><p>很久以前，中国人煮蛋方式与德国人煮蛋方式的不同。</p><p><strong>中国人</strong>：先找一个锅，倒进水，再把蛋放进去，整个过程需要 10~20min。</p><p><strong>德国人</strong>：先找一个锅，倒进水，再把蛋放进去，在容器的下方焊接一个托盘，再将锅放到托盘上去烧开，如此，仅用 1min 就把水烧开，之后再用火继续煮了 3min，关火；再用余热继续煮了 3min；煮熟后丢到冷水里面 3min；最后他用 10min 时间把蛋煮熟。</p><p>从以上分析来看，德国人煮蛋更讲究过程，<strong>不同的过程会导致不一样的结果</strong>。研究表明，德国人煮蛋的方式有以下几点好处：① 更省水；② 更省热能；③ 煮蛋所花时间更少；④ 利用余热煮 3min，这个时候蛋的营养价值更高；⑤ 用凉水泡了 3min，蛋壳更容易拨开。 <img src="https://img-blog.csdnimg.cn/20210321151046734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="_2、软件工程的过程定义" tabindex="-1">2、软件工程的过程定义 <a class="header-anchor" href="#_2、软件工程的过程定义" aria-label="Permalink to &quot;2、软件工程的过程定义&quot;">​</a></h3><p><strong>（1）过程（process）</strong>：一组<strong>有序的任务</strong>，每个任务由<strong>一些步骤</strong>组成，每个步骤涉及到<strong>活动、约束及产品</strong>。</p><p><strong>（2）广义上</strong>，软件开发的每一个阶段都可看成是一个过程。</p><p><strong>（3）简言之</strong>，过程就是一个步骤、一个路线图，帮助创建高质量的软件。</p><h3 id="_3、软件过程框架" tabindex="-1">3、软件过程框架 <a class="header-anchor" href="#_3、软件过程框架" aria-label="Permalink to &quot;3、软件过程框架&quot;">​</a></h3><p><strong>先用一张图简单了解软件过程框架：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210321151108162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><strong>（1）通用过程框架活动</strong></p><ul><li>沟通</li><li>策划</li><li>建模</li><li>构建</li><li>部署</li></ul><p><strong>（2）普适性活动</strong></p><ul><li>软件项目跟踪和控制</li><li>正式的技术评审</li><li>软件质量保证</li><li>软件配置管理</li><li>文档的准备和产生</li><li>可复用管理</li><li>测度</li><li>风险管理</li></ul><h2 id="五、cmm" tabindex="-1">五、CMM <a class="header-anchor" href="#五、cmm" aria-label="Permalink to &quot;五、CMM&quot;">​</a></h2><h3 id="_1、基础知识" tabindex="-1">1、基础知识 <a class="header-anchor" href="#_1、基础知识" aria-label="Permalink to &quot;1、基础知识&quot;">​</a></h3><p>（<strong>1</strong>）20 世纪 90 年代（CMU/SEI）提出能力成熟度模型（Capability Maturity Model，CMM）</p><p>（<strong>2</strong>）CMM 定义了当一个组织达到不同的过程成熟度时应该具有的软件工程能力</p><p>（<strong>3</strong>）CMM 是一种衡量<strong>软件开发能力</strong>和<strong>成熟度</strong>的标准</p><p>（<strong>4</strong>）CMM 模型提供了衡量一个公司软件工程实践的<strong>整体有效性</strong>的方法，且建立了<strong>五级</strong>的过程成熟度级别</p><h3 id="_2、cmm-的级别" tabindex="-1">2、CMM 的级别 <a class="header-anchor" href="#_2、cmm-的级别" aria-label="Permalink to &quot;2、CMM 的级别&quot;">​</a></h3><p><strong>（1）第一级：初始级（initial）</strong></p><p><strong>① 定义</strong>：软件过程是<strong>定义的</strong>和<strong>偶然的</strong>，有时甚至是混乱的。几乎没有过程定义，成功完全取决于<strong>个人能力</strong>。</p><p><strong>② 特点</strong>：不可预测并且缺乏控制。</p><p><strong>（2）第二级：可重复级（repeatable）</strong></p><p><strong>① 定义</strong>：建立了基本的<strong>项目管理过程</strong>，能够<strong>跟踪费用、进度和功能</strong>。有适当的必要的过程规范，可以重复以前类似项目的成功。</p><p><strong>② 特点</strong>：可重复以前的主要经验。</p><p><strong>③ 关键过程区域</strong>：需求管理；软件项目计划；软件项目跟踪和监督；软件子合同管理；软件质量保证；软件配置管理。</p><p><strong>（3）第三级：定义级（defined）</strong></p><p><strong>① 定义</strong>：企业的软件过程已经文档化、标准化并与整个组织的软件过程相集成。所有项目都使用<strong>统一的、文档化的、组织过程认可的版本</strong>来开发和维护软件。包含第二级的所有特征。</p><p><strong>② 特点</strong>：过程被描述，并得到良好理解。</p><p><strong>③ 关键过程区域</strong>：组织过程定义；组织过程焦点；培训大纲；集成软件管理；软件质量保证；软件配置管理。</p><p><strong>（4）第四级：管理级（managed）</strong></p><p><strong>① 定义</strong>：软件过程和产品质量的详细数据被收集，通过这些度量数据，软件过程和产品能够被定量地理解和控制。<strong>包含第三级的所有特征。</strong></p><p><strong>② 特点</strong>：过程被测量并受控。</p><p><strong>③ 关键过程区域</strong>：定量的过程管理；软件质量管理。</p><p><strong>（5）第五级：优化级（optimizing）</strong></p><p><strong>① 定义</strong>：通过<strong>定量反馈</strong>进行不断的过程改进，这些反馈来自于<strong>过程</strong>或通过试验新的<strong>想法</strong>和<strong>技术</strong>而得到。<strong>包含第四级所有特征。</strong></p><p><strong>② 特点</strong>：关注过程改进。</p><p><strong>③ 关键过程区域</strong>：缺陷预防；技术变更管理；过程变更管理。</p><h2 id="六、软件过程模型" tabindex="-1">六、软件过程模型 <a class="header-anchor" href="#六、软件过程模型" aria-label="Permalink to &quot;六、软件过程模型&quot;">​</a></h2><h3 id="_1、软件过程模型概述" tabindex="-1">1、软件过程模型概述 <a class="header-anchor" href="#_1、软件过程模型概述" aria-label="Permalink to &quot;1、软件过程模型概述&quot;">​</a></h3><p>软件过程模型是软件开发<strong>全部过程、活动和任务</strong>的结构框架。软件过程模型不是一种具体模型，是一种<strong>开发策略</strong>，包含过程、方法和工具三个层次以及一般性阶段，常称为：<strong>①</strong>软件开发模型；<strong>②</strong>软件生存期模型；<strong>③</strong>软件工程范型。</p><h3 id="_2、软件过程模型分类" tabindex="-1">2、软件过程模型分类 <a class="header-anchor" href="#_2、软件过程模型分类" aria-label="Permalink to &quot;2、软件过程模型分类&quot;">​</a></h3><p><strong>（1）传统的软件过程模型（7 种）</strong></p><blockquote><p>详细内容见以下第 3 点</p></blockquote><p><strong>（2）敏捷视角下的过程模型（7 种）</strong></p><blockquote><p>详细内容见以下第 4 点</p></blockquote><h3 id="_3、传统的软件过程模型" tabindex="-1">3、传统的软件过程模型 <a class="header-anchor" href="#_3、传统的软件过程模型" aria-label="Permalink to &quot;3、传统的软件过程模型&quot;">​</a></h3><h4 id="_1-线性顺序模型-瀑布模型" tabindex="-1">（1）线性顺序模型（瀑布模型） <a class="header-anchor" href="#_1-线性顺序模型-瀑布模型" aria-label="Permalink to &quot;（1）线性顺序模型（瀑布模型）&quot;">​</a></h4><p><strong>① 图解</strong><img src="https://img-blog.csdnimg.cn/20210321151312683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt=""><strong>② 存在问题</strong></p><ul><li>实际项目很少按照该模型给出的顺序执行</li><li>客户常常难以清楚地给出需求</li><li>客户必须有耐心，运行版要到开发晚期才能得到</li><li>导致“阻塞状态”，常发生在开始和结束时</li></ul><h4 id="_2-v-模型" tabindex="-1">（2）V 模型 <a class="header-anchor" href="#_2-v-模型" aria-label="Permalink to &quot;（2）V 模型&quot;">​</a></h4><p><strong>① 图解</strong></p><p><img src="https://img-blog.csdnimg.cn/20210321151340927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><strong>② 特点——强调反馈，不将问题留到下一步</strong></p><p><strong>Verification 验证</strong>：每个活动保证能正确运行。</p><p><strong>Validation 确认</strong>：针对需求而言，符合需求规格的定义。</p><h4 id="_3-原型实现模型" tabindex="-1">（3）原型实现模型 <a class="header-anchor" href="#_3-原型实现模型" aria-label="Permalink to &quot;（3）原型实现模型&quot;">​</a></h4><p><strong>① 定义</strong></p><p>原型是一个可迭代的/可重复的（循环）过程，在这个过程中，一个问题的模型被细化/改进，直到它被接受为止。 <strong>② 流程图</strong><img src="https://img-blog.csdnimg.cn/20210321151359287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt=""><strong>③ 原型开发分类</strong></p><p>根据原型与最终产品之间的关系，原型开发分类分为以下三种：</p><p><strong>抛弃式 (throw away)</strong>：验证和澄清系统的需求描述，重新构造系统。</p><p><strong>演化式 (evolutionary)</strong>：逐步改进和细化原型，将原型进化为最终系统。</p><p><strong>增量式 (incremental)</strong>：在建立软件总体设计基础上，采用增量开发方法，使原型成为最终系统。</p><p><a href="https://blog.csdn.net/weixin_44803753/article/details/115050023" target="_blank" rel="noreferrer">此处篇幅较长，点击进入原型实现模型的详解</a></p><p><strong>④ 适用情况</strong></p><p>当客户有一个合理的需求，但是对细节没有概念的时候最适合使用原型实现模型</p><p><strong>⑤ 特点</strong></p><p>快速性、迭代性</p><p><strong>⑥ 优缺点</strong></p><p><strong>优点：</strong></p><ul><li>用户能够感受到实际系统</li><li>开发者能很快建造出一些东西</li></ul><p><strong>缺点：</strong></p><ul><li>原型是粗糙的，没考虑软件总体质量和长期的可维护性</li><li>开发者常常要对实现内容折中以使得原型能尽快工作</li></ul><p><strong>⑦ 不适合的领域</strong></p><ul><li>嵌入式系统</li><li>实时控制系统</li><li>科学数值系统</li></ul><h4 id="_4-rad-模型" tabindex="-1">（4）RAD 模型 <a class="header-anchor" href="#_4-rad-模型" aria-label="Permalink to &quot;（4）RAD 模型&quot;">​</a></h4><p><strong>① 定义</strong></p><p>RAD（Rapid Application Development,快速应用开发）通过使用<strong>基于构件的建造方法</strong>赢得了快速开发。</p><p><strong>② 分类</strong></p><ul><li>业务建模</li><li>数据建模</li><li>过程建模</li><li>应用生成（编程阶段 - 基于构件）</li><li>测试及反复</li></ul><p><strong>③ 流程图</strong><img src="https://img-blog.csdnimg.cn/20210321151619172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt=""><strong>④ 特点</strong></p><ul><li>强调极短的开发时间，每一个主要功能在不到三个月的时间内完成；</li><li>强调复用</li></ul><p><strong>⑤ 存在的问题</strong></p><ul><li>对于大型的的项目，RAD 需要足够的人力资源以建立足够的 RAD 组；</li><li>RAD 要求开发者和客户承担在一个很短的时间框架下完成一个系统所必要的快速活动；</li><li>并非所有应用都适合 RAD；</li><li>不适合技术风险很高的情况</li></ul><h4 id="_5-增量模型" tabindex="-1">（5）增量模型 <a class="header-anchor" href="#_5-增量模型" aria-label="Permalink to &quot;（5）增量模型&quot;">​</a></h4><p><strong>① 定义</strong>：增量模型融合了<strong>瀑布模型的基本成分</strong>和<strong>原型的迭代特性</strong>。</p><p><strong>② 举个例子</strong></p><p>例如，使用增量模型开发一款<strong>字处理软件</strong>，那么，这款软件需要做什么呢？</p><ul><li>基本的文件管理、编辑和文档生成功能；</li><li>更完善的编辑和文档生成能力；</li><li>实现拼写和语法检查功能；</li><li>完成高级的页面布局功能。</li></ul><p><strong>③ 流程图</strong><img src="https://img-blog.csdnimg.cn/20210321151649119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt=""><strong>④ 特点</strong></p><ul><li>增量 1 往往是“<strong>核心产品</strong>”；</li><li>本质是<strong>迭代的</strong>，但强调每一增量均发布一个可操作产品。</li></ul><p><strong>⑤ 优点</strong></p><ul><li>面对不能改变的困难时限时，是可考虑的选择；</li><li>早期可投入较少人员；</li><li>可有计划地管理技术风险。</li></ul><p><strong>⑥ 思考问题</strong></p><p><strong>Q</strong>：假设一个学校在四个月后要参加教学评估，要求现在开发一个学校综合管理信息系统，如果你是开发者，你会选择哪一种过程模型来开发这个系统，RAD 还是增量式的过程模型？为什么？</p><p><strong>A</strong>：答案是选择<strong>RAD 过程模型</strong>。为什么呢？ 原因在于，<strong>RAD 模型</strong>适用于模块化比较强的项目，且必须在 60-90 天内完成，不迭代，没有一个动作在重复进行。 而<strong>增量模型</strong>则是可迭代的，且增量 1 是核心产品，每一增量均可操作。比较适用于市场竞争激烈的项目，有利于抢占市场。</p><h4 id="_6-螺旋模型" tabindex="-1">（6）螺旋模型 <a class="header-anchor" href="#_6-螺旋模型" aria-label="Permalink to &quot;（6）螺旋模型&quot;">​</a></h4><p><strong>① 软件开发可能遇到的风险（引例）：</strong></p><ul><li>产品交付给用户之后用户可能不满意；</li><li>到了预定的交付日期软件可能还未开发出来；</li><li>实际的开发成本可能超过预算；</li><li>产品完成前一些关键的开发人员可能“跳槽“了；</li><li>产品投入市场之前竞争对手发布了一个功能相近、价格更低的软件等；</li><li>……</li></ul><p><strong>② 螺旋模型的基本思想</strong>：使用原型及其他方法来尽量降低风险。</p><p><strong>③ 流程图</strong></p><p>理解这种模型的一个简便方法，就是把它看作在每个阶段之前都增加了<strong>风险分析</strong>过程的快速原型模型，<strong>如下图所示</strong>： <img src="https://img-blog.csdnimg.cn/20210321152010895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>④ 螺旋模型任务区域（4 个象限）</strong>，各象限含义如下：</p><ul><li>客户交流——建立开发者和客户之间有效的通信所需的任务；</li><li><strong>制定计划</strong>——确定软件目标，选定实施方案，弄清项目开发的限制条件；</li><li><strong>风险分析</strong>——分析评估所选方案，考虑如何识别和消除风险；</li><li><strong>实施工程</strong>——实施软件开发和验证；</li><li>构造及发布——构造、测试、安装和提供用户支持（如文档及培训）所需的任务；</li><li><strong>客户评估</strong>——评价开发工作，提出修正建议，制定下一步计划。</li></ul><p><strong>注</strong>：四个象限包含制定计划，风险分析，实施工程，客户评估；</p><p>​ 此处列出 6 点是为了更加细分螺旋模型的流程。</p><p><strong>⑤ 优缺点</strong></p><p><strong>优点：</strong></p><ul><li>随着过程进展演化，开发者和客户能够更好地理解和对待每一个级别上的风险，使用原型实现作为降低风险的机制；</li><li>更真实地反映了现实世界；</li><li>如应用得当，能在风险变成问题之前降低它。</li></ul><p><strong>缺点：</strong></p><ul><li>模型的成功依赖于风险评估的专门技术；</li><li>是一个较新的模型，功效的确定尚需若干年时间。</li></ul><p><strong>⑥ 适用情况</strong></p><p>主要适用于内部开发的<strong>大规模软件项目</strong></p><h4 id="_7-形式化方法模型" tabindex="-1">（7）形式化方法模型 <a class="header-anchor" href="#_7-形式化方法模型" aria-label="Permalink to &quot;（7）形式化方法模型&quot;">​</a></h4><p><strong>①</strong>形式化方法使得软件工程师能够通过应用一个<strong>严格的、数学的符号体系</strong>来规约、开发和验证基于计算机的系统。<strong>净室软件工程师</strong>是这种方法的一个变种。</p><p><strong>②</strong>通过应用<strong>数学分析</strong>，二义性、不完整性和不一致性能更容易发现和纠正。</p><p><strong>③</strong>形式化方法目前还很<strong>费时</strong>且很<strong>昂贵</strong>。</p><p><strong>④</strong>很少有软件开发者具有<strong>实用形式化方法</strong>所必要的指示，尚需许多方面的培训。</p><p><strong>⑤</strong>难以与客户进行沟通。</p><h3 id="_4、敏捷视角下的过程模型" tabindex="-1">4、敏捷视角下的过程模型 <a class="header-anchor" href="#_4、敏捷视角下的过程模型" aria-label="Permalink to &quot;4、敏捷视角下的过程模型&quot;">​</a></h3><h4 id="_1-什么是敏捷" tabindex="-1">（1）什么是敏捷 <a class="header-anchor" href="#_1-什么是敏捷" aria-label="Permalink to &quot;（1）什么是敏捷&quot;">​</a></h4><ul><li><p>普遍存在的变化是敏捷的基本动力</p></li><li><p>敏捷就是灵活,支持变化的观点</p></li><li><p>敏捷过程强调过程的可操作性和适应性</p></li></ul><h4 id="_2-敏捷团队必须具备的特点" tabindex="-1">（2）敏捷团队必须具备的特点 <a class="header-anchor" href="#_2-敏捷团队必须具备的特点" aria-label="Permalink to &quot;（2）敏捷团队必须具备的特点&quot;">​</a></h4><ul><li>基本能力</li><li>共同目标</li><li>精诚合作</li><li>决策能力</li><li>模糊问题的解决能力</li><li>相互信任和尊重</li><li>自我组织</li></ul><h4 id="_3-几种重要的敏捷过程模型" tabindex="-1">（3）几种重要的敏捷过程模型 <a class="header-anchor" href="#_3-几种重要的敏捷过程模型" aria-label="Permalink to &quot;（3）几种重要的敏捷过程模型&quot;">​</a></h4><h5 id="_1-极限编程-xp" tabindex="-1">① 极限编程(XP) <a class="header-anchor" href="#_1-极限编程-xp" aria-label="Permalink to &quot;① 极限编程(XP)&quot;">​</a></h5><ul><li>包含了<strong>策划</strong>、<strong>设计</strong>、<strong>编码</strong>、<strong>测试</strong>四个框架活动的规则和实践，<strong>具体流程如下：</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/20210321152315695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="_2-自适应软件开发-asd" tabindex="-1">② 自适应软件开发（ASD） <a class="header-anchor" href="#_2-自适应软件开发-asd" aria-label="Permalink to &quot;② 自适应软件开发（ASD）&quot;">​</a></h5><ul><li>ASD 的生命周期包含<strong>思考</strong>、<strong>协作</strong>和<strong>学习</strong>三个阶段</li></ul><p><img src="https://img-blog.csdnimg.cn/20210321152341393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="_3-动态系统开发方法-dsdm" tabindex="-1">③ 动态系统开发方法（DSDM） <a class="header-anchor" href="#_3-动态系统开发方法-dsdm" aria-label="Permalink to &quot;③ 动态系统开发方法（DSDM）&quot;">​</a></h5><p>定义<strong>三个不同的迭代循环</strong>，前面还加了<strong>两个生命周期活动</strong>，如下：</p><ul><li>可行性研究</li><li>业务研究</li><li>功能模型迭代</li><li>设计和构建迭代</li><li>实现迭代</li></ul><h5 id="_4scrum-橄榄球模型" tabindex="-1">④Scrum(橄榄球模型) <a class="header-anchor" href="#_4scrum-橄榄球模型" aria-label="Permalink to &quot;④Scrum(橄榄球模型)&quot;">​</a></h5><p>强调使用一系列的<strong>软件过程模式</strong>，每个过程模式定义一系列开发活动：</p><ul><li><strong>待定项</strong>——能为用户提供业务价值的项目需求或特征的优先级列表；</li><li><strong>冲刺</strong>——由<strong>工作单元</strong>组成，是完成待定项中定义的需求所必需的，能在预定时间段内完成的；</li><li><strong>Scrum 例会</strong>——15 分钟；</li><li><strong>演示</strong>——交付软件，客户进行评估。</li></ul><h5 id="_5crystal" tabindex="-1">⑤Crystal <a class="header-anchor" href="#_5crystal" aria-label="Permalink to &quot;⑤Crystal&quot;">​</a></h5><ul><li><p>提倡“<strong>机动性</strong>”的软件开发方法；</p></li><li><p>包含<strong>具有共性的核心元素</strong>，每一个都含有<strong>独特的角色</strong>、<strong>过程模式</strong>、<strong>工作产品</strong>和<strong>实践</strong>等。</p></li></ul><h5 id="_6-特征驱动开发-fdd" tabindex="-1">⑥ 特征驱动开发（FDD） <a class="header-anchor" href="#_6-特征驱动开发-fdd" aria-label="Permalink to &quot;⑥ 特征驱动开发（FDD）&quot;">​</a></h5><ul><li><p>特征，即可以在<strong>2 周甚至更短时间</strong>内实现具有客户价值的功能。</p></li><li><p>定义<strong>五种协作框架</strong>：</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20210321152354816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h5 id="_7-敏捷建模-am" tabindex="-1">⑦ 敏捷建模(AM) <a class="header-anchor" href="#_7-敏捷建模-am" aria-label="Permalink to &quot;⑦ 敏捷建模(AM)&quot;">​</a></h5><ul><li>有目的的建模</li><li>使用多个模型</li><li>前进灯</li><li>内容重于表达形式</li><li>理解模型及工具</li><li>适应本地需要</li></ul><h2 id="写在最后" tabindex="-1">写在最后 <a class="header-anchor" href="#写在最后" aria-label="Permalink to &quot;写在最后&quot;">​</a></h2><p>看完这篇文章，不妨试问下自己以下问题：</p><ul><li><p>你认为介绍的软件过程模型哪一种最有效，为什么？</p></li><li><p>举出一个采用增量模型开发的软件项目，并指出各个增量的功能。</p></li><li><p>当沿着螺旋模型的过程路径向外移动时，你认为正在开发或维护的软件发生了什么变化呢？</p></li><li><p>分别用图示说明瀑布模型、V 模型、原型、RAD、增量模型及螺旋模型这六种模型的原理。</p></li></ul><p>欢迎评论区留下答案 ٩(๑❛ᴗ❛๑)۶</p><p><strong>PS</strong> 本文篇幅较长，有错别字欢迎评论区纠正，随时改进~ 如果这篇文章对你有帮助，记得留下<strong>star</strong>哦~</p>',191),i=[s];function e(a,g,p,h,c,d){return n(),r("div",null,i)}const m=t(l,[["render",e]]);export{u as __pageData,m as default};
