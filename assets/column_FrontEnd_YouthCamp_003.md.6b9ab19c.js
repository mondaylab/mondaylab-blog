import{_ as e,c as t,o as a,N as s}from"./chunks/framework.6510d215.js";const m=JSON.parse('{"title":"【青训营】- 前端只是切图仔？来学学给开发人看的UI设计","description":"","frontmatter":{"title":"【青训营】- 前端只是切图仔？来学学给开发人看的UI设计","author":"周一","date":"2021-08-30","categories":["前端开发"],"tags":["青训营YouthCamp"],"sidebar":"auto"},"headers":[{"level":1,"title":"🖼️ 序言","slug":"🖼️-序言","link":"#🖼️-序言","children":[]},{"level":1,"title":"🎨 一、背景","slug":"🎨-一、背景","link":"#🎨-一、背景","children":[{"level":2,"title":"1. 想做一个好的作品","slug":"_1-想做一个好的作品","link":"#_1-想做一个好的作品","children":[]},{"level":2,"title":"2. 没有专业 UI","slug":"_2-没有专业-ui","link":"#_2-没有专业-ui","children":[]}]},{"level":1,"title":"🧵 二、功能导向","slug":"🧵-二、功能导向","link":"#🧵-二、功能导向","children":[{"level":2,"title":"1. 设计中最重要的事","slug":"_1-设计中最重要的事","link":"#_1-设计中最重要的事","children":[]},{"level":2,"title":"2. 例子阐述","slug":"_2-例子阐述","link":"#_2-例子阐述","children":[]},{"level":2,"title":"2. 简约设计","slug":"_2-简约设计","link":"#_2-简约设计","children":[]},{"level":2,"title":"3. 设计简单的、完整的功能","slug":"_3-设计简单的、完整的功能","link":"#_3-设计简单的、完整的功能","children":[]}]},{"level":1,"title":"🧶 三、设计原则","slug":"🧶-三、设计原则","link":"#🧶-三、设计原则","children":[{"level":2,"title":"1. 层级","slug":"_1-层级","link":"#_1-层级","children":[{"level":3,"title":"（1）层级是什么","slug":"_1-层级是什么","link":"#_1-层级是什么","children":[]},{"level":3,"title":"（2）举例阐述","slug":"_2-举例阐述","link":"#_2-举例阐述","children":[]}]},{"level":2,"title":"2. 一致性","slug":"_2-一致性","link":"#_2-一致性","children":[{"level":3,"title":"（1）定义","slug":"_1-定义","link":"#_1-定义","children":[]},{"level":3,"title":"（2）举例阐述","slug":"_2-举例阐述-1","link":"#_2-举例阐述-1","children":[]},{"level":3,"title":"（3）总结","slug":"_3-总结","link":"#_3-总结","children":[]}]},{"level":2,"title":"3. 番外 - 《写给大家看的设计书》","slug":"_3-番外-《写给大家看的设计书》","link":"#_3-番外-《写给大家看的设计书》","children":[]}]},{"level":1,"title":"🧷 四、设计体系","slug":"🧷-四、设计体系","link":"#🧷-四、设计体系","children":[{"level":2,"title":"1. 布局","slug":"_1-布局","link":"#_1-布局","children":[{"level":3,"title":"（1）居中放","slug":"_1-居中放","link":"#_1-居中放","children":[]},{"level":3,"title":"（2）多列布局","slug":"_2-多列布局","link":"#_2-多列布局","children":[]}]},{"level":2,"title":"2. 间距","slug":"_2-间距","link":"#_2-间距","children":[{"level":3,"title":"（1）间距的定义","slug":"_1-间距的定义","link":"#_1-间距的定义","children":[]},{"level":3,"title":"（2）间距的一些规范","slug":"_2-间距的一些规范","link":"#_2-间距的一些规范","children":[{"level":4,"title":"1）间距——选项","slug":"_1-间距——选项","link":"#_1-间距——选项","children":[]},{"level":4,"title":"2）间距——多留白些","slug":"_2-间距——多留白些","link":"#_2-间距——多留白些","children":[]},{"level":4,"title":"3）间距——表达关联关系","slug":"_3-间距——表达关联关系","link":"#_3-间距——表达关联关系","children":[]}]}]},{"level":2,"title":"3. 文字","slug":"_3-文字","link":"#_3-文字","children":[{"level":3,"title":"（1）文字的定义","slug":"_1-文字的定义","link":"#_1-文字的定义","children":[]},{"level":3,"title":"（2）文字的一些规范","slug":"_2-文字的一些规范","link":"#_2-文字的一些规范","children":[{"level":4,"title":"1）文字——选项设计","slug":"_1-文字——选项设计","link":"#_1-文字——选项设计","children":[]},{"level":4,"title":"2）文字——对齐","slug":"_2-文字——对齐","link":"#_2-文字——对齐","children":[]},{"level":4,"title":"3）文字——行高","slug":"_3-文字——行高","link":"#_3-文字——行高","children":[]}]}]},{"level":2,"title":"4. 色彩","slug":"_4-色彩","link":"#_4-色彩","children":[{"level":3,"title":"（1）颜色选项——灰色","slug":"_1-颜色选项——灰色","link":"#_1-颜色选项——灰色","children":[]},{"level":3,"title":"（2）颜色选项——主题色","slug":"_2-颜色选项——主题色","link":"#_2-颜色选项——主题色","children":[]},{"level":3,"title":"（3）颜色选项——功能色","slug":"_3-颜色选项——功能色","link":"#_3-颜色选项——功能色","children":[]},{"level":3,"title":"（4）使用色盘","slug":"_4-使用色盘","link":"#_4-使用色盘","children":[]},{"level":3,"title":"（5）使用颜色的注意事项","slug":"_5-使用颜色的注意事项","link":"#_5-使用颜色的注意事项","children":[]}]},{"level":2,"title":"5. 深度","slug":"_5-深度","link":"#_5-深度","children":[{"level":3,"title":"（1）例子阐述","slug":"_1-例子阐述","link":"#_1-例子阐述","children":[]},{"level":3,"title":"（2）阴影选项","slug":"_2-阴影选项","link":"#_2-阴影选项","children":[]}]}]},{"level":1,"title":"🐾 五、实用技巧","slug":"🐾-五、实用技巧","link":"#🐾-五、实用技巧","children":[{"level":2,"title":"1. 图片上的层级","slug":"_1-图片上的层级","link":"#_1-图片上的层级","children":[{"level":3,"title":"（1）增加蒙层","slug":"_1-增加蒙层","link":"#_1-增加蒙层","children":[]},{"level":3,"title":"（2）给文字加阴影","slug":"_2-给文字加阴影","link":"#_2-给文字加阴影","children":[]}]},{"level":2,"title":"2. 用户头像","slug":"_2-用户头像","link":"#_2-用户头像","children":[]},{"level":2,"title":"3. 强调线","slug":"_3-强调线","link":"#_3-强调线","children":[]}]},{"level":1,"title":"🖌️ 六、资源","slug":"🖌️-六、资源","link":"#🖌️-六、资源","children":[{"level":2,"title":"1. 译作推荐","slug":"_1-译作推荐","link":"#_1-译作推荐","children":[]},{"level":2,"title":"2. 书籍推荐","slug":"_2-书籍推荐","link":"#_2-书籍推荐","children":[]},{"level":2,"title":"3. tailwindcss","slug":"_3-tailwindcss","link":"#_3-tailwindcss","children":[]}]},{"level":1,"title":"⛱️ 七、结束语","slug":"⛱️-七、结束语","link":"#⛱️-七、结束语","children":[]},{"level":1,"title":"彩蛋 One More Thing","slug":"彩蛋-one-more-thing","link":"#彩蛋-one-more-thing","children":[{"level":2,"title":"（：往期推荐","slug":"往期推荐","link":"#往期推荐","children":[]},{"level":2,"title":"（：番外篇","slug":"番外篇","link":"#番外篇","children":[]}]}],"relativePath":"column/FrontEnd/YouthCamp/003.md","lastUpdated":1644826256000}'),r={name:"column/FrontEnd/YouthCamp/003.md"},o=s('<h1 id="🖼️-序言" tabindex="-1">🖼️ 序言 <a class="header-anchor" href="#🖼️-序言" aria-label="Permalink to &quot;🖼️ 序言&quot;">​</a></h1><p>对于开发人来说，不单单要会写代码，有良好的用户体验思想也是非常重要的。毕竟，开发完的内容是要给用户来使用的，而不是自己随心所欲觉得哪里想添加个内容就哪里添加。</p><p>因此呢，在下面的这篇文章中，将学习给开发人看的 <code>UI</code> 设计。一起来了解吧~</p><h1 id="🎨-一、背景" tabindex="-1">🎨 一、背景 <a class="header-anchor" href="#🎨-一、背景" aria-label="Permalink to &quot;🎨 一、背景&quot;">​</a></h1><p>在讲解本文之前，先给大家抛个问题：前端为何要学习基本的 <code>UI</code> 设计原则和实践套路呢？</p><h2 id="_1-想做一个好的作品" tabindex="-1">1. 想做一个好的作品 <a class="header-anchor" href="#_1-想做一个好的作品" aria-label="Permalink to &quot;1. 想做一个好的作品&quot;">​</a></h2><ul><li>入行前端的同学，有不少小伙伴是被其「<strong>所见即所得</strong>」的开发体验所吸引；此外，就是能够开发一款自己有用、爱用的应用出来，并分享给其他人使用。</li><li>而现在市面上，已经有足够多的课程，能够让前端以「<strong>全栈</strong>」的姿态独立开发一款能用的产品出来。但当页面模块变得复杂起来时，仅仅依赖一些 <code>UI</code> 组件库，已经不能让产品维持在「<strong>好用</strong>」的状态。</li><li>追求极致的「<strong>全栈</strong>」定义，或许应当包含「<strong>设计</strong>」的角色。</li></ul><h2 id="_2-没有专业-ui" tabindex="-1">2. 没有专业 UI <a class="header-anchor" href="#_2-没有专业-ui" aria-label="Permalink to &quot;2. 没有专业 UI&quot;">​</a></h2><ul><li>你的团队里可能会有 <code>UI</code> 角色，但不一定专业；</li><li><code>UI</code> 给出的设计稿，许多时候只是静态的、仅体现某一交互切面的；</li><li>很多<strong>交互体验细节</strong>，只有在前端摆弄一个 <code>Button</code> 的位置和多场景状态时，才能被捕捉到；</li><li>在大厂里，许多 <code>B</code> 端产品时没有专职 <code>UI</code> 的角色的；前端可能要对产品最终呈现出的形态负责。</li></ul><h1 id="🧵-二、功能导向" tabindex="-1">🧵 二、功能导向 <a class="header-anchor" href="#🧵-二、功能导向" aria-label="Permalink to &quot;🧵 二、功能导向&quot;">​</a></h1><h2 id="_1-设计中最重要的事" tabindex="-1">1. 设计中最重要的事 <a class="header-anchor" href="#_1-设计中最重要的事" aria-label="Permalink to &quot;1. 设计中最重要的事&quot;">​</a></h2><p>功能导向可以说是设计中最重要的事了，可以说，<strong>把功能做好</strong>，或许是最重要的设计原则。</p><h2 id="_2-例子阐述" tabindex="-1">2. 例子阐述 <a class="header-anchor" href="#_2-例子阐述" aria-label="Permalink to &quot;2. 例子阐述&quot;">​</a></h2><p>我们来看一个例子：</p><p>下面先看 <code>Google</code> 近 20 年来首页的变迁，从左到右，分别是 1998、2005、2015 年，<strong>如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/8679ea63659841ac80e03a4baf6d3824.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="google首页"></p><p>现在，我们来看 2021 年的，<strong>如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/811afa6809e849cbb45f450c94620039.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="google首页2021年"></p><p>大家可以看到，从一开始的内容堆叠，到最后的只显示一个搜索框，把用户最想要的内容显示出来了。或许，这就是功能导向的一个典型例子。</p><h2 id="_2-简约设计" tabindex="-1">2. 简约设计 <a class="header-anchor" href="#_2-简约设计" aria-label="Permalink to &quot;2. 简约设计&quot;">​</a></h2><p>有了功能基础之后，我们就可以来<strong>画原型</strong>了，那么这里我想要介绍的是一些简单的创作工具。</p><p>我们可以选择像纸、笔或者<a href="https://excalidraw.com/" target="_blank" rel="noreferrer">excalidraw</a>这样可以立刻上手的工具是比较好的。糙一点的设计笔触可以让你不会过于追求完美，或者说是过于「追求设计」。</p><p>我们应该要迅速把框架搭好了，设计细节可以后面再补充。说白了，「<strong>功能优先</strong>」始终贯穿在<strong>设计 &amp; 开发流程</strong>中。</p><p>当然，你也可以使用如 <code>figma</code> 、 <code>Axure</code> 之类的更专业的原型设计工具。但作为开发，建议先使用<strong>最基本的笔触和组件</strong>，克制使用颜色设计简单的、完整的功能优先关注功能。</p><p><img src="https://img-blog.csdnimg.cn/09ff73f13c474de49b38c4bfed0c3f09.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="简约设计"></p><h2 id="_3-设计简单的、完整的功能" tabindex="-1">3. 设计简单的、完整的功能 <a class="header-anchor" href="#_3-设计简单的、完整的功能" aria-label="Permalink to &quot;3. 设计简单的、完整的功能&quot;">​</a></h2><p>我们在进行功能设计时，要先以 <strong><code>MVP</code> 版本功能</strong>来作为设计目标。所谓 <code>MVP</code> ，即 <code>Minimum Viable Product</code> ，即最简化可实行产品。</p><p>我们来看一个例子：</p><ul><li>一个联系人列表，是否要考虑超过 <strong>2000 人</strong>的展示情况？如何优化交互？</li><li><strong>数据不存在时</strong>，根据不同的错误情况，应该如何准备错误信息展示，和用户引导？</li><li>一个图片上传模块，其复制粘贴、拖拽、 点击选择文件上传，这些路径是否 <code>MVP</code> 版本都要做，是否都要先做好布局和引导设计？</li><li>在开局期间，我们要<strong>时刻提醒自己</strong>，优先把用户<strong>关键路径上的主流场景设计</strong>完成，迅速迭代其基本具有的能力。</li><li>这就好比开发一个游戏，我们总想着游戏各种花式的玩法。但我们在开发前应该先考虑的点是，如何先让游戏开始，这就是最简单的功能。让游戏开始了，我们才能给后面的内容迭代和升级。</li></ul><p>来看一个留言功能，<strong>如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/1fce0efeb9764afd89771d327931ddce.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="MVP功能"></p><p>大家可以看到，短短几句话，简明扼要的概括出来最完整的功能，把 <code>MVP</code> 的内容给体现出来了。</p><h1 id="🧶-三、设计原则" tabindex="-1">🧶 三、设计原则 <a class="header-anchor" href="#🧶-三、设计原则" aria-label="Permalink to &quot;🧶 三、设计原则&quot;">​</a></h1><h2 id="_1-层级" tabindex="-1">1. 层级 <a class="header-anchor" href="#_1-层级" aria-label="Permalink to &quot;1. 层级&quot;">​</a></h2><h3 id="_1-层级是什么" tabindex="-1">（1）层级是什么 <a class="header-anchor" href="#_1-层级是什么" aria-label="Permalink to &quot;（1）层级是什么&quot;">​</a></h3><ul><li>层级，是你可能唯一需要关心的原则。</li><li>一个产品要好用，就要让用户很容易地，<strong>抓到产品重点</strong>。</li><li>在重点里，用户能自在地进入沉浸式阅读、和使用的状态；</li><li>当用户想探索其他内容时，ta 能轻松地识别网站的次要板块还有哪些，焦点能迅速转移，并迅速沉浸；</li><li>辅助提示信息，精确而又不会打扰各主要模块的呈现。</li></ul><h3 id="_2-举例阐述" tabindex="-1">（2）举例阐述 <a class="header-anchor" href="#_2-举例阐述" aria-label="Permalink to &quot;（2）举例阐述&quot;">​</a></h3><p>比如，大家可以来看下面这两个网站。你觉得那张图片展示了更好的阅读体验呢？</p><p><img src="https://img-blog.csdnimg.cn/4764a58f55ee4cdc8b3bf32aa4490223.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="层级1"></p><p><img src="https://img-blog.csdnimg.cn/971aeeaad2834fab8edcd2a5147586fb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="层级2"></p><p>相信很多小伙伴内心的答案都是第二张图片。在第一张图片当中，内容没有怎么体现出分层，而是一整张图片黑黑白白的，也不知道哪里是重点。而在第二章图片中，明显上面蓝色方框内的内容第一眼就抓住了用户的眼球，很清晰的让用户了解到这张图的用意在哪。</p><p>所以你说，哪一张的阅读体验更好呢？</p><h2 id="_2-一致性" tabindex="-1">2. 一致性 <a class="header-anchor" href="#_2-一致性" aria-label="Permalink to &quot;2. 一致性&quot;">​</a></h2><h3 id="_1-定义" tabindex="-1">（1）定义 <a class="header-anchor" href="#_1-定义" aria-label="Permalink to &quot;（1）定义&quot;">​</a></h3><p>所谓<strong>一致性</strong>，指的是用户在站点的各个角落，观察到颜色、间距、阴影、位置、字体和字重的应用，且都在一套有限的框架里，一套能够迅速建立亲切感的框架内。</p><p>什么意思呢？</p><h3 id="_2-举例阐述-1" tabindex="-1">（2）举例阐述 <a class="header-anchor" href="#_2-举例阐述-1" aria-label="Permalink to &quot;（2）举例阐述&quot;">​</a></h3><p>以飞书文档为例，我们来进行一个说明：</p><p>当页面中，主要的<strong>交互</strong>和<strong>视觉元素</strong>都采用同一主题色（图中为<strong>蓝色</strong>）来表示时，用户可以迅速知道：</p><ul><li>页面中有哪些元素是<strong>可交互的</strong></li><li>我需要的<strong>提示信息</strong>在哪</li></ul><p><img src="https://img-blog.csdnimg.cn/487e12acbc824462bc93e94a47316827.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="飞书文档"></p><hr><p>再比如下面这张图：</p><p><img src="https://img-blog.csdnimg.cn/422fb675f5c446eab8150cfe60d601d3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="表单控件"></p><p>在这张图中，表单中 <code>label</code> 和输入框之间、以及输入项之间<strong>有序且固定</strong>的间距，可以帮助用户迅速识别当前填写的表单项是什么内容、以及稳定地将视线移动到下一个表单项上。</p><h3 id="_3-总结" tabindex="-1">（3）总结 <a class="header-anchor" href="#_3-总结" aria-label="Permalink to &quot;（3）总结&quot;">​</a></h3><p>通过上面的例子，相信大家对设计的一致性也有了一定的了解。</p><p>所以，能否<strong>克制</strong>，且<strong>重复</strong>、<strong>精确地</strong>运用着拟定好的设计体系，会在方方面面上影响着一个站点的质感，同时这也是<strong>体现专业性的考量</strong>。</p><p>看下面这张图：</p><p><img src="https://img-blog.csdnimg.cn/570dd85c385b4b369087a6c1584ef980.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="间距配置的合理性"></p><h2 id="_3-番外-《写给大家看的设计书》" tabindex="-1">3. 番外 - 《写给大家看的设计书》 <a class="header-anchor" href="#_3-番外-《写给大家看的设计书》" aria-label="Permalink to &quot;3. 番外 - 《写给大家看的设计书》&quot;">​</a></h2><p>这里给大家补充一本书 ——《写给大家看的设计书》，这本书应该是不少人的设计启蒙书。</p><p>在这里，我简单介绍下《写给大家看的设计书》四大原则：</p><ul><li><strong>对比：</strong> 如果两个元素内涵不同，请让它们截然相同；</li><li><strong>重复：</strong> 设计的视觉要素应当在整个作品中重复出现；</li><li><strong>亲密性：</strong> 彼此关联的元素应当靠近和放置在一起；</li><li><strong>对齐：</strong> 任何元素都不能随意安放，应当总是与另外至少一个元素有视觉上的关联。</li></ul><p><img src="https://img-blog.csdnimg.cn/5e1a8f19ee57454a885b495a44da6255.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="写给大家看的设计书"></p><hr><p>这四大原则，就与前面我们总结的两大原则相呼应上了。来看下具体的关联：</p><ul><li>层级，就是<strong>亲密性+对比</strong>的目标。让用户抓重点、切视线，又快又稳。</li><li>一致性，就是<strong>对齐+重复</strong>，克制用户视线所感受的尺度，迅速与网站设计语言建立熟悉感。</li></ul><p>书中还有更多关于四原则的解释和其他排版设计的技巧，这里也推荐给大家延伸阅读。</p><h1 id="🧷-四、设计体系" tabindex="-1">🧷 四、设计体系 <a class="header-anchor" href="#🧷-四、设计体系" aria-label="Permalink to &quot;🧷 四、设计体系&quot;">​</a></h1><h2 id="_1-布局" tabindex="-1">1. 布局 <a class="header-anchor" href="#_1-布局" aria-label="Permalink to &quot;1. 布局&quot;">​</a></h2><h3 id="_1-居中放" tabindex="-1">（1）居中放 <a class="header-anchor" href="#_1-居中放" aria-label="Permalink to &quot;（1）居中放&quot;">​</a></h3><p>我们先来介绍一个最基本的布局技巧，内容居中放。</p><p>如果你是遵循「<strong>功能导向</strong>」，边开发基础能力边设计迭代的开发过程，那么前期你的功能应当是比较简单的。单列式的<strong>居中布局</strong>，应该能满足你的需求。</p><p>比如像下面这样：</p><p><img src="https://img-blog.csdnimg.cn/b201666215f94dcbb40290b71dfeec91.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="布局居中放①"></p><p>很多场景下，居中放也是很有意义的。除非<strong>大屏浏览</strong>是你的核心场景，不然一般来说，你的内容宽度应该在 <code>600 ~ 800px</code> 之间，类似一本书的宽度。</p><p>像下面这样：</p><p><img src="https://img-blog.csdnimg.cn/fa29467248ba47288149de1ec5dafd35.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="布局居中放②"></p><h3 id="_2-多列布局" tabindex="-1">（2）多列布局 <a class="header-anchor" href="#_2-多列布局" aria-label="Permalink to &quot;（2）多列布局&quot;">​</a></h3><p>多列布局的核心也是<strong>保持内容的一个合适宽度</strong>，<strong>维持可读性</strong>。</p><p>一般规则是：<strong>主要内容列</strong>弹性收缩（可以有最小宽度），<strong>次要列</strong>固定宽度。</p><p>如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/890fa9acd92a4481a55a1202cfff154a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="多列布局"></p><h2 id="_2-间距" tabindex="-1">2. 间距 <a class="header-anchor" href="#_2-间距" aria-label="Permalink to &quot;2. 间距&quot;">​</a></h2><h3 id="_1-间距的定义" tabindex="-1">（1）间距的定义 <a class="header-anchor" href="#_1-间距的定义" aria-label="Permalink to &quot;（1）间距的定义&quot;">​</a></h3><p>保证元素间有基本的间距，是最基本的设计技巧。</p><p>如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/1e70726297384233812668c25e502a0d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="间距"></p><h3 id="_2-间距的一些规范" tabindex="-1">（2）间距的一些规范 <a class="header-anchor" href="#_2-间距的一些规范" aria-label="Permalink to &quot;（2）间距的一些规范&quot;">​</a></h3><p>现在我们来看一些关于间距的规范。</p><h4 id="_1-间距——选项" tabindex="-1">1）间距——选项 <a class="header-anchor" href="#_1-间距——选项" aria-label="Permalink to &quot;1）间距——选项&quot;">​</a></h4><p>基于 <code>4px</code> 的倍数，设计出<strong>数十种</strong>间距的选项。<strong>如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/a5a6edc0f0fc4d6ab2dda8680f7670ab.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="间距——选项"></p><p>现在，我们来说明一下这十种设计选项的一些具体内容：</p><ul><li>设计体系，除了满足「<strong>一致性</strong>」原则以外，它同时也是<strong>帮设计者提前设计好选项</strong>。</li><li>有了这些选项，我们在具体场景中可以<strong>逐个尝试</strong>，来<strong>试出最优解</strong>。</li><li>比起每次都拍脑门决策，现在变成<strong>在选项里调优</strong>，能极大地<strong>加快设计的步伐</strong>。</li></ul><p>来看一个 <code>button</code> 的例子：</p><p><img src="https://img-blog.csdnimg.cn/bced7063d76e46a7bf1a1cf6c9c9d699.png#pic_center" alt="button在选项中的应用"></p><p>大家可以看到，我们把图标以 <code>4px</code> 的倍数进行增长，慢慢地变得越来越饱和，越来越好看。基于 <code>4px</code> 的选项，我们是不是就更加加快了我们的设计步伐了呢。</p><hr><p>观察这数十种间距的选项，我们可以发现这是一个<strong>类似指数增长的图表</strong>📈。这是因为两个相邻间距，<strong>在大尺度上</strong>，要比<strong>小尺度</strong>里拉的更开，才能在视线里体现出<strong>间距的差距</strong>。</p><p>我们用一张图来比较一下大小尺度里的区别：</p><p><img src="https://img-blog.csdnimg.cn/acba8680722f4e2a8e1bacfa8a805463.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="小尺度和大尺度的比较"></p><p>大家先看左边的内容，在小尺度里， <code>4px</code> 的差距就是 <code>20%</code> 的增幅；再看右边的内容，右图 <code>500px</code> 的尺度中， <code>20px</code> 的增长只有提升 <code>4%</code> 的效果。</p><h4 id="_2-间距——多留白些" tabindex="-1">2）间距——多留白些 <a class="header-anchor" href="#_2-间距——多留白些" aria-label="Permalink to &quot;2）间距——多留白些&quot;">​</a></h4><p>这是一个间距设计技巧：安排元素时建议<strong>先大大的留空</strong>，也就是「<strong>从松到紧</strong>」来调试间距。<strong>如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/7a98c9adae764708a39bd28e21adc4c2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="间距——多留白些"></p><hr><p>我们来对上面这组图进行一个比较。</p><p><strong>由紧到松类型 👇</strong></p><p>先来看一张图：</p><p><img src="https://img-blog.csdnimg.cn/54d3422e2b60437faa295f277d2779fa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="由紧到松类型"></p><p>这张图是<strong>由紧到松</strong>，那么你的思维是「尝试把无关的元素拉开」，而且是「<strong>从整体到局部</strong>」的 方向，这就不太好操作。</p><p>举个例子：</p><p>你想先拉开每个段落间距 <code>10px</code>，再调段落内标题与内容的间距 <code>4px</code>，但发现拉的不够开；这时要回过头将段落间间距拉到 <code>20px</code>，这样段落内才好安排 <code>10px</code> 的间距……</p><p><strong>由松到紧类型 👇</strong></p><p>先来看一张图：</p><p><img src="https://img-blog.csdnimg.cn/c12c348e4a21402e9234026dddc7f658.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="由松到紧类型"></p><p><strong>由松到紧</strong>，这就简单一些：关注的是「<strong>哪些元素相关</strong>」，把它们拉在一起，然后是「<strong>从局部到整体</strong>」调优。</p><p>一般来说，偏松也比偏紧好。从一开始就留些空间吧。</p><h4 id="_3-间距——表达关联关系" tabindex="-1">3）间距——表达关联关系 <a class="header-anchor" href="#_3-间距——表达关联关系" aria-label="Permalink to &quot;3）间距——表达关联关系&quot;">​</a></h4><ul><li>除了方便阅读，间距也是最合适<strong>表达关联关系</strong>的工具。</li><li>如下图所示，图中的<strong>间距差异设计</strong>，表明了<strong>每个章节的起点</strong>，以及<strong>标题与段落的关联性</strong>。</li></ul><blockquote><p><img src="https://img-blog.csdnimg.cn/2f52d6e794d04a30b019ae5d0a097881.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="表达关联关系①"></p></blockquote><ul><li>同时，如下图所示，挨得太紧的行高和列表项间距，会让用户<strong>难以判断</strong>阅读时的停顿点在哪，当前列表项是否已经结束。</li><li>间距是远比<strong>色块</strong>、<strong>边框</strong>、<strong>分界线</strong>之类的更适合用来表达关联关系的工具。值得多加练习运用。</li></ul><p><img src="https://img-blog.csdnimg.cn/e4179c1e59c840088ebfdfb82252635f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="表达关联关系②"></p><h2 id="_3-文字" tabindex="-1">3. 文字 <a class="header-anchor" href="#_3-文字" aria-label="Permalink to &quot;3. 文字&quot;">​</a></h2><h3 id="_1-文字的定义" tabindex="-1">（1）文字的定义 <a class="header-anchor" href="#_1-文字的定义" aria-label="Permalink to &quot;（1）文字的定义&quot;">​</a></h3><p><strong>文本</strong>是站点的主要内容载体；<strong>字体设计</strong>自然也是重中之重。</p><p>既然我们在讲设计体系，以<strong>一致性</strong>为目标。那么同样地，我们也要把站点所使用的<strong>字号</strong>、<strong>字重</strong>等范围框定在数十个选项中。</p><p>数十个是个 <code>magic number</code>，大部分情况下应该都能满足。只要场景够特殊，特殊字体完全可以再加。</p><h3 id="_2-文字的一些规范" tabindex="-1">（2）文字的一些规范 <a class="header-anchor" href="#_2-文字的一些规范" aria-label="Permalink to &quot;（2）文字的一些规范&quot;">​</a></h3><h4 id="_1-文字——选项设计" tabindex="-1">1）文字——选项设计 <a class="header-anchor" href="#_1-文字——选项设计" aria-label="Permalink to &quot;1）文字——选项设计&quot;">​</a></h4><p>相比于<strong>间距设计</strong>，字号大小我们有一个明显的适合阅读的字号范围，如 <code>12 ~ 20px</code> 。那么我们会更多在这个范围内设置字体选项。</p><p>来看下选项设计的 10 大范围，<strong>如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/1097e6e3bc3d497f808f5be916d916c8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="文字——选项设计"></p><p>但是呢，仅通过<strong>字号</strong>来设置<strong>层级</strong>，很快就会捉襟见肘。因此我们要结合<strong>字重 &amp; 颜色</strong>（灰度），你会更加地游刃有余。</p><p>字重是 <code>css</code> 自带的，用好常用的 3、4 个尺度就好了。</p><p>来看一个例子：</p><p><img src="https://img-blog.csdnimg.cn/e69e44441c624d268e27c074d350dfe2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="字重设计"></p><p>大家可以看到，在右边的这张图当中，我们适当的使用了<strong>字重和颜色</strong>，以使得页面的内容更突出，内容更为饱和。</p><h4 id="_2-文字——对齐" tabindex="-1">2）文字——对齐 <a class="header-anchor" href="#_2-文字——对齐" aria-label="Permalink to &quot;2）文字——对齐&quot;">​</a></h4><p>不同字号大小的字体间如何对齐呢？我们应该要基于 <code>baseline</code> 对齐，就是<strong>文本的下边缘</strong>。</p><p><code>baseline</code> 是一个<strong>字符的重心</strong>；重心对齐了，用户在移动视线时就能有<strong>平稳的阅读体验</strong>。</p><p>来看一个例子：</p><p><img src="https://img-blog.csdnimg.cn/aa913ec01559435db418df8c7d926322.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="对齐设计"></p><h4 id="_3-文字——行高" tabindex="-1">3）文字——行高 <a class="header-anchor" href="#_3-文字——行高" aria-label="Permalink to &quot;3）文字——行高&quot;">​</a></h4><p>基本上，对于所有的文本设计来说，其意图都是为了<strong>保持良好的阅读体验</strong>，那么行高也不例外。</p><p>具体到设计哲学，就是：行高和字号大小大致成反比，目标是<strong>用户在视线换行时</strong>有稳定的下移体验。</p><p><img src="https://img-blog.csdnimg.cn/575809f8c6af417a8147d9842d43ea5c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="26-文字——行高"></p><h2 id="_4-色彩" tabindex="-1">4. 色彩 <a class="header-anchor" href="#_4-色彩" aria-label="Permalink to &quot;4. 色彩&quot;">​</a></h2><p>现在，到颜色部分了，谁不爱颜色呢？同样地，与上面一样的归纳步骤，我们来对颜色进行一个归纳。</p><h3 id="_1-颜色选项——灰色" tabindex="-1">（1）颜色选项——灰色 <a class="header-anchor" href="#_1-颜色选项——灰色" aria-label="Permalink to &quot;（1）颜色选项——灰色&quot;">​</a></h3><p>在你的色彩库中，应该要有<strong>10 种左右的灰色</strong>来提供使用，并且这些颜色从文字到背景都用得上。<strong>如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/647af6bec00045e19d4bb5dcc2031a41.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="颜色选项——灰色"></p><h3 id="_2-颜色选项——主题色" tabindex="-1">（2）颜色选项——主题色 <a class="header-anchor" href="#_2-颜色选项——主题色" aria-label="Permalink to &quot;（2）颜色选项——主题色&quot;">​</a></h3><p>大部分站点都少不了一两个贯穿全局的主题色；它出现在<strong>按钮</strong>、<strong>logo</strong>、<strong>背景</strong>、<strong>各种修饰元素</strong>之上，是品牌的记忆元素。<strong>如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/fd0445576a4b4ff5a7c67415f0178faa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="颜色选项——主题色"></p><h3 id="_3-颜色选项——功能色" tabindex="-1">（3）颜色选项——功能色 <a class="header-anchor" href="#_3-颜色选项——功能色" aria-label="Permalink to &quot;（3）颜色选项——功能色&quot;">​</a></h3><p>有一些常见的颜色，被广泛地用来表达某些固定的语义信息。</p><p><strong>红色</strong>，传达错误信息，或提示危险操作。</p><p><strong>黄色</strong>，表示警告。</p><p><strong>绿色</strong>，表示一些积极的变化，以示成功或增长的信息。</p><p><strong>如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/763ff4e8489c4c52917bb0741792e285.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="颜色选项——功能色"></p><h3 id="_4-使用色盘" tabindex="-1">（4）使用色盘 <a class="header-anchor" href="#_4-使用色盘" aria-label="Permalink to &quot;（4）使用色盘&quot;">​</a></h3><p>前面我们准备好了这么多由深入浅的颜色，那该如何使用呢？</p><p>我们可以作为<strong>前景</strong>和<strong>背景色</strong>来使用。<strong>主要标题</strong>可以用<strong>最亮的白色</strong>；<strong>次要标题</strong>挑一个<strong>背景颜色的浅色版本</strong>。</p><p><strong>如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/4b6cd2a2089a4f3ba8bc724d90c42391.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="使用色盘①"></p><hr><p>再来看另外一种用法，即<strong>浅色背景深色前景的用法</strong>。浅色色块相较于白色背景对比度不大，适合<strong>不用过于抢夺眼球</strong>的场景。如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/f4b06d857cf34684883a344aa05dead1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="使用色盘②"></p><h3 id="_5-使用颜色的注意事项" tabindex="-1">（5）使用颜色的注意事项 <a class="header-anchor" href="#_5-使用颜色的注意事项" aria-label="Permalink to &quot;（5）使用颜色的注意事项&quot;">​</a></h3><p>颜色虽好，但使用不当会很容易打破页面层级的平衡。来看一个例子：</p><p><img src="https://img-blog.csdnimg.cn/fbfd8d716e9a4708aa70e82ea4a9b9cf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="使用颜色的注意事项①"></p><p>还有一种情况是，<strong>色盲的用户消费不了颜色</strong>，颜色在不同的文化中可能表示不同的含义。<strong>如下图：</strong></p><p><img src="https://img-blog.csdnimg.cn/4b5a2c44451c4dddb9157ab608fe9302.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="使用颜色的注意事项②"></p><p>大家可以看到，在上面这张图中，左上角的图是我们普通用户所看到的图，而左下角的图是色盲用户所看到的图。</p><h2 id="_5-深度" tabindex="-1">5. 深度 <a class="header-anchor" href="#_5-深度" aria-label="Permalink to &quot;5. 深度&quot;">​</a></h2><h3 id="_1-例子阐述" tabindex="-1">（1）例子阐述 <a class="header-anchor" href="#_1-例子阐述" aria-label="Permalink to &quot;（1）例子阐述&quot;">​</a></h3><p>制造深度的技巧，八成与<strong>阴影设计</strong>有关。</p><p>深度补充了<strong>间距</strong>，从<strong>另一个维度上</strong>体现了<strong>层级</strong>。这是为什么？</p><p>这种深度的感官来自日常生活。平时我们是怎么感受平面上的深度的？答案是：<strong>自上而下的光照打</strong> 。</p><p>在平面上所造成的阴影。模拟这个现象，我们便可以实现网页元素的「<strong>深度</strong>」体验。</p><p><strong>来看一个例子：</strong></p><p><img src="https://img-blog.csdnimg.cn/777704b8095c45e5ac2ffbb80ac031f4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="深度①"></p><p>大家可以看到，在上面的这张图中，它的的光就是<strong>自上而下的光照打</strong>。</p><h3 id="_2-阴影选项" tabindex="-1">（2）阴影选项 <a class="header-anchor" href="#_2-阴影选项" aria-label="Permalink to &quot;（2）阴影选项&quot;">​</a></h3><p>下面我们来看一些常见的阴影选项。<strong>如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/e2a4e24e57c64ebca4cb9f6ed9ac9a7f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="深度②"></p><p>看了上面的一些常见选项后，我们现在来梳理各种大小的阴影所造成的影响。<strong>具体如下：</strong></p><ul><li><strong>小的阴影</strong>可以使元素略微突出，但不至于抢夺眼球。</li><li><strong>中等阴影</strong>适用于小型弹出的模块，如下拉框。</li><li><strong>最深的阴影</strong>则用于彻底地将模块与页面区分开来的场景。</li></ul><p><strong>如下所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/116b406016f44b0fafdb0f65e5a97a59.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="不同阴影大小对设计效果的影响"></p><h1 id="🐾-五、实用技巧" tabindex="-1">🐾 五、实用技巧 <a class="header-anchor" href="#🐾-五、实用技巧" aria-label="Permalink to &quot;🐾 五、实用技巧&quot;">​</a></h1><h2 id="_1-图片上的层级" tabindex="-1">1. 图片上的层级 <a class="header-anchor" href="#_1-图片上的层级" aria-label="Permalink to &quot;1. 图片上的层级&quot;">​</a></h2><p>如果我们遇到<strong>图片上的色块斑驳不一</strong>，<strong>难以找到合适的前景色</strong>。这个时候我们应该咋办哩？</p><p>比如下面这张图：</p><p><img src="https://img-blog.csdnimg.cn/3de90295cafe4f3ca37933240ede40e0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="色块斑驳不一"></p><p>下面我们来介绍解决这种问题的几种方法。</p><h3 id="_1-增加蒙层" tabindex="-1">（1）增加蒙层 <a class="header-anchor" href="#_1-增加蒙层" aria-label="Permalink to &quot;（1）增加蒙层&quot;">​</a></h3><p>我们可以通过增加蒙层，来显示图片的层级。<strong>如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/61213942c0f141b19dcdbf3a9aa86349.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="增加蒙层"></p><h3 id="_2-给文字加阴影" tabindex="-1">（2）给文字加阴影 <a class="header-anchor" href="#_2-给文字加阴影" aria-label="Permalink to &quot;（2）给文字加阴影&quot;">​</a></h3><p>除此之外呢，你可以选择给文字加上阴影。 <code>css</code> 可以轻松地做到，<strong>只增加文字部分的对比度</strong>，而<strong>不影响整张图片</strong>的阅读体验。</p><p><strong>如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/d2541be59ccf48b68cc4670406cfdb29.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="给文字加阴影"></p><h2 id="_2-用户头像" tabindex="-1">2. 用户头像 <a class="header-anchor" href="#_2-用户头像" aria-label="Permalink to &quot;2. 用户头像&quot;">​</a></h2><p>不管是在什么样的 <code>app</code> ，我们基本上都有上传图片的环节。那么，如何使得在任何的情况下，都能够<strong>清晰地展示用户头像里面的内容</strong>会是一个问题。</p><p>我们先来看这张图：</p><p><img src="https://img-blog.csdnimg.cn/52b3c815d49f47919425cbbaccd35a9b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="用户头像出现空白"></p><p>大家可以看到，在上面的这张图中，有一些用户头像出现了空白，这样间接地会使得我们不清楚整个用户头像实际上的尺寸是多少。</p><p>由小伙伴可能会首先想到，加个 <code>border</code> 。但加个 <code>border</code> 呢，又有点差强人意了，不一定能搭配好。</p><p>有个好方法就是，<strong>加点内阴影</strong>。相当于圈用户头像的外层做边框，这就非常精巧了。</p><p><img src="https://img-blog.csdnimg.cn/1b297a785c5b422192dc5456b4efd8b4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="加点内阴影"></p><h2 id="_3-强调线" tabindex="-1">3. 强调线 <a class="header-anchor" href="#_3-强调线" aria-label="Permalink to &quot;3. 强调线&quot;">​</a></h2><p>有时候，我们会很喜欢把表格类的设计给加上一些边框和分界线，但是这似乎看起来 <code>a little</code> 土。<strong>如下左图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/28b85aeb827b4573bd155e70ad727572.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5pyf5LiA56CU56m25a6k,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="干掉分界线"></p><p>大家可以看到，加了边框，就很像传统的 <code>table</code> 一样，有一点点不美观。</p><p>所以呢，如上边右图一样，我们可以用阴影或者不同的背景块来代替边框。这样，间距其实也就清晰了，所以我们也就不需要什么分界线了。</p><h1 id="🖌️-六、资源" tabindex="-1">🖌️ 六、资源 <a class="header-anchor" href="#🖌️-六、资源" aria-label="Permalink to &quot;🖌️ 六、资源&quot;">​</a></h1><h2 id="_1-译作推荐" tabindex="-1">1. 译作推荐 <a class="header-anchor" href="#_1-译作推荐" aria-label="Permalink to &quot;1. 译作推荐&quot;">​</a></h2><p>在上面的这篇文章中，大部分内容来自于下面这篇译作。想深入了解的同学可以进一步观看。</p><p><a href="https://www.yuque.com/shenyangdong/kb/gk2bw1" target="_blank" rel="noreferrer">给开发看的 UI 设计 · 语雀</a></p><h2 id="_2-书籍推荐" tabindex="-1">2. 书籍推荐 <a class="header-anchor" href="#_2-书籍推荐" aria-label="Permalink to &quot;2. 书籍推荐&quot;">​</a></h2><p>前面我们也稍微提到过这本书，这里推荐给大家 👉<a href="https://book.douban.com/subject/26657933/" target="_blank" rel="noreferrer">写给大家看的设计书(第 4 版) (豆瓣)</a></p><h2 id="_3-tailwindcss" tabindex="-1">3. tailwindcss <a class="header-anchor" href="#_3-tailwindcss" aria-label="Permalink to &quot;3. tailwindcss&quot;">​</a></h2><p><code>tailwind</code> 的 <code>utility class</code> 设计，深度实践了本文所讲的设计体系。</p><p>它的官网里面还有很多设计资源 👉<a href="https://tailwindcss.com/resources" target="_blank" rel="noreferrer">taildinwcss 设计框架</a>，大家可以进一步学习查看。</p><p>同时呢，小伙伴们还可以了解来自 <code>tailwind</code> 作者的著作，<a href="https://www.refactoringui.com/book" target="_blank" rel="noreferrer">Refactoring UI</a>，它是本文的基础。</p><h1 id="⛱️-七、结束语" tabindex="-1">⛱️ 七、结束语 <a class="header-anchor" href="#⛱️-七、结束语" aria-label="Permalink to &quot;⛱️ 七、结束语&quot;">​</a></h1><p>在上面的文章中，我们讲到了 <code>UI</code> 设计与前端的关系，同时呢，还讲到了设计中的一些功能导向，以及设计原则，设计体系。最后，我们还讲到了处理图片和表格的一些实用性技巧。</p><p>到这里，关于给开发人看的 <code>UI</code> 设计讲解就结束啦！希望对大家有帮助~</p><h1 id="彩蛋-one-more-thing" tabindex="-1">彩蛋 One More Thing <a class="header-anchor" href="#彩蛋-one-more-thing" aria-label="Permalink to &quot;彩蛋 One More Thing&quot;">​</a></h1><h2 id="往期推荐" tabindex="-1">（：往期推荐 <a class="header-anchor" href="#往期推荐" aria-label="Permalink to &quot;（：往期推荐&quot;">​</a></h2><p>👉<a href="https://juejin.cn/post/6998084998972588068" target="_blank" rel="noreferrer">值得关注的 HTML 基础知识</a></p><p>👉<a href="https://juejin.cn/post/7000943186000494628" target="_blank" rel="noreferrer">css 还只停留在写布局？10 分钟带你探索 css 中更为奇妙的奥秘！</a></p><h2 id="番外篇" tabindex="-1">（：番外篇 <a class="header-anchor" href="#番外篇" aria-label="Permalink to &quot;（：番外篇&quot;">​</a></h2><blockquote><ul><li>关注公众号<strong>星期一研究室</strong>，第一时间关注优质文章，<strong>更多精选专栏待你解锁</strong>~</li><li>如果这篇文章对你有用，记得<strong>留个脚印 jio</strong>再走哦~</li><li>以上就是本文的全部内容！我们下期见！👋👋👋</li></ul></blockquote>',239),i=[o];function l(n,c,p,g,_,d){return a(),t("div",null,i)}const b=e(r,[["render",l]]);export{m as __pageData,b as default};
