import{_ as t,c as e,o as d,N as o}from"./chunks/framework.6510d215.js";const g=JSON.parse('{"title":"你知道304吗？图解强缓存和协商缓存","description":"","frontmatter":{"title":"你知道304吗？图解强缓存和协商缓存","author":"周一","date":"2021-06-17","categories":["计算机基础知识"],"tags":["浏览器原理"],"sidebar":"auto"},"headers":[{"level":1,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":1,"title":"一、http 状态码","slug":"一、http-状态码","link":"#一、http-状态码","children":[{"level":2,"title":"1、引例阐述","slug":"_1、引例阐述","link":"#_1、引例阐述","children":[]},{"level":2,"title":"2、状态码分类","slug":"_2、状态码分类","link":"#_2、状态码分类","children":[]},{"level":2,"title":"3、常见状态码","slug":"_3、常见状态码","link":"#_3、常见状态码","children":[]},{"level":2,"title":"4、关于协议和规范","slug":"_4、关于协议和规范","link":"#_4、关于协议和规范","children":[]}]},{"level":1,"title":"二、http 方法","slug":"二、http-方法","link":"#二、http-方法","children":[{"level":2,"title":"1、传统的 methods","slug":"_1、传统的-methods","link":"#_1、传统的-methods","children":[]},{"level":2,"title":"2、现在的 methods","slug":"_2、现在的-methods","link":"#_2、现在的-methods","children":[]},{"level":2,"title":"3、Restful API","slug":"_3、restful-api","link":"#_3、restful-api","children":[{"level":3,"title":"（1）Restful API 是什么？","slug":"_1-restful-api-是什么","link":"#_1-restful-api-是什么","children":[]},{"level":3,"title":"（2）如何设计成一个资源？","slug":"_2-如何设计成一个资源","link":"#_2-如何设计成一个资源","children":[]}]}]},{"level":1,"title":"三、http 头部（http headers）","slug":"三、http-头部-http-headers","link":"#三、http-头部-http-headers","children":[{"level":2,"title":"1、常见的 Request headers","slug":"_1、常见的-request-headers","link":"#_1、常见的-request-headers","children":[]},{"level":2,"title":"2、常见的 Response headers","slug":"_2、常见的-response-headers","link":"#_2、常见的-response-headers","children":[]}]},{"level":1,"title":"四、http 缓存","slug":"四、http-缓存","link":"#四、http-缓存","children":[{"level":2,"title":"1、关于缓存的介绍","slug":"_1、关于缓存的介绍","link":"#_1、关于缓存的介绍","children":[{"level":3,"title":"（1）什么是缓存","slug":"_1-什么是缓存","link":"#_1-什么是缓存","children":[]},{"level":3,"title":"（2）为什么需要缓存？","slug":"_2-为什么需要缓存","link":"#_2-为什么需要缓存","children":[]},{"level":3,"title":"（3）哪些资源可以被缓存？——静态资源（js、css、img）","slug":"_3-哪些资源可以被缓存-——静态资源-js、css、img","link":"#_3-哪些资源可以被缓存-——静态资源-js、css、img","children":[]}]},{"level":2,"title":"2、http 缓存策略（强制缓存 + 协商缓存）","slug":"_2、http-缓存策略-强制缓存-协商缓存","link":"#_2、http-缓存策略-强制缓存-协商缓存","children":[{"level":3,"title":"（1）强制缓存","slug":"_1-强制缓存","link":"#_1-强制缓存","children":[{"level":4,"title":"1）强制缓存是什么？","slug":"_1-强制缓存是什么","link":"#_1-强制缓存是什么","children":[]},{"level":4,"title":"2）图例","slug":"_2-图例","link":"#_2-图例","children":[]},{"level":4,"title":"3）Cache-Control","slug":"_3-cache-control","link":"#_3-cache-control","children":[]},{"level":4,"title":"4）关于 Expires","slug":"_4-关于-expires","link":"#_4-关于-expires","children":[]}]},{"level":3,"title":"（2）协商缓存","slug":"_2-协商缓存","link":"#_2-协商缓存","children":[]}]},{"level":2,"title":"3、刷新操作方式，对缓存的影响","slug":"_3、刷新操作方式-对缓存的影响","link":"#_3、刷新操作方式-对缓存的影响","children":[{"level":3,"title":"（1）正常操作","slug":"_1-正常操作","link":"#_1-正常操作","children":[]},{"level":3,"title":"（2）手动刷新","slug":"_2-手动刷新","link":"#_2-手动刷新","children":[]},{"level":3,"title":"（3）强制刷新","slug":"_3-强制刷新","link":"#_3-强制刷新","children":[]}]}]},{"level":1,"title":"五、写在最后","slug":"五、写在最后","link":"#五、写在最后","children":[]}],"relativePath":"column/ComputerKnowledge/Browser/002.md","lastUpdated":1644826256000}'),l={name:"column/ComputerKnowledge/Browser/002.md"},a=o('<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p><code>http</code> 对于一个前端工程师来说，是非常需要了解的一个知识点，贯穿于整个前端开发的过程。如果说一个前端工程师不知道 <code>http</code> ，或者说是了解甚少，那他肯定不是一个合格的工程师。那么，<code>http</code> 对于去前端来说，有什么用呢？</p><ul><li>前端工程师在开发界面时，需要用到 <code>http</code> 协议；</li><li>前端在调用后端的接口时，提交(post)或者获取(get)数据时，需要用到 <code>http</code> 协议；</li><li>……</li></ul><p>下面将从多个方面讲解 <code>http</code> 协议。</p><h1 id="一、http-状态码" tabindex="-1">一、http 状态码 <a class="header-anchor" href="#一、http-状态码" aria-label="Permalink to &quot;一、http 状态码&quot;">​</a></h1><h2 id="_1、引例阐述" tabindex="-1">1、引例阐述 <a class="header-anchor" href="#_1、引例阐述" aria-label="Permalink to &quot;1、引例阐述&quot;">​</a></h2><p>在讲状态吗之前，我们先来了解什么是状态码。比如百度网站：</p><p><img src="https://img-blog.csdnimg.cn/20210523112045274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="百度状态码"></p><p>大家可以看到，上图中圈红圈的部分就是 <code>http</code> 的状态码，常见的状态码有 200,400,404 等等。接下来对状态码的一些基础知识进行介绍。</p><h2 id="_2、状态码分类" tabindex="-1">2、状态码分类 <a class="header-anchor" href="#_2、状态码分类" aria-label="Permalink to &quot;2、状态码分类&quot;">​</a></h2><p>下表给出状态码分类。</p><table><thead><tr><th>状态码</th><th>含义</th><th>解释说明</th></tr></thead><tbody><tr><td>1xx</td><td>服务器收到请求</td><td>收到 1xx 开头的请求表示服务端已经收到请求，但是还没有返回信息给客户端</td></tr><tr><td>2xx</td><td>请求成功，如 200</td><td>表示客户端已经成功请求数据</td></tr><tr><td>3xx</td><td>重定向，如 302</td><td>客户端收到 3xx 开头的状态码时，表示此时服务端已经不再管客户端所请求地址，让客户端去请求另外的地址</td></tr><tr><td>4xx</td><td>客户端错误，404</td><td>表示当客户端请求了一个服务端完全不认识的地址时，就会报出 4xx 的错误</td></tr><tr><td>5xx</td><td>服务端错误，如 500</td><td>表示此错误来源于服务端，比如服务端写的接口出现了 bug 等问题</td></tr></tbody></table><h2 id="_3、常见状态码" tabindex="-1">3、常见状态码 <a class="header-anchor" href="#_3、常见状态码" aria-label="Permalink to &quot;3、常见状态码&quot;">​</a></h2><p>常见的有 200（正常） 、404（无法找到该网页资源） 、304（跳转页面） 、500（服务器错误）等，<strong>具体如下：</strong></p><table><thead><tr><th>状态码</th><th>含义</th><th>用途</th></tr></thead><tbody><tr><td>200</td><td>OK 成功</td><td>一般用于 GET 和 POST 请求</td></tr><tr><td>301</td><td>Redirect Permanently 永久重定向</td><td>配合 location，浏览器自动处理</td></tr><tr><td>302</td><td>Found 临时重定向</td><td>配合 location，浏览器自动处理</td></tr><tr><td>304</td><td>Not Modified 资源未被修改</td><td>所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>404</td><td>Not Found 资源未找到</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站 设计人员可设置&quot;您所请求的资源无法找到&quot;的个性页面</td></tr><tr><td>403</td><td>Forbidden 没有权限</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>500</td><td>Internal server Error 服务器错误</td><td>服务器内部错误</td></tr><tr><td>504</td><td>Gateway Time-out 网关超时</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr></tbody></table><p>下面详细阐述 <code>301</code> 和 <code>302</code> 。</p><p><strong>301 永久重定向：</strong></p><p>常见场景有，比如说你的一个网站，域名到期了，或者域名你不想用了，那么老的域名就可以返回一个 301 状态码并配合 location 让 location 的值等于新的域名，最终进行跳转，之后浏览器会记住新的域名，不会再访问老的域名。</p><p><strong>302 临时重定向：</strong></p><p>常见场景有百度，知乎、简书等等。比如说我们要在百度进入菜鸟教程，搜索出来后有一系列的列表，我们可以选择一个去进行一个点击。点击的那个不会直接进入菜鸟教程，而是先跳转到百度设置的一个临时地址，之后再跳转到菜鸟教程真实的地址。</p><h2 id="_4、关于协议和规范" tabindex="-1">4、关于协议和规范 <a class="header-anchor" href="#_4、关于协议和规范" aria-label="Permalink to &quot;4、关于协议和规范&quot;">​</a></h2><ul><li>http 协议就是一个约定，一个规范，要求大家都跟着执行；</li><li>因此不要做违规范的事情，例如 <code>IE</code> 浏览器，违反规范终将会落下被历史淘汰的局面。</li></ul><h1 id="二、http-方法" tabindex="-1">二、http 方法 <a class="header-anchor" href="#二、http-方法" aria-label="Permalink to &quot;二、http 方法&quot;">​</a></h1><h2 id="_1、传统的-methods" tabindex="-1">1、传统的 methods <a class="header-anchor" href="#_1、传统的-methods" aria-label="Permalink to &quot;1、传统的 methods&quot;">​</a></h2><ul><li>get 获取服务器的数据；</li><li>post 向服务器提交数据；</li><li>head 用户获取报头。</li></ul><h2 id="_2、现在的-methods" tabindex="-1">2、现在的 methods <a class="header-anchor" href="#_2、现在的-methods" aria-label="Permalink to &quot;2、现在的 methods&quot;">​</a></h2><ul><li>get 获取数据；</li><li>post 新建数据；</li><li>patch/put 更新数据；</li><li>delete 删除数据；</li><li>head，类似于 get 请求，只不过返回的响应中没有具体的内容，用户获取报头；</li><li>options，允许客户端查看服务器的性能，比如说服务器支持的请求方式等等；</li><li>trace，追踪路径；</li><li>connect，要求用隧道协议连接代理。</li></ul><h2 id="_3、restful-api" tabindex="-1">3、Restful API <a class="header-anchor" href="#_3、restful-api" aria-label="Permalink to &quot;3、Restful API&quot;">​</a></h2><h3 id="_1-restful-api-是什么" tabindex="-1">（1）Restful API 是什么？ <a class="header-anchor" href="#_1-restful-api-是什么" aria-label="Permalink to &quot;（1）Restful API 是什么？&quot;">​</a></h3><ul><li><p><code>Restful API</code> 是一种新的 <code>API</code> 设计方法（早已推广使用）。</p></li><li><p>传统 <code>API</code> 设计：把每个 <code>url</code> 当做一个功能。</p></li><li><p><code>Restful API</code> 设计：把每个 <code>url</code> 当做一个唯一的资源。</p></li></ul><h3 id="_2-如何设计成一个资源" tabindex="-1">（2）如何设计成一个资源？ <a class="header-anchor" href="#_2-如何设计成一个资源" aria-label="Permalink to &quot;（2）如何设计成一个资源？&quot;">​</a></h3><p><strong>1）尽量不用 url 参数</strong></p><ul><li>传统 <code>API</code> 设计：<code>/api/list?pageIndex=2</code></li><li><code>Restful API</code> 设计：<code>/api/list/2</code></li></ul><p><strong>2）用 method 表示操作类型</strong></p><p>传统 <code>API </code> 设计：</p><ul><li><p>post 请求：/api/create-article</p></li><li><p>post 请求：/api/update-article?id=100</p></li><li><p>get 请求：/api/get-article?id=100</p></li></ul><p><code>Restful API</code> 设计：</p><ul><li><p>post 请求：/api/article</p></li><li><p>post 请求：/api/article/100</p></li><li><p>get 请求：/api/article/100</p></li></ul><h1 id="三、http-头部-http-headers" tabindex="-1">三、http 头部（http headers） <a class="header-anchor" href="#三、http-头部-http-headers" aria-label="Permalink to &quot;三、http 头部（http headers）&quot;">​</a></h1><h2 id="_1、常见的-request-headers" tabindex="-1">1、常见的 Request headers <a class="header-anchor" href="#_1、常见的-request-headers" aria-label="Permalink to &quot;1、常见的 Request headers&quot;">​</a></h2><table><thead><tr><th>请求头</th><th>含义</th></tr></thead><tbody><tr><td>Accept</td><td>浏览器可接收的数据格式</td></tr><tr><td>Accept-Encoding</td><td>浏览器可以接收的算法，如 gzip</td></tr><tr><td>Accept-Language</td><td>浏览器可接收的语言，如 zh-CN</td></tr><tr><td>Connection</td><td>keep-alive 一次 TCP 连接重复使用</td></tr><tr><td>cookie</td><td>客户端接收到的 Cookie 信息</td></tr><tr><td>Host</td><td>指定原始的 URL 中的主机和端口</td></tr><tr><td>User-Agent（简称 UA）</td><td>浏览器内核信息</td></tr><tr><td>Content-type</td><td>发送数据的格式，如 application/json</td></tr></tbody></table><h2 id="_2、常见的-response-headers" tabindex="-1">2、常见的 Response headers <a class="header-anchor" href="#_2、常见的-response-headers" aria-label="Permalink to &quot;2、常见的 Response headers&quot;">​</a></h2><table><thead><tr><th>响应头</th><th>含义</th></tr></thead><tbody><tr><td>Content-type</td><td>返回数据的格式，如 application/json</td></tr><tr><td>Content-length</td><td>返回数据的大小，多少字节</td></tr><tr><td>Content-Encoding</td><td>返回数据的压缩算法，如 gzip</td></tr><tr><td>Set-Cookie</td><td>服务端向客户端设置 cookie</td></tr></tbody></table><h1 id="四、http-缓存" tabindex="-1">四、http 缓存 <a class="header-anchor" href="#四、http-缓存" aria-label="Permalink to &quot;四、http 缓存&quot;">​</a></h1><h2 id="_1、关于缓存的介绍" tabindex="-1">1、关于缓存的介绍 <a class="header-anchor" href="#_1、关于缓存的介绍" aria-label="Permalink to &quot;1、关于缓存的介绍&quot;">​</a></h2><h3 id="_1-什么是缓存" tabindex="-1">（1）什么是缓存 <a class="header-anchor" href="#_1-什么是缓存" aria-label="Permalink to &quot;（1）什么是缓存&quot;">​</a></h3><p>缓存是一种保存<strong>资源副本</strong>并在下次请求时直接使用该副本的技术。</p><h3 id="_2-为什么需要缓存" tabindex="-1">（2）为什么需要缓存？ <a class="header-anchor" href="#_2-为什么需要缓存" aria-label="Permalink to &quot;（2）为什么需要缓存？&quot;">​</a></h3><p>如果没有缓存的话，每一次网络请求都要加载大量的图片和资源，这会使页面的加载变慢许多。那缓存的目的其实就是为了尽量减少网络请求的体积和数量，让页面加载的更快。</p><h3 id="_3-哪些资源可以被缓存-——静态资源-js、css、img" tabindex="-1">（3）哪些资源可以被缓存？——静态资源（js、css、img） <a class="header-anchor" href="#_3-哪些资源可以被缓存-——静态资源-js、css、img" aria-label="Permalink to &quot;（3）哪些资源可以被缓存？——静态资源（js、css、img）&quot;">​</a></h3><ul><li>网站的 <code>html</code> 是不能被缓存的。因为网站在使用过程中 <code>html</code> 随时有可能被更新，随时有可能被替换模板。</li><li>网页的业务数据也是不能被缓存的。比如留言板和评论区，用户随时都可以在底下评论，那数据库的内容就会被频繁被更新。</li></ul><h2 id="_2、http-缓存策略-强制缓存-协商缓存" tabindex="-1">2、http 缓存策略（强制缓存 + 协商缓存） <a class="header-anchor" href="#_2、http-缓存策略-强制缓存-协商缓存" aria-label="Permalink to &quot;2、http 缓存策略（强制缓存 + 协商缓存）&quot;">​</a></h2><h3 id="_1-强制缓存" tabindex="-1">（1）强制缓存 <a class="header-anchor" href="#_1-强制缓存" aria-label="Permalink to &quot;（1）强制缓存&quot;">​</a></h3><h4 id="_1-强制缓存是什么" tabindex="-1">1）强制缓存是什么？ <a class="header-anchor" href="#_1-强制缓存是什么" aria-label="Permalink to &quot;1）强制缓存是什么？&quot;">​</a></h4><p>强制缓存就是文件直接从本地缓存中获取，不需要发送请求。</p><h4 id="_2-图例" tabindex="-1">2）图例 <a class="header-anchor" href="#_2-图例" aria-label="Permalink to &quot;2）图例&quot;">​</a></h4><p>先看第一个图。</p><p><img src="https://img-blog.csdnimg.cn/20210530214017800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="强制缓存 图1"></p><p>从上图可以看到，当初次请求时，浏览器会向服务器发起请求，服务器接收到浏览器的请求后，返回资源并返回一个 <code>Cache-Control</code> 给客户端，该 <code>Cache-Control</code> 一般设置缓存的最大过期时间。</p><hr><p>接下来看第二个图。</p><p><img src="https://img-blog.csdnimg.cn/20210530214026954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="强制缓存 图2"></p><p>从上图中可以看到，此时浏览器已经接收到 cache-control 的值，那么这个时候浏览器再次发送请求时，它会先检查它的 cache-control 是否过期，如果没有过期则直接从本地缓存中拉取资源，返回到客户端，而无需再经过服务器。</p><hr><p>接下来看第三个图。</p><p><img src="https://img-blog.csdnimg.cn/20210530214036428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="强制缓存 图3"></p><p>强制缓存有<strong>过期时间</strong>，那么就意味着总有一天缓存会失效。那么假设某一天，客户端的 <code>cache-control</code> 失效了，那么它就没办法从本地缓存中拉取资源。于是它会像第一张图一样，重新向服务器发起请求，之后服务器会再次返回资源和 <code>cache-control</code> 的值。</p><p>以上就是强制缓存的全过程。</p><h4 id="_3-cache-control" tabindex="-1">3）Cache-Control <a class="header-anchor" href="#_3-cache-control" aria-label="Permalink to &quot;3）Cache-Control&quot;">​</a></h4><p><strong>Cache-Control 是什么？</strong></p><ul><li>存在于响应头 Response Headers 中；</li><li>控制强制缓存的逻辑；</li><li>例如：<code>Cache-Control: max-age = 31536000</code>（单位是秒）。</li></ul><p><strong>Cache-Control 的值</strong></p><table><thead><tr><th>Cache-Control 值</th><th>含义</th></tr></thead><tbody><tr><td>max-age</td><td>设置缓存的最大过期时间</td></tr><tr><td>no-cache</td><td>不用本地缓存，正常的向服务端请求，服务端怎么处理我们不用管</td></tr><tr><td>no-store</td><td>简单粗暴，直接从服务端拉取缓存</td></tr><tr><td>private</td><td>只能允许最终用户做缓存，最终用户即电脑、手机等等</td></tr><tr><td>public</td><td>允许中间路由或中间代理做缓存</td></tr></tbody></table><h4 id="_4-关于-expires" tabindex="-1">4）关于 Expires <a class="header-anchor" href="#_4-关于-expires" aria-label="Permalink to &quot;4）关于 Expires&quot;">​</a></h4><ul><li>同在 <code>Response Headers</code> 中</li><li>同为控制缓存的过期时间（早期使用）</li><li>如果 <code>cache-control 与 expires</code> 同时存在的话， <code>cache-control</code> 的优先级高于 <code>expires</code></li></ul><h3 id="_2-协商缓存" tabindex="-1">（2）协商缓存 <a class="header-anchor" href="#_2-协商缓存" aria-label="Permalink to &quot;（2）协商缓存&quot;">​</a></h3><p><strong>1）协商缓存是什么？</strong></p><ul><li>协商缓存，也叫对比缓存。</li><li>它是一种<strong>服务端的缓存策略</strong>，即通过服务端来判断某件事情是不是可以被缓存。</li><li>服务端判断客户端的资源，是否和服务端资源一样，如果一致则返回 <code>304</code> ，反之返回 <code>200</code> 和最新的资源。</li></ul><p><strong>2）图例</strong></p><p>同样地，用几张图来演示协商缓存。</p><p>先来看第一张图。</p><p><img src="https://img-blog.csdnimg.cn/20210530214052652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="协商缓存 图1"></p><p>在上图中，表明了协商缓存的全过程。首先，如果客户端是第一次向服务器发出请求，则服务器返回资源和相对应的资源标识给浏览器。该资源标识就是对当前所返回资源的一种唯一标识，可以是 Etag 或者是 Last-Modified，这两个字段将在图例结束后展开讲解。</p><p>之后如果浏览器再次发送请求时，浏览器就会带上这个资源标识。此时，服务端就会通过这个资源标识，可以判断出浏览器的资源跟服务端此时的资源是否一致，如果一致，则返回 304，即表示 Not Found 资源未修改。如果判断结果为不一致，则返回 200，并返回资源以及新的资源标识。至此就结束了协商缓存的过程。</p><hr><p>接下来看第二张图。</p><p><img src="https://img-blog.csdnimg.cn/20210530214101889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="协商缓存 图2"></p><p>假设此时我们的协商缓存用 <code>Last-Modified</code> 来判断。当浏览器第一次发送请求时，服务器返回资源并返回一个 <code>Last-Modified</code> 的值给浏览器。这个 <code>Last-Modified</code> 的值给到浏览器之后，浏览器会通过 <code>If-Modified-Since</code> 的字段来保存 <code>Last-Modified</code> 的值，且 <code>If-Modified-Since</code> 保存在请求头当中。</p><p>之后当浏览器再次发送请求时，请求头会带着 <code>If-Modified-Since</code> 的值去找服务器，服务器此刻就会匹配浏览器发过来的 <code>If-Modified-Since</code> 是否和自己最后一次修改的 <code>Last-Modified</code> 的值相等。如果相等，则返回 <code>304</code> ，表示资源未被修改；如果不相等，则返回 200，并返回资源和新的 <code>Last-Modified</code> 的值。</p><hr><p>接下来看第三张图。</p><p><img src="https://img-blog.csdnimg.cn/20210530214118105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="协商缓存 图3"></p><p>假设此时我们的协商缓存用 <code>Etag</code> 来判断。当浏览器第一次发送请求时，服务器返回资源并返回一个 <code>Etag </code> 的值给浏览器。这个 <code>Etag</code> 的值给到浏览器之后，浏览器会通过 <code>If-None-Match</code> 的字段来保存 <code>Etag</code> 的值，且 <code>If-None-Match</code> 保存在请求头当中。</p><p>之后当浏览器再次发送请求时，请求头会带着 <code>If-Modified-Since</code> 的值去找服务器，服务器此刻就会匹配浏览器发过来的 <code>If-None-Match</code> 是否和自己最后一次修改的 <code>Etag</code> 的值相等。如果相等，则返回 <code>304</code> ，表示资源未被修改；如果不相等，则返回 <code>200</code> ，并返回资源和新的 <code>Etag</code> 的值。</p><p>通过图例，相信大家对协商缓存有了一个新的认识。接下来讲解刚刚图例中所包含的一些字段。</p><p><strong>3）资源标识</strong></p><p>在响应头部 <code>Response Headers</code> 中，<strong>有两种资源标识：</strong></p><ul><li><code>Last-Modified</code> 资源的最后修改时间，对应请求头为 <code>If-Modified-Since</code> ；</li><li><code>Etag</code> 资源的唯一标识，所谓唯一，可以想象成时人类的指纹，具有唯一性；但 <code>Etag</code> 的本质是一个字符串；对应请求头为 <code>If-None-Match</code> 。</li></ul><p><strong>4）Last-Modified 和 Etag</strong></p><ul><li>当响应头部 <code>Response Headers</code> 同时存在 <code>Last-Modified</code> 和 <code>Etag</code> 的值时，会优先使用 <code>Etag</code> ；</li><li><code>Last-Modified</code> 只能精确到秒级；</li><li>如果资源被重复生成，而内容不变，则 <code>Etag</code> 更精确。</li></ul><p><strong>5)Headers 示例</strong></p><p><img src="https://img-blog.csdnimg.cn/20210530214133365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="Headers 实例"></p><p>由上图可以看到，响应头中的 <code>Last-Modified</code> 对应请求头中的 <code>If-Modified-Since</code> ， <code>Etag</code> 对应请求头中的 <code>If-None-Match</code> 。</p><p><strong>6）流程图</strong></p><p>说到这里，协商缓存的内容也快结束啦！最后的最后，我们用一张流程图来展示协商缓存的全过程。 <img src="https://img-blog.csdnimg.cn/20210523112312437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="协商缓存流程图"></p><h2 id="_3、刷新操作方式-对缓存的影响" tabindex="-1">3、刷新操作方式，对缓存的影响 <a class="header-anchor" href="#_3、刷新操作方式-对缓存的影响" aria-label="Permalink to &quot;3、刷新操作方式，对缓存的影响&quot;">​</a></h2><p>讲完缓存，我们再来讲个有点重要但是有点题外话的内容：刷新操作。我们平常在上网时，总有某个时刻突然网卡了，这个时候人的本性总是非常不耐烦的，毫不犹豫的就来个刷新。但殊不知，刷新对缓存也存在一定的影响。下面我们一起来看下各种刷新姿势以及其对缓存的影响。</p><h3 id="_1-正常操作" tabindex="-1">（1）正常操作 <a class="header-anchor" href="#_1-正常操作" aria-label="Permalink to &quot;（1）正常操作&quot;">​</a></h3><p><strong>定义：</strong> 地址栏输入 <code>url</code> ，跳转链接，前进后退等。</p><p><strong>对缓存的影响：</strong> 强制缓存有效，协商缓存有效。</p><h3 id="_2-手动刷新" tabindex="-1">（2）手动刷新 <a class="header-anchor" href="#_2-手动刷新" aria-label="Permalink to &quot;（2）手动刷新&quot;">​</a></h3><p><strong>定义：</strong> <code>F5</code> ，点击刷新按钮，右击菜单刷新。</p><p><strong>对缓存的影响：</strong> 强制缓存失效，协商缓存有效。</p><h3 id="_3-强制刷新" tabindex="-1">（3）强制刷新 <a class="header-anchor" href="#_3-强制刷新" aria-label="Permalink to &quot;（3）强制刷新&quot;">​</a></h3><p><strong>定义：</strong> <code>ctrl</code> + <code>F5</code> 。</p><p><strong>对缓存的影响：</strong> 强制缓存失效，协商缓存失效。</p><p>这一块内容仅当娱乐补充，大家可以根据自身需求学习~</p><h1 id="五、写在最后" tabindex="-1">五、写在最后 <a class="header-anchor" href="#五、写在最后" aria-label="Permalink to &quot;五、写在最后&quot;">​</a></h1><p>http 协议对于开发来说时很重要很重要的一块内容，不管时前端还是后端，对于常见的状态码，请求方法请求头和响应头，还有强缓存和协商缓存都是必须要了解的知识点。</p><p>关于 http 协议的知识就讲到这里啦！如有疑问或文章有讲的不好的地方欢迎评论区评论或私信我交流~</p><blockquote><ul><li><p>关注公众号 <strong>星期一研究室</strong> ，不定期分享学习干货</p></li><li><p>如果这篇文章对你有用，记得<strong>点个赞加个关注</strong>再走哦~</p></li></ul></blockquote>',121),i=[a];function r(c,s,h,n,p,u){return d(),e("div",null,i)}const m=t(l,[["render",r]]);export{g as __pageData,m as default};
