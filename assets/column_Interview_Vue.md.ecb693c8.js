import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.98c15f2e.js";const h=JSON.parse('{"title":"「offer来了」从基础到进阶原理，从vue2到vue3，48个知识点保姆级带你巩固vuejs知识体系","description":"","frontmatter":{"title":"「offer来了」从基础到进阶原理，从vue2到vue3，48个知识点保姆级带你巩固vuejs知识体系","author":"周一","date":"2021-11-11","categories":["前端开发"],"tags":["offer来了"],"sidebar":"auto"},"headers":[{"level":1,"title":"🖼️ 序言","slug":"🖼️-序言","link":"#🖼️-序言","children":[]},{"level":1,"title":"🎙️ 一、vue2.x 基础知识预备","slug":"🎙️-一、vue2-x-基础知识预备","link":"#🎙️-一、vue2-x-基础知识预备","children":[]},{"level":1,"title":"📻 二、vue2.x 基础知识常见面试题","slug":"📻-二、vue2-x-基础知识常见面试题","link":"#📻-二、vue2-x-基础知识常见面试题","children":[{"level":2,"title":"1、请说出 vue.cli 项目中 src 目录每个文件夹和文件的用法？","slug":"_1、请说出-vue-cli-项目中-src-目录每个文件夹和文件的用法","link":"#_1、请说出-vue-cli-项目中-src-目录每个文件夹和文件的用法","children":[]},{"level":2,"title":"2、vue.cli 中怎样使用自定义的组件？有遇到过哪些问题？","slug":"_2、vue-cli-中怎样使用自定义的组件-有遇到过哪些问题","link":"#_2、vue-cli-中怎样使用自定义的组件-有遇到过哪些问题","children":[]},{"level":2,"title":"3、v-show 和 v-if 的区别","slug":"_3、v-show-和-v-if-的区别","link":"#_3、v-show-和-v-if-的区别","children":[]},{"level":2,"title":"4、为何 v-for 中要用 key","slug":"_4、为何-v-for-中要用-key","link":"#_4、为何-v-for-中要用-key","children":[]},{"level":2,"title":"5、描述 Vue 组件生命周期","slug":"_5、描述-vue-组件生命周期","link":"#_5、描述-vue-组件生命周期","children":[{"level":3,"title":"（1）单组件生命周期","slug":"_1-单组件生命周期","link":"#_1-单组件生命周期","children":[]},{"level":3,"title":"（2）父子组件生命周期关系","slug":"_2-父子组件生命周期关系","link":"#_2-父子组件生命周期关系","children":[]}]},{"level":2,"title":"6、Vue 组件如何通讯（常见）","slug":"_6、vue-组件如何通讯-常见","link":"#_6、vue-组件如何通讯-常见","children":[]},{"level":2,"title":"7、描述组件渲染和更新的过程","slug":"_7、描述组件渲染和更新的过程","link":"#_7、描述组件渲染和更新的过程","children":[]},{"level":2,"title":"8、vue 如何处理刷新数据不丢失","slug":"_8、vue-如何处理刷新数据不丢失","link":"#_8、vue-如何处理刷新数据不丢失","children":[]},{"level":2,"title":"9、双向数据绑定 v-model 的实现原理","slug":"_9、双向数据绑定-v-model-的实现原理","link":"#_9、双向数据绑定-v-model-的实现原理","children":[]},{"level":2,"title":"10、computed 有何特点","slug":"_10、computed-有何特点","link":"#_10、computed-有何特点","children":[]},{"level":2,"title":"11、为何组件 data 必须是一个函数","slug":"_11、为何组件-data-必须是一个函数","link":"#_11、为何组件-data-必须是一个函数","children":[]},{"level":2,"title":"12、ajax 请求应该放在哪个生命周期","slug":"_12、ajax-请求应该放在哪个生命周期","link":"#_12、ajax-请求应该放在哪个生命周期","children":[]},{"level":2,"title":"13、如何将组件所有 props 传递给子组件？","slug":"_13、如何将组件所有-props-传递给子组件","link":"#_13、如何将组件所有-props-传递给子组件","children":[]},{"level":2,"title":"14、如何自己实现 v-model","slug":"_14、如何自己实现-v-model","link":"#_14、如何自己实现-v-model","children":[]},{"level":2,"title":"15、多个组件有相同的逻辑，如何抽离？","slug":"_15、多个组件有相同的逻辑-如何抽离","link":"#_15、多个组件有相同的逻辑-如何抽离","children":[]},{"level":2,"title":"16、何时要使用异步组件","slug":"_16、何时要使用异步组件","link":"#_16、何时要使用异步组件","children":[]},{"level":2,"title":"17、何时使用 keep-alive","slug":"_17、何时使用-keep-alive","link":"#_17、何时使用-keep-alive","children":[]},{"level":2,"title":"18、何时需要使用 beforeDestory","slug":"_18、何时需要使用-beforedestory","link":"#_18、何时需要使用-beforedestory","children":[]},{"level":2,"title":"19、什么是作用域插槽","slug":"_19、什么是作用域插槽","link":"#_19、什么是作用域插槽","children":[]},{"level":2,"title":"20、vuex 中 action 和 mutation 有何区别","slug":"_20、vuex-中-action-和-mutation-有何区别","link":"#_20、vuex-中-action-和-mutation-有何区别","children":[]},{"level":2,"title":"21、vue-router 常用的路由模式","slug":"_21、vue-router-常用的路由模式","link":"#_21、vue-router-常用的路由模式","children":[]},{"level":2,"title":"22、如何配置 vue-router 异步加载","slug":"_22、如何配置-vue-router-异步加载","link":"#_22、如何配置-vue-router-异步加载","children":[]},{"level":2,"title":"23、scope 是怎么实现的","slug":"_23、scope-是怎么实现的","link":"#_23、scope-是怎么实现的","children":[]},{"level":2,"title":"24、vue 常用性能优化方式","slug":"_24、vue-常用性能优化方式","link":"#_24、vue-常用性能优化方式","children":[]}]},{"level":1,"title":"📟 三、vue2.x 原理知识预备","slug":"📟-三、vue2-x-原理知识预备","link":"#📟-三、vue2-x-原理知识预备","children":[]},{"level":1,"title":"📠 四、vue 原理知识常见面试题","slug":"📠-四、vue-原理知识常见面试题","link":"#📠-四、vue-原理知识常见面试题","children":[{"level":2,"title":"1、对 MVVM 的理解","slug":"_1、对-mvvm-的理解","link":"#_1、对-mvvm-的理解","children":[]},{"level":2,"title":"2、监听 data 变化的核心 API 是什么","slug":"_2、监听-data-变化的核心-api-是什么","link":"#_2、监听-data-变化的核心-api-是什么","children":[]},{"level":2,"title":"3、vue 如何监听数组变化","slug":"_3、vue-如何监听数组变化","link":"#_3、vue-如何监听数组变化","children":[]},{"level":2,"title":"4、请描述响应式原理","slug":"_4、请描述响应式原理","link":"#_4、请描述响应式原理","children":[]},{"level":2,"title":"5、请用 vnode 描述一个 DOM 结构","slug":"_5、请用-vnode-描述一个-dom-结构","link":"#_5、请用-vnode-描述一个-dom-结构","children":[]},{"level":2,"title":"6、diff 算法的时间复杂度","slug":"_6、diff-算法的时间复杂度","link":"#_6、diff-算法的时间复杂度","children":[]},{"level":2,"title":"7、简述 diff 算法过程","slug":"_7、简述-diff-算法过程","link":"#_7、简述-diff-算法过程","children":[]},{"level":2,"title":"8、vue 模板编译的原理是什么","slug":"_8、vue-模板编译的原理是什么","link":"#_8、vue-模板编译的原理是什么","children":[]},{"level":2,"title":"9、vue 为何是异步渲染，$nextTick 有何用？","slug":"_9、vue-为何是异步渲染-nexttick-有何用","link":"#_9、vue-为何是异步渲染-nexttick-有何用","children":[]},{"level":2,"title":"10、SPA 单页面应用是什么？","slug":"_10、spa-单页面应用是什么","link":"#_10、spa-单页面应用是什么","children":[]},{"level":2,"title":"11、hash 和 history 的区别是什么？","slug":"_11、hash-和-history-的区别是什么","link":"#_11、hash-和-history-的区别是什么","children":[{"level":3,"title":"（1）hash","slug":"_1-hash","link":"#_1-hash","children":[]},{"level":3,"title":"（2）history","slug":"_2-history","link":"#_2-history","children":[]}]},{"level":2,"title":"12、hash 和 history 两者的选择","slug":"_12、hash-和-history-两者的选择","link":"#_12、hash-和-history-两者的选择","children":[]}]},{"level":1,"title":"🖨️ 五、vue3.x 知识预备","slug":"🖨️-五、vue3-x-知识预备","link":"#🖨️-五、vue3-x-知识预备","children":[]},{"level":1,"title":"⌨️ 六、vue3.x 常见面试题","slug":"⌨️-六、vue3-x-常见面试题","link":"#⌨️-六、vue3-x-常见面试题","children":[{"level":2,"title":"1、vue3 和 vue2 有什么优势？","slug":"_1、vue3-和-vue2-有什么优势","link":"#_1、vue3-和-vue2-有什么优势","children":[]},{"level":2,"title":"2、描述 vue3 生命周期","slug":"_2、描述-vue3-生命周期","link":"#_2、描述-vue3-生命周期","children":[]},{"level":2,"title":"3、如何看待 Composition API 和 Options API","slug":"_3、如何看待-composition-api-和-options-api","link":"#_3、如何看待-composition-api-和-options-api","children":[]},{"level":2,"title":"4、如何理解 ref、toRef 和 toRefs","slug":"_4、如何理解-ref、toref-和-torefs","link":"#_4、如何理解-ref、toref-和-torefs","children":[{"level":3,"title":"（1）ref 是什么","slug":"_1-ref-是什么","link":"#_1-ref-是什么","children":[]},{"level":3,"title":"（2）toRef 是什么","slug":"_2-toref-是什么","link":"#_2-toref-是什么","children":[]},{"level":3,"title":"（3）toRefs 是什么","slug":"_3-torefs-是什么","link":"#_3-torefs-是什么","children":[]}]},{"level":2,"title":"5、vue3 升级了哪些重要的功能？","slug":"_5、vue3-升级了哪些重要的功能","link":"#_5、vue3-升级了哪些重要的功能","children":[]},{"level":2,"title":"6、Composition API 如何实现代码的逻辑复用？","slug":"_6、composition-api-如何实现代码的逻辑复用","link":"#_6、composition-api-如何实现代码的逻辑复用","children":[]},{"level":2,"title":"7、Vue3 如何实现响应式？","slug":"_7、vue3-如何实现响应式","link":"#_7、vue3-如何实现响应式","children":[]},{"level":2,"title":"8、Watch 和 watchEffect 的区别是什么？","slug":"_8、watch-和-watcheffect-的区别是什么","link":"#_8、watch-和-watcheffect-的区别是什么","children":[]},{"level":2,"title":"9、setup 中如何获取组件实例?","slug":"_9、setup-中如何获取组件实例","link":"#_9、setup-中如何获取组件实例","children":[]},{"level":2,"title":"10、vue3 为何比 vue2 快？","slug":"_10、vue3-为何比-vue2-快","link":"#_10、vue3-为何比-vue2-快","children":[]},{"level":2,"title":"11、vite 是什么？","slug":"_11、vite-是什么","link":"#_11、vite-是什么","children":[]},{"level":2,"title":"12、Composition API 和 React hooks 的对比","slug":"_12、composition-api-和-react-hooks-的对比","link":"#_12、composition-api-和-react-hooks-的对比","children":[]}]},{"level":1,"title":"📸 七、结束语","slug":"📸-七、结束语","link":"#📸-七、结束语","children":[]},{"level":1,"title":"🐣 彩蛋 One More Thing","slug":"🐣-彩蛋-one-more-thing","link":"#🐣-彩蛋-one-more-thing","children":[{"level":2,"title":"🏷️ 往期推荐","slug":"🏷️-往期推荐","link":"#🏷️-往期推荐","children":[]}]}],"relativePath":"column/Interview/Vue.md","filePath":"column/Interview/Vue.md","lastUpdated":1723906346000}'),e={name:"column/Interview/Vue.md"},o=l(`<h1 id="🖼️-序言" tabindex="-1">🖼️ 序言 <a class="header-anchor" href="#🖼️-序言" aria-label="Permalink to &quot;🖼️ 序言&quot;">​</a></h1><p>对于前端来说， <code>vuejs</code> 是一大常考点。基本上只要候选人的简历上有涉及到 <code>vue</code> 的内容，那么面试官一般都会考察。那么，对于 <code>vue</code> 来说，我们需要从 <code>vue2</code> 到 <code>vue3</code> 来做一个基本的学习，以更好的应对面试官的各种刁难问题。</p><p>在下面的这篇文章中，将从 <code>vue2</code> 的基础知识，到 <code>vue2</code> 的原理知识，再到 <code>vue3</code> 的基础知识和原理知识做一个归纳和总结。同时，周一也将整理出相关的面试题，以供大家可以有一个更好的参考。</p><p>下面开始进入本文的讲解~</p><h1 id="🎙️-一、vue2-x-基础知识预备" tabindex="-1">🎙️ 一、vue2.x 基础知识预备 <a class="header-anchor" href="#🎙️-一、vue2-x-基础知识预备" aria-label="Permalink to &quot;🎙️ 一、vue2.x 基础知识预备&quot;">​</a></h1><p>在了解常见的面试题之前，需要先对 <code>vue</code> 的基础知识有一个体系的了解。<strong>详细见下图 👇</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270818925.png" alt="vue2.x基础知识思维导图"></p><blockquote><ul><li><p>关于以上内容，已整理成博文，戳下方链接进入学习 👇</p></li><li><p>原文：<a href="https://juejin.cn/post/6976040670939054093" target="_blank" rel="noreferrer">万字总结 vue 的基本使用和高级特性，周边插件 vuex 和 vue-router</a></p></li><li><p>链接：<a href="https://juejin.cn/post/6976040670939054093" target="_blank" rel="noreferrer">https://juejin.cn/post/6976040670939054093</a></p></li></ul></blockquote><h1 id="📻-二、vue2-x-基础知识常见面试题" tabindex="-1">📻 二、vue2.x 基础知识常见面试题 <a class="header-anchor" href="#📻-二、vue2-x-基础知识常见面试题" aria-label="Permalink to &quot;📻 二、vue2.x 基础知识常见面试题&quot;">​</a></h1><p>基于以上知识点，我们将其细分为面试中的常考题。<strong>详细见下图 👇</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270818620.png" alt="vue2.x基础知识面试题整理"></p><p>接下来对这些题进行一一解答。</p><h2 id="_1、请说出-vue-cli-项目中-src-目录每个文件夹和文件的用法" tabindex="-1">1、请说出 vue.cli 项目中 src 目录每个文件夹和文件的用法？ <a class="header-anchor" href="#_1、请说出-vue-cli-项目中-src-目录每个文件夹和文件的用法" aria-label="Permalink to &quot;1、请说出 vue.cli 项目中 src 目录每个文件夹和文件的用法？&quot;">​</a></h2><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assets</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">放置静态资源</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">components</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">放组件</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">router</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">定义路由的相关配置</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">views</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">视图</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">app.vue</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">应用主组件</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.js</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">入口文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assets</span><span style="color:#24292E;"> </span><span style="color:#032F62;">放置静态资源</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">components</span><span style="color:#24292E;"> </span><span style="color:#032F62;">放组件</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">router</span><span style="color:#24292E;"> </span><span style="color:#032F62;">定义路由的相关配置</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">views</span><span style="color:#24292E;"> </span><span style="color:#032F62;">视图</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">app.vue</span><span style="color:#24292E;"> </span><span style="color:#032F62;">应用主组件</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.js</span><span style="color:#24292E;"> </span><span style="color:#032F62;">入口文件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_2、vue-cli-中怎样使用自定义的组件-有遇到过哪些问题" tabindex="-1">2、vue.cli 中怎样使用自定义的组件？有遇到过哪些问题？ <a class="header-anchor" href="#_2、vue-cli-中怎样使用自定义的组件-有遇到过哪些问题" aria-label="Permalink to &quot;2、vue.cli 中怎样使用自定义的组件？有遇到过哪些问题？&quot;">​</a></h2><p><strong>如何使用：</strong></p><ul><li>在 <code>components</code> 目录新建你的组件文件（ <code>smithButton.vue</code> ）；</li><li>在需要用的页面中导入：<code>import smithButton from &#39;../components/smithButton.vue&#39;</code>；</li><li>注入到 <code>vue</code> 的子组件的 <code>components</code> 属性上，<code>components:{smithButton}</code></li><li>在 <code>template</code> 视图 <code>view</code> 中使用；</li><li>流程：创建组件 → 导入组件 → 注入组件 → 使用组件</li></ul><p><strong>会遇到的问题：</strong></p><p><code>smithButton</code> 命名，使用的时候需要用 <code>smith-button</code> ，在创建时常用到驼峰命名，但在使用时需把驼峰转换为 <code>-</code> 表示；</p><p><strong>vue 组件解决什么问题？</strong></p><p><code>vue</code> 组件可以提升整个项目的开发效率。能够页面抽象成多个相对独立的模块，解决了我们传统项目开发效率低、难维护、复用性等等问题。</p><h2 id="_3、v-show-和-v-if-的区别" tabindex="-1">3、v-show 和 v-if 的区别 <a class="header-anchor" href="#_3、v-show-和-v-if-的区别" aria-label="Permalink to &quot;3、v-show 和 v-if 的区别&quot;">​</a></h2><ul><li><code>v-show</code> 通过 <code>css</code> 中的 <code>display</code> 来控制显示和隐藏；</li><li><code>v-if</code> 组件是真正的渲染和销毁，而不是显示和隐藏；</li><li>当频繁切换显示状态时，用 <code>v-show</code> ，否则用 <code>v-if</code> 。</li></ul><h2 id="_4、为何-v-for-中要用-key" tabindex="-1">4、为何 v-for 中要用 key <a class="header-anchor" href="#_4、为何-v-for-中要用-key" aria-label="Permalink to &quot;4、为何 v-for 中要用 key&quot;">​</a></h2><ul><li>必须使用 <code>key</code> ，且不能是 <code>index</code> 和 <code>random</code> ；</li><li>原因在于，在 <code>vue</code> 的 <code>diff</code> 算法中，通过对 <code>tag</code> 和 <code>key</code> 来判断是否为相同节点 <code>sameNode</code> ，如果是相同节点，则会尽可能的复用原有的 <code>DOM</code> 节点。</li><li>使用 <code>key</code> 的好处是：减少渲染次数，提升渲染性能。</li></ul><h2 id="_5、描述-vue-组件生命周期" tabindex="-1">5、描述 Vue 组件生命周期 <a class="header-anchor" href="#_5、描述-vue-组件生命周期" aria-label="Permalink to &quot;5、描述 Vue 组件生命周期&quot;">​</a></h2><h3 id="_1-单组件生命周期" tabindex="-1">（1）单组件生命周期 <a class="header-anchor" href="#_1-单组件生命周期" aria-label="Permalink to &quot;（1）单组件生命周期&quot;">​</a></h3><p>一般来说，组件生命周期的执行顺序为：<strong>挂载阶段 → 更新阶段 → 销毁阶段</strong>。下面给出常用组件生命周期的解析。</p><table><thead><tr><th>生命周期钩子</th><th>介绍</th></tr></thead><tbody><tr><td>beforeCreate</td><td>在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</td></tr><tr><td><strong>created</strong></td><td>页面还没有渲染，但是 vue 的实例已经初始化结束。</td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用：相关的 render 函数首次被调用。</td></tr><tr><td><strong>mounted</strong></td><td>页面已经渲染完毕。</td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</td></tr><tr><td>activated</td><td>keep-alive 组件激活时调用。</td></tr><tr><td>deactivated</td><td>keep-alive 组件停用时调用。</td></tr><tr><td><strong>beforeDestroy</strong></td><td>实例销毁之前调用。在这一步，实例仍然完全可用。<strong>常用场景有：</strong> 自定义事件的绑定要解除、setTimeout 等定时任务需要销毁、自己绑定的 window 或者 document 事件需要销毁。</td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</td></tr></tbody></table><h3 id="_2-父子组件生命周期关系" tabindex="-1">（2）父子组件生命周期关系 <a class="header-anchor" href="#_2-父子组件生命周期关系" aria-label="Permalink to &quot;（2）父子组件生命周期关系&quot;">​</a></h3><p><strong>加载渲染过程</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>子组件更新过程</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>父组件更新过程</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">父beforeUpdate-&gt;父updated</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">父beforeUpdate-&gt;父updated</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>销毁过程</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_6、vue-组件如何通讯-常见" tabindex="-1">6、Vue 组件如何通讯（常见） <a class="header-anchor" href="#_6、vue-组件如何通讯-常见" aria-label="Permalink to &quot;6、Vue 组件如何通讯（常见）&quot;">​</a></h2><p><code>vue</code> 组件常见的通讯方式有以下三种：</p><ul><li>父子组件 <code>props</code> 和 <code>this.$emit</code> ；</li><li>自定义事件 <code>event.$no</code> 、 <code>event.$off </code> 和 <code>event.$emit</code> ；</li><li><code>vuex</code> 。</li></ul><h2 id="_7、描述组件渲染和更新的过程" tabindex="-1">7、描述组件渲染和更新的过程 <a class="header-anchor" href="#_7、描述组件渲染和更新的过程" aria-label="Permalink to &quot;7、描述组件渲染和更新的过程&quot;">​</a></h2><p>关于组件的渲染和更新过程，需要了解以下这张图。大家可以从 <code>1-6</code> 依次按顺序地对下图的整个过程进行细化和解读。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270819829.png" alt="组件渲染和更新过程"></p><h2 id="_8、vue-如何处理刷新数据不丢失" tabindex="-1">8、vue 如何处理刷新数据不丢失 <a class="header-anchor" href="#_8、vue-如何处理刷新数据不丢失" aria-label="Permalink to &quot;8、vue 如何处理刷新数据不丢失&quot;">​</a></h2><ul><li>对 <code>vuex</code> 进行配置，将 <code>vuex</code> 的状态储存到 <code>localStorage</code> 中；</li><li>在页面加载时读取 <code>localStorage</code> 里的状态信息；</li><li>在页面刷新时将 <code>vuex</code> 里的信息保存到 <code>localStorage</code> 里；</li><li>在页面中将 <code>vuex</code> 里的信息使用 <code>computed</code> 接收。</li></ul><h2 id="_9、双向数据绑定-v-model-的实现原理" tabindex="-1">9、双向数据绑定 v-model 的实现原理 <a class="header-anchor" href="#_9、双向数据绑定-v-model-的实现原理" aria-label="Permalink to &quot;9、双向数据绑定 v-model 的实现原理&quot;">​</a></h2><ul><li><p><code>input</code> 元素的 <code>value = this.name</code> ；</p></li><li><p>绑定 <code>input</code> 事件 <code>this.name = $event.target.value</code> ；</p></li><li><p><code>data</code> 更新后触发重新渲染 <code>re-render</code> ；</p></li><li><p>最核心问题：了解 <code>v-model</code> 在模板编译之后，产生的内容是什么。</p></li></ul><h2 id="_10、computed-有何特点" tabindex="-1">10、computed 有何特点 <a class="header-anchor" href="#_10、computed-有何特点" aria-label="Permalink to &quot;10、computed 有何特点&quot;">​</a></h2><ul><li><p>具有缓存功能，当 <code>data</code> 不变时不会进行计算；</p></li><li><p>有效地<strong>提高性能</strong>。</p></li></ul><h2 id="_11、为何组件-data-必须是一个函数" tabindex="-1">11、为何组件 data 必须是一个函数 <a class="header-anchor" href="#_11、为何组件-data-必须是一个函数" aria-label="Permalink to &quot;11、为何组件 data 必须是一个函数&quot;">​</a></h2><ul><li><p><code>export</code> 看似是一个对象，但是 <code>.vue</code> 文件编译出来后是一个类；</p></li><li><p>在每一个地方（ <code>data</code> ， <code>method</code> ……）等等进行使用就是对 <code>class</code> 进行实例化；</p></li><li><p>我们在实例化的时候执行 <code>data</code> ；</p></li><li><p>如果这个 <code>data</code> 不是函数的话，那每一个组件的实例数据就都一样了，就<strong>共享</strong>了；</p></li><li><p>因此需要让它在<strong>闭包</strong>之中。</p></li></ul><h2 id="_12、ajax-请求应该放在哪个生命周期" tabindex="-1">12、ajax 请求应该放在哪个生命周期 <a class="header-anchor" href="#_12、ajax-请求应该放在哪个生命周期" aria-label="Permalink to &quot;12、ajax 请求应该放在哪个生命周期&quot;">​</a></h2><ul><li><p><code>mounted</code> 表示整个渲染完成， <code>dom</code> 也加载完成，因此 <code>ajax</code> 请求应该放在 <code>mounted</code> 生命周期中；</p></li><li><p>本质上 <code>js</code> 是单线程的，并且 <code>ajax</code> 是<strong>异步获取数据</strong>，是异步加载的一个机制；</p></li><li><p>如果将其放在 <code>mounted</code> 之前是没有用的，这样做只会让逻辑更加混乱；</p></li><li><p>原因在于，如果在 <code>mounted</code> 之前放 <code>ajax</code> 请求，那么这个时候 <code>js</code> 还没有渲染完成。且又因为 <code>ajax</code> 请求的数据还是异步的，因此即使是在 <code>mounted</code> 之前也不能加载，也不会有提前加载的效果。</p></li></ul><h2 id="_13、如何将组件所有-props-传递给子组件" tabindex="-1">13、如何将组件所有 props 传递给子组件？ <a class="header-anchor" href="#_13、如何将组件所有-props-传递给子组件" aria-label="Permalink to &quot;13、如何将组件所有 props 传递给子组件？&quot;">​</a></h2><ul><li><p>父组件通过 <code>$props</code> 的而方式将自己的属性传递给子组件；</p></li><li><p>之后子组件通过 <code>&lt;User v-bind = &quot;$props&quot; /&gt;</code> 这种方式去接收父组件传递过来的参数。</p></li><li><p><strong>注：</strong> 细节知识点，优先级不高</p></li></ul><h2 id="_14、如何自己实现-v-model" tabindex="-1">14、如何自己实现 v-model <a class="header-anchor" href="#_14、如何自己实现-v-model" aria-label="Permalink to &quot;14、如何自己实现 v-model&quot;">​</a></h2><p><strong>第一步</strong>，我们先定义一个子组件，名字叫 <code>CustomVModel.vue</code> ，具体代码如下：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">&lt;!-- $emit是子组件往父组件传递数据 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">:value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@input</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;$emit(&#39;change1&#39;, $event.target.value)&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">&lt;!--</span></span>
<span class="line"><span style="color:#6A737D;">        1. 上面的 input 使用了 :value 来绑定数据，而不是使用 v-model</span></span>
<span class="line"><span style="color:#6A737D;">        2. 上面的 change1 和 model.event 要对应起来</span></span>
<span class="line"><span style="color:#6A737D;">        3. 上面的 text1 与下面props的 text1 属性对应起来</span></span>
<span class="line"><span style="color:#6A737D;">    --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    model: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      prop: </span><span style="color:#9ECBFF;">&#39;text1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 对应下面 props 的 text1</span></span>
<span class="line"><span style="color:#E1E4E8;">      event: </span><span style="color:#9ECBFF;">&#39;change1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    props: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      text1: String,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">&lt;!-- $emit是子组件往父组件传递数据 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">input</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">:value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;text1&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@input</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;$emit(&#39;change1&#39;, $event.target.value)&quot;</span></span>
<span class="line"><span style="color:#24292E;">  /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">&lt;!--</span></span>
<span class="line"><span style="color:#6A737D;">        1. 上面的 input 使用了 :value 来绑定数据，而不是使用 v-model</span></span>
<span class="line"><span style="color:#6A737D;">        2. 上面的 change1 和 model.event 要对应起来</span></span>
<span class="line"><span style="color:#6A737D;">        3. 上面的 text1 与下面props的 text1 属性对应起来</span></span>
<span class="line"><span style="color:#6A737D;">    --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    model: {</span></span>
<span class="line"><span style="color:#24292E;">      prop: </span><span style="color:#032F62;">&#39;text1&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 对应下面 props 的 text1</span></span>
<span class="line"><span style="color:#24292E;">      event: </span><span style="color:#032F62;">&#39;change1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    props: {</span></span>
<span class="line"><span style="color:#24292E;">      text1: String,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p><strong>第二步</strong>，我们在父组件中使用上面的这个子组件：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;vue 高级特性&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">hr</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- 自定义 v-model --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;{{name}}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">CustomVModel</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-model</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> CustomVModel </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./CustomVModel&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    components: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      CustomVModel,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;Monday&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;vue 高级特性&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">hr</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 自定义 v-model --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;{{name}}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">CustomVModel</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-model</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> CustomVModel </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./CustomVModel&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    components: {</span></span>
<span class="line"><span style="color:#24292E;">      CustomVModel,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        name: </span><span style="color:#032F62;">&#39;Monday&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>通过上面的代码我们可以发现，通过绑定 <code>value</code> 属性和 <code>input</code> 事件这两个语法糖，最终实现数据的双向绑定。</p><p>此时我们看下浏览器的显示效果。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270819945.png" alt="自定义v-model"></p><p>通过上图我们自己发现，结果跟实际的 <code>v-model</code> 结果是一样的。至此，我们就实现了自定义的 <code>v-model</code> ，以此来操作<strong>数据的双向绑定</strong>。</p><h2 id="_15、多个组件有相同的逻辑-如何抽离" tabindex="-1">15、多个组件有相同的逻辑，如何抽离？ <a class="header-anchor" href="#_15、多个组件有相同的逻辑-如何抽离" aria-label="Permalink to &quot;15、多个组件有相同的逻辑，如何抽离？&quot;">​</a></h2><ul><li><p>在 <code>vue2.x</code> 中，当多个组件有相同的逻辑时，可以使用 <code>mixin</code> 来进行逻辑抽离；</p></li><li><p>值得注意的是， <code>mixin</code> 存在有以下问题：</p><ul><li>变量来源不明确，不利于阅读。</li><li>多个 <code>mixin</code> 可能会造成<strong>命名冲突</strong>。</li><li><code>mixin</code> 和组件可能出现<strong>多对多</strong>的关系，复杂度较高。</li></ul></li><li><p>因此，要慎用 <code>mixin</code> ，且 <code>vue3.x</code> 已经出了 <code>Composition API</code> ，来解决 <code>vue2.x</code> 中存在的这些问题。</p></li></ul><h2 id="_16、何时要使用异步组件" tabindex="-1">16、何时要使用异步组件 <a class="header-anchor" href="#_16、何时要使用异步组件" aria-label="Permalink to &quot;16、何时要使用异步组件&quot;">​</a></h2><ul><li><p>当加载大组件时，需要用到异步组件；</p></li><li><p>当 <code>vue-router</code> 路由要进行<strong>异步加载</strong>时，需要用到异步组件；</p></li><li><p>异步组件可以达到优化性能的效果。</p></li></ul><h2 id="_17、何时使用-keep-alive" tabindex="-1">17、何时使用 keep-alive <a class="header-anchor" href="#_17、何时使用-keep-alive" aria-label="Permalink to &quot;17、何时使用 keep-alive&quot;">​</a></h2><ul><li><p><code>keep-alive</code> 可以<strong>缓存组件</strong>，使得组件<strong>不需要重复渲染</strong>；</p></li><li><p>比如像多个静态 <code>tab</code> 页的切换；</p></li><li><p><code>keep-alive</code> 可以达到优化性能的效果。</p></li></ul><h2 id="_18、何时需要使用-beforedestory" tabindex="-1">18、何时需要使用 beforeDestory <a class="header-anchor" href="#_18、何时需要使用-beforedestory" aria-label="Permalink to &quot;18、何时需要使用 beforeDestory&quot;">​</a></h2><ul><li><p>当<strong>解绑自定义事件 <code>event.$off</code></strong> 时，需使用 <code>beforeDestory</code> 来对事件进行销毁操作；</p></li><li><p>当使用定时器绑定时间时，在定时器操作结束时，需要<strong>清除定时器</strong>；</p></li><li><p><strong>解绑自定义的 <code>DOM</code> 事件，如 <code>window scroll</code> 等</strong>，需要在 <code>beforeDestory</code> 生命周期来对其进行事件解绑。</p></li></ul><p><strong>注意：</strong> 如果以上三者不做的话，很容易造成<strong>内存泄漏</strong>。</p><h2 id="_19、什么是作用域插槽" tabindex="-1">19、什么是作用域插槽 <a class="header-anchor" href="#_19、什么是作用域插槽" aria-label="Permalink to &quot;19、什么是作用域插槽&quot;">​</a></h2><ul><li>父组件模板的所有东西只会在父级作用域内编译；</li><li>子组件模板的所有东西只会在子集作用域内编译；</li><li>而作用域插槽想解决的问题就是，<strong>让父组件可以访问到子组件的数据</strong>。</li></ul><h2 id="_20、vuex-中-action-和-mutation-有何区别" tabindex="-1">20、vuex 中 action 和 mutation 有何区别 <a class="header-anchor" href="#_20、vuex-中-action-和-mutation-有何区别" aria-label="Permalink to &quot;20、vuex 中 action 和 mutation 有何区别&quot;">​</a></h2><ul><li><p><code>action</code> 中可以处理异步， <code>mutation</code> 不可以；</p></li><li><p><code>mutation</code> 做原子操作，即做一个操作，比较原子的；</p></li><li><p><code>action</code> 可以整合多个 <code>mutation</code> ，可以理解为整理多个原子操作的集合。</p></li></ul><h2 id="_21、vue-router-常用的路由模式" tabindex="-1">21、vue-router 常用的路由模式 <a class="header-anchor" href="#_21、vue-router-常用的路由模式" aria-label="Permalink to &quot;21、vue-router 常用的路由模式&quot;">​</a></h2><ul><li><p><code>hash</code> 默认</p></li><li><p><code>H5 history</code> （需要服务端支持）</p></li></ul><blockquote><ul><li><p>已将路由模式整理成博客，具体戳下方链接 👇</p></li><li><p>原文：<a href="https://juejin.cn/post/6993840419041706014" target="_blank" rel="noreferrer">浅谈前端路由原理</a></p></li><li><p>链接：<a href="https://juejin.cn/post/6993840419041706014" target="_blank" rel="noreferrer">https://juejin.cn/post/6993840419041706014</a></p></li></ul></blockquote><h2 id="_22、如何配置-vue-router-异步加载" tabindex="-1">22、如何配置 vue-router 异步加载 <a class="header-anchor" href="#_22、如何配置-vue-router-异步加载" aria-label="Permalink to &quot;22、如何配置 vue-router 异步加载&quot;">​</a></h2><ul><li>在 <code>vue-router</code> 中，使用 <code>import</code> 来实现异步加载。</li></ul><h2 id="_23、scope-是怎么实现的" tabindex="-1">23、scope 是怎么实现的 <a class="header-anchor" href="#_23、scope-是怎么实现的" aria-label="Permalink to &quot;23、scope 是怎么实现的&quot;">​</a></h2><p><strong>（1）scoped 的实现原理：</strong></p><ul><li>给 <code>DOM</code> 节点加一个不重复的属性 <code>data-v-5db9451a</code> 来标志唯一性。</li><li>如果组件内部还有组件，只会给最外层的组件里的标签加上唯一属性字段，不影响组件内部引用的组件。</li></ul><p><strong>（2）vue 中 scoped 的作用：</strong></p><ul><li>实现组件的私有化，当前 <code>style</code> 样式属性只属于当前模块，不污染全局。</li><li>但是当我们使用公共组件的时候会造成很多困难。</li></ul><p><strong>（3）谨慎使用：</strong></p><ul><li>父组件无 <code>scoped</code> 属性，子组件带有 <code>scoped</code> ，父组件是无法操作子组件的。</li><li>父组件有 <code>scoped</code> 属性，子组件无 <code>scoped</code> 。父组件也无法设置子组件样式。因为父组件的所有标签都会带有 <code>data-v-5db9451a</code> 唯一标志，但子组件不会带有这个唯一标志属性。</li><li>父子组件都有，同理也无法设置样式，更改起来增加代码量。</li></ul><h2 id="_24、vue-常用性能优化方式" tabindex="-1">24、vue 常用性能优化方式 <a class="header-anchor" href="#_24、vue-常用性能优化方式" aria-label="Permalink to &quot;24、vue 常用性能优化方式&quot;">​</a></h2><ul><li>合理使用 <code>v-show</code> 和 <code>v-if</code></li><li>合理使用 <code>computed</code></li><li><code>v-for</code> 时加 <code>key</code> ，以及避免和 <code>v-if</code> 同时使用</li><li>自定义事件、 <code>DOM</code> 事件及时销毁</li><li>合理使用异步组件</li><li>合理使用 <code>keep-alive</code></li><li><code>data</code> 层级不要太深，尽量扁平</li><li>使用 <code>vue-loader</code> 在开发环境做模板编译（预编译）</li><li>合理使用 <code>keep-alive</code></li><li><code>webpack</code> 层面的优化</li><li>使用 <code>SSR</code></li></ul><h1 id="📟-三、vue2-x-原理知识预备" tabindex="-1">📟 三、vue2.x 原理知识预备 <a class="header-anchor" href="#📟-三、vue2-x-原理知识预备" aria-label="Permalink to &quot;📟 三、vue2.x 原理知识预备&quot;">​</a></h1><p>在了解常见的面试题之前，需要先对 <code>vue2.x</code> 的原理知识有一个体系的了解。<strong>详细见下图 👇</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270819271.png" alt="vue2.x原理知识思维导图"></p><blockquote><ul><li><p>关于以上内容，已整理成博文，戳下方链接进入学习 👇</p></li><li><p>原文 1：<a href="https://juejin.cn/post/6978278417951096839" target="_blank" rel="noreferrer">手把手教你剖析 vue 响应式原理，监听数据不再迷茫</a></p></li><li><p>链接 1：<a href="https://juejin.cn/post/6978278417951096839" target="_blank" rel="noreferrer">https://juejin.cn/post/6978278417951096839</a></p></li><li><p>原文 2：<a href="https://juejin.cn/post/6978621084862005285" target="_blank" rel="noreferrer">面试中的网红虚拟 DOM，你知多少呢？深入解读 diff 算法</a></p></li><li><p>链接 2：<a href="https://juejin.cn/post/6978621084862005285" target="_blank" rel="noreferrer">https://juejin.cn/post/6978621084862005285</a></p></li><li><p>原文 3：<a href="https://juejin.cn/post/6978965732633608222" target="_blank" rel="noreferrer">模板编译 template 的背后，究竟发生了什么事？带你了解 template 的纸短情长</a></p></li><li><p>链接 3：<a href="https://juejin.cn/post/6978965732633608222" target="_blank" rel="noreferrer">https://juejin.cn/post/6978965732633608222</a></p></li></ul></blockquote><h1 id="📠-四、vue-原理知识常见面试题" tabindex="-1">📠 四、vue 原理知识常见面试题 <a class="header-anchor" href="#📠-四、vue-原理知识常见面试题" aria-label="Permalink to &quot;📠 四、vue 原理知识常见面试题&quot;">​</a></h1><p>基于以上知识点，我们将其细分为面试中的常考题。<strong>详细见下图 👇</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270819002.png" alt="vue2.x原理知识面试题整理"></p><p>接下来对这些题目进行一一解答。</p><h2 id="_1、对-mvvm-的理解" tabindex="-1">1、对 MVVM 的理解 <a class="header-anchor" href="#_1、对-mvvm-的理解" aria-label="Permalink to &quot;1、对 MVVM 的理解&quot;">​</a></h2><p>所谓 <code>MVVM</code> ，即 <strong>Model-View-ViewModel</strong> 。</p><p><strong>View</strong> 即 <strong>视图</strong> ，也就是 <code>DOM </code> 。</p><p><strong>Model</strong> 即 <strong>模型</strong> ，可以理解为 <code>Vue</code> 中组件里面的 <code>data</code> 。</p><p>那么这两者之间，就通过 <strong>ViewModel</strong> 来做关联。而 <code>ViewModel</code> 可以做的事情有很多，比如说像监听事件，监听指令等。当 <code>Model</code> 层的数据发生修改时，就可以通过 <code>ViewModel</code> ，来把数据渲染到 <code>View</code> 视图层上。反之，当 <code>View</code> 层触发 <code>DOM</code> 事件时，就可以通过 <code>ViewModel</code> ，从而使得 <code>Model</code> 层实现数据的修改。</p><p>这就是 <code>Vue</code> 中的数据驱动视图，通过修改 <code>Model</code> 层的数据，来驱动到 <code>View</code> 的视图中来。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270819989.png" alt="MVVM"></p><h2 id="_2、监听-data-变化的核心-api-是什么" tabindex="-1">2、监听 data 变化的核心 API 是什么 <a class="header-anchor" href="#_2、监听-data-变化的核心-api-是什么" aria-label="Permalink to &quot;2、监听 data 变化的核心 API 是什么&quot;">​</a></h2><ul><li>所谓 <code>vue</code> 的响应式，即组件 <code>data</code> 的数据一旦变化，就会立刻触发视图的更新。实现数据驱动视图的第一步，需要了解实现响应式的一个核心 <code>API</code> ，即 <code>Object.defineProperty</code> 。</li><li>通过 <code>Object.defineProperty</code> ，我们可以实现对数据进行 <code>get</code> 和 <code>set</code> 操作，即<strong>获取数据</strong>和<strong>修改数据</strong>的操作，从而达到对数据进行响应式的监听。</li></ul><h2 id="_3、vue-如何监听数组变化" tabindex="-1">3、vue 如何监听数组变化 <a class="header-anchor" href="#_3、vue-如何监听数组变化" aria-label="Permalink to &quot;3、vue 如何监听数组变化&quot;">​</a></h2><p>要想让 <code>Object.defineProperty()</code> 这个 <code>API</code> 拥有监听数组的能力，我们可以这么做。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 触发更新视图</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateView</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;视图更新&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 重新定义数组原型</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">oldArrayProperty</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 创建新对象，原型指向 oldArrayProperty ，再扩展新的方法不会影响原型</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arrProto</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(oldArrayProperty);</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;push&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;pop&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;shift&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;unshift&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;splice&#39;</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">methodName</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  arrProto[methodName] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">updateView</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 触发视图更新</span></span>
<span class="line"><span style="color:#E1E4E8;">    oldArrayProperty[methodName].</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Array.prototype.push.call(this, ...arguments)</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 重新定义属性，监听起来</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineReactive</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 深度监听</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">observer</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 核心 API</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(target, key, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newValue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (newValue </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 深度监听</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">observer</span><span style="color:#E1E4E8;">(newValue);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 设置新值</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注意，value 一直在闭包中，此处设置完之后，再 get 时也是会获取最新的值</span></span>
<span class="line"><span style="color:#E1E4E8;">        value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newValue;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 触发更新视图</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">updateView</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 监听对象属性</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">observer</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 不是对象或数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> target;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 污染全局的 Array 原型(如果直接定义在这里面，会直接污染全局)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Array.prototype.push = function () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//     updateView()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//     ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(target)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    target.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arrProto;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 重新定义各个属性（for in 也可以遍历数组）</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> target) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">defineReactive</span><span style="color:#E1E4E8;">(target, key, target[key]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 准备数据</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&#39;monday&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  age: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  info: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    address: </span><span style="color:#9ECBFF;">&#39;深圳&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 需要深度监听</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  nums: [</span><span style="color:#9ECBFF;">&#39;打篮球&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;出来玩&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;打乒乓球&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 监听数据</span></span>
<span class="line"><span style="color:#B392F0;">observer</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 测试</span></span>
<span class="line"><span style="color:#E1E4E8;">data.info.address </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;上海&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 深度监听</span></span>
<span class="line"><span style="color:#E1E4E8;">data.nums.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;神游&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 监听数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">复制代码;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 触发更新视图</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateView</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;视图更新&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 重新定义数组原型</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">oldArrayProperty</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 创建新对象，原型指向 oldArrayProperty ，再扩展新的方法不会影响原型</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arrProto</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(oldArrayProperty);</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;push&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;pop&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;shift&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;unshift&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;splice&#39;</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">methodName</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  arrProto[methodName] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">updateView</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 触发视图更新</span></span>
<span class="line"><span style="color:#24292E;">    oldArrayProperty[methodName].</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Array.prototype.push.call(this, ...arguments)</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 重新定义属性，监听起来</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineReactive</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 深度监听</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">observer</span><span style="color:#24292E;">(value);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 核心 API</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(target, key, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newValue</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newValue </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> value) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 深度监听</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">observer</span><span style="color:#24292E;">(newValue);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置新值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意，value 一直在闭包中，此处设置完之后，再 get 时也是会获取最新的值</span></span>
<span class="line"><span style="color:#24292E;">        value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newValue;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 触发更新视图</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">updateView</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 监听对象属性</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">observer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 不是对象或数组</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> target;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 污染全局的 Array 原型(如果直接定义在这里面，会直接污染全局)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Array.prototype.push = function () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//     updateView()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//     ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(target)) {</span></span>
<span class="line"><span style="color:#24292E;">    target.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arrProto;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 重新定义各个属性（for in 也可以遍历数组）</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> target) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">defineReactive</span><span style="color:#24292E;">(target, key, target[key]);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 准备数据</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;monday&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  info: {</span></span>
<span class="line"><span style="color:#24292E;">    address: </span><span style="color:#032F62;">&#39;深圳&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 需要深度监听</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  nums: [</span><span style="color:#032F62;">&#39;打篮球&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;出来玩&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;打乒乓球&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 监听数据</span></span>
<span class="line"><span style="color:#6F42C1;">observer</span><span style="color:#24292E;">(data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 测试</span></span>
<span class="line"><span style="color:#24292E;">data.info.address </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;上海&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 深度监听</span></span>
<span class="line"><span style="color:#24292E;">data.nums.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;神游&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 监听数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">复制代码;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><p><strong>此时浏览器的打印效果如下：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270820846.png" alt="监听数组"></p><p>我们可以看到，两个数据对应的视图都更新了。通过对<strong>数组原型</strong>的重新定义，我们就让 <code>Object.defineProperty()</code> 实现了<strong>监听数组</strong>的能力。</p><h2 id="_4、请描述响应式原理" tabindex="-1">4、请描述响应式原理 <a class="header-anchor" href="#_4、请描述响应式原理" aria-label="Permalink to &quot;4、请描述响应式原理&quot;">​</a></h2><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270820554.png" alt="组件渲染和更新过程"></p><p><strong>响应式原理概述：</strong></p><ul><li>任何一个 <code>Vue</code> 组件都会生成一个 <code>render</code> 函数。</li><li>之后 <code>render</code> 函数会生成一个 <code>vnode</code> 。</li><li>同时，在执行 <code>render</code> 函数的时候会触发 <code>data</code> 里面的 <code>getter</code> ，触发后则会生成依赖。</li><li>所谓依赖，就是在 <code>data</code> 触发到哪个变量，就会将哪一个变量观察起来。</li><li>之后，需要查看触发到的这个变量是否是之前作为依赖被观察起来的，如果是，则触发 <code>setter</code> 进行数据修改；如果不是，则直接进行监听操作；</li><li>最后，如果确定是之前作为依赖被重新观察起来的，那就执行 <code>re-render</code> 重新渲染操作，并且进行 <code>patch(vnode, newVnode)</code> 。</li></ul><h2 id="_5、请用-vnode-描述一个-dom-结构" tabindex="-1">5、请用 vnode 描述一个 DOM 结构 <a class="header-anchor" href="#_5、请用-vnode-描述一个-dom-结构" aria-label="Permalink to &quot;5、请用 vnode 描述一个 DOM 结构&quot;">​</a></h2><p>根据下方的 <code>html</code> 代码，用 <code>v-node</code> 模拟出该 <code>html</code> 代码的 <code>DOM</code> 结构。</p><p><strong>html 代码：</strong></p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;div1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;container&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;vdom&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;font-size:20px;&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;a&lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">复制代码</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;div1&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;container&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;vdom&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">ul</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;font-size:20px;&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;a&lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">复制代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>用 JS 模拟出以上代码的 DOM 结构：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">props</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">className</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;container&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;div1&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">children</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            tag: </span><span style="color:#9ECBFF;">&#39;p&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            chindren: </span><span style="color:#9ECBFF;">&#39;vdom&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            tag: </span><span style="color:#9ECBFF;">&#39;ul&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            props:{ style: </span><span style="color:#9ECBFF;">&#39;font-size: 20px&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">            children: [</span></span>
<span class="line"><span style="color:#E1E4E8;">                {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    tag: </span><span style="color:#9ECBFF;">&#39;li&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    children: </span><span style="color:#9ECBFF;">&#39;a&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#E1E4E8;">            ]</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">props</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">className</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;container&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;div1&#39;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">children</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            tag: </span><span style="color:#032F62;">&#39;p&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            chindren: </span><span style="color:#032F62;">&#39;vdom&#39;</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            tag: </span><span style="color:#032F62;">&#39;ul&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            props:{ style: </span><span style="color:#032F62;">&#39;font-size: 20px&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">            children: [</span></span>
<span class="line"><span style="color:#24292E;">                {</span></span>
<span class="line"><span style="color:#24292E;">                    tag: </span><span style="color:#032F62;">&#39;li&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                    children: </span><span style="color:#032F62;">&#39;a&#39;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#24292E;">            ]</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="_6、diff-算法的时间复杂度" tabindex="-1">6、diff 算法的时间复杂度 <a class="header-anchor" href="#_6、diff-算法的时间复杂度" aria-label="Permalink to &quot;6、diff 算法的时间复杂度&quot;">​</a></h2><ul><li>树的时间复杂度是 <strong>O(n<sup>3</sup>)</strong> ，因此，我们就想办法，优化其时间复杂度<strong>从 O(n<sup>3</sup>)到 O(n)</strong>，以达到操作 <code>vdom</code> 节点，那这个优化过程其实我们所说的 <code>diff</code> 算法。</li><li>所以， <code>diff</code> 算法的时间复杂度为 <code>O(n)</code> 。</li></ul><h2 id="_7、简述-diff-算法过程" tabindex="-1">7、简述 diff 算法过程 <a class="header-anchor" href="#_7、简述-diff-算法过程" aria-label="Permalink to &quot;7、简述 diff 算法过程&quot;">​</a></h2><ul><li>首先，对比节点本身，要先判断是否为同一节点，如果不为相同节点，则删除该节点重新创建节点进行替换；</li><li>如果为相同节点时，进行 <code>patchVnode</code> ，判断如何对该节点的子节点进行处理，先判断一方有子节点一方没有子节点的情况（如果新的 <code>children</code> 没有子节点，则将旧的子节点移除）；</li><li>比较如果都有子节点，则进行 <code>updateChildren</code> ，判断如何对这些新老节点的子节点进行操作（ <code>diff</code> 核心）。</li><li>匹配时，找到相同的子节点，递归比较子节点。</li></ul><p><strong>注意：</strong> 在 <code>diff</code> 中，只对同层的子节点进行比较，放弃跨级的节点比较，使得时间复杂从 <code>O(n^3)</code> 降低值 <code>O(n)</code> ，也就是说，只有当新旧 <code>children</code> 都为多个子节点时才需要用核心的 <code>diff</code> 算法进行同层级比较。</p><h2 id="_8、vue-模板编译的原理是什么" tabindex="-1">8、vue 模板编译的原理是什么 <a class="header-anchor" href="#_8、vue-模板编译的原理是什么" aria-label="Permalink to &quot;8、vue 模板编译的原理是什么&quot;">​</a></h2><ul><li><code>vue</code> 在进行模板编译之后，会先转化成一个 <code>render</code> 函数，之后继续执行 <code>render</code> 函数，执行完成之后返回一个 <code>vnode</code> ；</li><li>在得到 <code>vnode</code> 之后，基于 <code>vnode</code> 的基础上，再执行 <code>patch</code> 和 <code>diff</code> 。</li></ul><h2 id="_9、vue-为何是异步渲染-nexttick-有何用" tabindex="-1">9、vue 为何是异步渲染，$nextTick 有何用？ <a class="header-anchor" href="#_9、vue-为何是异步渲染-nexttick-有何用" aria-label="Permalink to &quot;9、vue 为何是异步渲染，$nextTick 有何用？&quot;">​</a></h2><ul><li><code>vue</code> 是组件级更新，一旦当前组件里的数据变了，那么它就会去更新这个组件。</li><li>但是试想一下，如果当数据更改一次，组件就要去重新渲染一次，这样对性能来说都是不太友好的。</li><li>因此，为了防止数据一更新就更新组件，所以需要异步渲染来处理。</li><li>而异步渲染的核心的方法就是 <code>nextTick</code> ， <code>$nextTick</code> 可以在 <code>DOM</code> 更新完之后，<strong>再触发回调</strong>。</li></ul><h2 id="_10、spa-单页面应用是什么" tabindex="-1">10、SPA 单页面应用是什么？ <a class="header-anchor" href="#_10、spa-单页面应用是什么" aria-label="Permalink to &quot;10、SPA 单页面应用是什么？&quot;">​</a></h2><p><strong>SPA</strong>，即<strong>单页面应用</strong>(Single Page Application)。所谓单页 <code>Web</code> 应用，就是只有一张 <code>Web</code> 页面的应用。单页应用程序 (SPA) 是加载单个 <code>HTML</code> 页面并在<strong>用户与应用程序交互时</strong>动态更新该页面的 <code>Web</code> 应用程序。浏览器一开始会加载必需的 <code>HTML</code> 、 <code>CSS</code> 和 <code>JavaScript</code> ，所有的操作都在这张页面上完成，都由 <code>JavaScript</code> 来控制。</p><p>现如今，为了配合单页面 <code>Web</code> 应用快速发展的节奏，各类<strong>前端组件化技术栈</strong>层出不穷。近几年来，通过不断的版本迭代， <code>vue</code> 和 <code>react</code> 两大技术栈脱颖而出，成为当下最受欢迎的两大技术栈。</p><h2 id="_11、hash-和-history-的区别是什么" tabindex="-1">11、hash 和 history 的区别是什么？ <a class="header-anchor" href="#_11、hash-和-history-的区别是什么" aria-label="Permalink to &quot;11、hash 和 history 的区别是什么？&quot;">​</a></h2><h3 id="_1-hash" tabindex="-1">（1）hash <a class="header-anchor" href="#_1-hash" aria-label="Permalink to &quot;（1）hash&quot;">​</a></h3><ul><li>hash 变化会触发网页跳转，即浏览器的前进和后退。</li><li><code>hash</code> 可以改变 <code>url</code> ，但是不会触发页面重新加载（hash 的改变是记录在 <code>window.history</code> 中），即不会刷新页面。也就是说，所有页面的跳转都是在客户端进行操作。因此，这并不算是一次 <code>http</code> 请求，所以这种模式不利于 <code>SEO</code> 优化。<code>hash</code> 只能修改 <code>#</code> 后面的部分，所以只能跳转到与当前 <code>url</code> 同文档的 <code>url</code> 。</li><li><code>hash</code> 通过 <code>window.onhashchange</code> 的方式，来监听 <code>hash</code> 的改变，借此实现无刷新跳转的功能。</li><li><code>hash</code> 永远不会提交到 <code>server</code> 端（可以理解为只在前端自生自灭）。</li></ul><h3 id="_2-history" tabindex="-1">（2）history <a class="header-anchor" href="#_2-history" aria-label="Permalink to &quot;（2）history&quot;">​</a></h3><ul><li>新的 <code>url</code> 可以是与当前 <code>url</code> 同源的任意 <code>url</code> ，也可以是与当前 <code>url</code> 一样的地址，但是这样会导致的一个问题是，会把<strong>重复的这一次操作</strong>记录到栈当中。</li><li>通过 <code>history.state</code> ，添加任意类型的数据到记录中。</li><li>可以额外设置 <code>title</code> 属性，以便后续使用。</li><li>通过 <code>pushState</code> 、 <code>replaceState</code> 来实现无刷新跳转的功能。</li><li>使用 <code>history</code> 模式时，在对当前的页面进行刷新时，此时浏览器会重新发起请求。如果 <code>nginx</code> 没有匹配得到当前的 <code>url</code> ，就会出现 <code>404</code> 的页面。</li><li>而对于 <code>hash</code> 模式来说， 它虽然看着是改变了 <code>url</code> ，但不会被包括在 <code>http</code> 请求中。所以，它算是被用来<strong>指导浏览器的动作</strong>，并不影响服务器端。因此，改变 <code>hash</code> 并没有真正地改变 <code>url</code> ，所以页面路径还是之前的路径， <code>nginx</code> 也就不会拦截。</li><li>因此，在使用 <code>history</code> 模式时，需要<strong>通过服务端来允许地址可访问</strong>，如果没有设置，就很容易导致出现 <code>404</code> 的局面。</li></ul><h2 id="_12、hash-和-history-两者的选择" tabindex="-1">12、hash 和 history 两者的选择 <a class="header-anchor" href="#_12、hash-和-history-两者的选择" aria-label="Permalink to &quot;12、hash 和 history 两者的选择&quot;">​</a></h2><ul><li><code>to B</code> 的系统推荐用 <code>hash</code> ，相对简单且容易使用，且因为 <code>hash</code> 对 <code>url</code> 规范不敏感；</li><li><code>to C</code> 的系统，可以考虑选择 <code>H5 history</code> ，但是需<strong>要服务端支持</strong>；</li><li>能先用简单的，就别用复杂的，<strong>要考虑成本和收益</strong>。</li></ul><h1 id="🖨️-五、vue3-x-知识预备" tabindex="-1">🖨️ 五、vue3.x 知识预备 <a class="header-anchor" href="#🖨️-五、vue3-x-知识预备" aria-label="Permalink to &quot;🖨️ 五、vue3.x 知识预备&quot;">​</a></h1><p>关于 <code>vue3</code> 模块，我将把<strong>基础知识</strong>和<strong>原理</strong>的内容结合在一起进行整理。<strong>详细见下图 👇</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270820461.png" alt="vue3.x知识思维导图"></p><blockquote><ul><li><p>关于以上内容，已整理成博文，戳下方链接进入学习 👇</p></li><li><p><strong>原文 1：</strong> <a href="https://juejin.cn/post/6976400439793172487" target="_blank" rel="noreferrer">一文了解 vue3 基础新特性</a></p></li><li><p><strong>链接 1：</strong> <a href="https://juejin.cn/post/6976400439793172487" target="_blank" rel="noreferrer">https://juejin.cn/post/6976400439793172487</a></p></li><li><p><strong>原文 2：</strong> <a href="https://juejin.cn/post/6976679225239535629" target="_blank" rel="noreferrer">敲黑板！vue3 重点！一文了解 Composition API 新特性：ref、toRef、toRefs</a></p></li><li><p><strong>链接 2：</strong> <a href="https://juejin.cn/post/6976679225239535629" target="_blank" rel="noreferrer">https://juejin.cn/post/6976679225239535629</a></p></li><li><p><strong>原文 3：</strong> <a href="https://juejin.cn/post/6977135865730433038" target="_blank" rel="noreferrer">一文 get 一波 vue3.x 进阶新特性</a></p></li><li><p><strong>链接 3：</strong> <a href="https://juejin.cn/post/6976040670939054093" target="_blank" rel="noreferrer">https://juejin.cn/post/6976040670939054093</a></p></li><li><p><strong>原文 4：</strong> <a href="https://juejin.cn/post/6979368550225936392" target="_blank" rel="noreferrer">vue2 的响应式原理学“废”了吗？继续观摩 vue3 响应式原理 Proxy</a></p></li><li><p><strong>链接 4：</strong> <a href="https://juejin.cn/post/6979368550225936392" target="_blank" rel="noreferrer">https://juejin.cn/post/6979368550225936392</a></p></li></ul></blockquote><h1 id="⌨️-六、vue3-x-常见面试题" tabindex="-1">⌨️ 六、vue3.x 常见面试题 <a class="header-anchor" href="#⌨️-六、vue3-x-常见面试题" aria-label="Permalink to &quot;⌨️ 六、vue3.x 常见面试题&quot;">​</a></h1><p>基于以上知识点，我们将其细分为面试中的常考题。<strong>详细见下图 👇</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270820160.png" alt="vue3.x基础知识面试题整理"></p><p>接下来对这些题进行一一解答。</p><h2 id="_1、vue3-和-vue2-有什么优势" tabindex="-1">1、vue3 和 vue2 有什么优势？ <a class="header-anchor" href="#_1、vue3-和-vue2-有什么优势" aria-label="Permalink to &quot;1、vue3 和 vue2 有什么优势？&quot;">​</a></h2><ul><li><code>vue3</code> 比 <code>vue2</code> 来说，<strong>性能上更好</strong>，<strong>代码体积更小</strong>，并且有<strong>更好的 ts 支持</strong>。</li><li>同时，更为突出的特点是， <code>vue3</code> 有<strong>更好的代码组织能力</strong>，有<strong>更好的逻辑抽离能力</strong>，并且还有<strong>更多各式各样的新功能</strong>。</li><li>其中尤为突出的就是大家平常耳熟能详的 <code>Composition API</code> 和 <code>Options API</code> 。</li></ul><h2 id="_2、描述-vue3-生命周期" tabindex="-1">2、描述 vue3 生命周期 <a class="header-anchor" href="#_2、描述-vue3-生命周期" aria-label="Permalink to &quot;2、描述 vue3 生命周期&quot;">​</a></h2><p>以下给出 <code>Vue2</code> 与 <code>Vue3</code> 生命周期的对比。</p><table><thead><tr><th style="text-align:center;">Vue2 生命周期(Options API)</th><th style="text-align:center;">Vue3 生命周期(Composition API)</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">beforeCreate</td><td style="text-align:center;">setup</td><td style="text-align:center;">在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用</td></tr><tr><td style="text-align:center;">created</td><td style="text-align:center;">setup</td><td style="text-align:center;">页面还没有渲染，但是 vue 的实例已经初始化结束。</td></tr><tr><td style="text-align:center;">beforeMount</td><td style="text-align:center;">onBeforeMount</td><td style="text-align:center;">在挂载开始之前被调用：相关的 render 函数首次被调用。</td></tr><tr><td style="text-align:center;">mounted</td><td style="text-align:center;">onMounted</td><td style="text-align:center;">页面已经渲染完毕。</td></tr><tr><td style="text-align:center;">beforeUpdate</td><td style="text-align:center;">onBeforeUpdate</td><td style="text-align:center;">数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</td></tr><tr><td style="text-align:center;">updated</td><td style="text-align:center;">onUpdated</td><td style="text-align:center;">由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</td></tr><tr><td style="text-align:center;">beforeDestory</td><td style="text-align:center;">onBeforeUnmount</td><td style="text-align:center;">实例销毁之前调用。在这一步，实例仍然完全可用。</td></tr><tr><td style="text-align:center;">destroy</td><td style="text-align:center;">onUnmounted</td><td style="text-align:center;">Vue 实例销毁后调用。</td></tr></tbody></table><h2 id="_3、如何看待-composition-api-和-options-api" tabindex="-1">3、如何看待 Composition API 和 Options API <a class="header-anchor" href="#_3、如何看待-composition-api-和-options-api" aria-label="Permalink to &quot;3、如何看待 Composition API 和 Options API&quot;">​</a></h2><p>对于 <code>Composition API</code> 和 <code>Options API</code> 的使用，<strong>主要有以下几点建议：</strong></p><ul><li>两者不建议共用，不然很容易引起混乱；</li><li>对于小型项目、或者业务逻辑比较简单的项目，建议使用 <code>Options API</code> ；</li><li>对于中大型项目、或者逻辑比较复杂的项目，建议使用 <code>Composition API</code> ，相较于 <code>Options API</code> 来说， <code>Composition API</code> 对大型项目更好一些，逻辑的抽离，代码的复用，使得大型项目得以更好的维护。</li></ul><h2 id="_4、如何理解-ref、toref-和-torefs" tabindex="-1">4、如何理解 ref、toRef 和 toRefs <a class="header-anchor" href="#_4、如何理解-ref、toref-和-torefs" aria-label="Permalink to &quot;4、如何理解 ref、toRef 和 toRefs&quot;">​</a></h2><h3 id="_1-ref-是什么" tabindex="-1">（1）ref 是什么 <a class="header-anchor" href="#_1-ref-是什么" aria-label="Permalink to &quot;（1）ref 是什么&quot;">​</a></h3><ul><li><code>ref</code> 是可以生成 <code>值类型</code>（即基本数据类型） 的响应式数据；</li><li><code>ref</code> 可以用于<strong>模板</strong>和<strong>reactive</strong>；</li><li><code>ref</code> 通过 <code>.value</code> 来修改值（一定要记得加上 <code>.value</code> ）；</li><li><code>ref</code> 不仅可以用于<strong>响应式</strong>，还可以用于模板的 <code>DOM</code> 元素。</li></ul><h3 id="_2-toref-是什么" tabindex="-1">（2）toRef 是什么 <a class="header-anchor" href="#_2-toref-是什么" aria-label="Permalink to &quot;（2）toRef 是什么&quot;">​</a></h3><ul><li><p><code>toRef</code> 可以响应对象 <code>Object</code> ，其针对的是某一个响应式对象（ <code>reactive</code> 封装）的属性 <code>prop</code> 。</p></li><li><p><code>toRef</code> 和对象 <code>Object</code> 两者<strong>保持引用关系</strong>，即一个改完另外一个也跟着改。</p></li><li><p><code>toRef</code> 如果用于普通对象（非响应式对象），产出的结果不具备响应式。<strong>如下代码所示：</strong></p></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//普通对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  age: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&#39;monday&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">//响应式对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reactive</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  age: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&#39;monday&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//普通对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;monday&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">//响应式对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reactive</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;monday&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_3-torefs-是什么" tabindex="-1">（3）toRefs 是什么 <a class="header-anchor" href="#_3-torefs-是什么" aria-label="Permalink to &quot;（3）toRefs 是什么&quot;">​</a></h3><ul><li>与 <code>toRef</code> 不一样的是， <code>toRefs</code> 是针对整个对象的所有属性，目标在于将响应式对象（ <code>reactive</code> 封装）转换为普通对象。</li><li>普通对象里的每一个属性 <code>prop</code> 都对应一个 <code>ref</code> 。</li><li><code>toRefs</code> 和对象 <code>Object</code> 两者<strong>保持引用关系</strong>，即一个改完另外一个也跟着改。</li></ul><h2 id="_5、vue3-升级了哪些重要的功能" tabindex="-1">5、vue3 升级了哪些重要的功能？ <a class="header-anchor" href="#_5、vue3-升级了哪些重要的功能" aria-label="Permalink to &quot;5、vue3 升级了哪些重要的功能？&quot;">​</a></h2><ul><li>createApp</li><li>emits(父子组件间的通信)</li><li>多事件处理</li><li>Fragment</li><li>移除 <code>.sync</code></li><li>异步组件</li><li>移除 filter</li><li>Teleport</li><li>Suspense</li></ul><h2 id="_6、composition-api-如何实现代码的逻辑复用" tabindex="-1">6、Composition API 如何实现代码的逻辑复用？ <a class="header-anchor" href="#_6、composition-api-如何实现代码的逻辑复用" aria-label="Permalink to &quot;6、Composition API 如何实现代码的逻辑复用？&quot;">​</a></h2><ul><li><code>composition API</code> 通过把代码的逻辑抽离出来进行封装，并把封装的内容直接引用到<strong>生命周期</strong>里面，已达到代码的逻辑复用效果。</li></ul><h2 id="_7、vue3-如何实现响应式" tabindex="-1">7、Vue3 如何实现响应式？ <a class="header-anchor" href="#_7、vue3-如何实现响应式" aria-label="Permalink to &quot;7、Vue3 如何实现响应式？&quot;">​</a></h2><ul><li>利用 <code>reactive</code> 注册响应式对象，对<strong>函数返回值</strong>进行操作。</li><li>利用 <code>Proxy</code> 劫持数据的 <code>get</code> , <code>set</code> , <code>deleteProperty</code> , <code>has</code> , <code>own</code> 。</li><li>利用 <code>WeakMap</code> , <code>Map</code> , <code>Set</code> 来实现依赖收集。</li><li><strong>缺点：</strong> 使用大量 <code>ES6</code> 新增特性，旧版本浏览器兼容性差。</li></ul><h2 id="_8、watch-和-watcheffect-的区别是什么" tabindex="-1">8、Watch 和 watchEffect 的区别是什么？ <a class="header-anchor" href="#_8、watch-和-watcheffect-的区别是什么" aria-label="Permalink to &quot;8、Watch 和 watchEffect 的区别是什么？&quot;">​</a></h2><ul><li>两者都可以监听 <code>data</code> 属性变化；</li><li><code>watch</code> 需要<strong>明确监听哪个属性</strong>；</li><li>而 <code>watchEffect</code> 会根据其中的属性，<strong>自动监听</strong>其变化。</li></ul><h2 id="_9、setup-中如何获取组件实例" tabindex="-1">9、setup 中如何获取组件实例? <a class="header-anchor" href="#_9、setup-中如何获取组件实例" aria-label="Permalink to &quot;9、setup 中如何获取组件实例?&quot;">​</a></h2><p>在 <code>vue2 </code> 中， <code>Options API</code> 可以使用 <code>this</code> 来获取组件的实例，但是到现在的 <code>vue3</code> ，已经被摒弃掉了。在 <code>setup</code> 和其他 <code>Composition API</code> 中没有 <code>this</code> ，但是它提供了一个 <code>getCurrentInstance</code> 来获取当前的实例。</p><h2 id="_10、vue3-为何比-vue2-快" tabindex="-1">10、vue3 为何比 vue2 快？ <a class="header-anchor" href="#_10、vue3-为何比-vue2-快" aria-label="Permalink to &quot;10、vue3 为何比 vue2 快？&quot;">​</a></h2><ul><li>Proxy 响应式</li><li>PatchFlag</li><li>hoistStatic</li><li>cacheHandler</li><li>SSR 优化</li><li>tree-shaking</li></ul><h2 id="_11、vite-是什么" tabindex="-1">11、vite 是什么？ <a class="header-anchor" href="#_11、vite-是什么" aria-label="Permalink to &quot;11、vite 是什么？&quot;">​</a></h2><ul><li><code>vite</code> 是一个前端的<strong>打包工具</strong>，是 <code>vue</code> 作者发起的一个项目；</li><li><code>vite</code> 借助 <code>vue</code> 的影响力，发展较快，和 <code>webpack</code> 有着一定的竞争关系；</li><li>优势： <code>vite</code> 使得程序<strong>在开发环境下无需打包</strong>，且启动非常快速。</li></ul><h2 id="_12、composition-api-和-react-hooks-的对比" tabindex="-1">12、Composition API 和 React hooks 的对比 <a class="header-anchor" href="#_12、composition-api-和-react-hooks-的对比" aria-label="Permalink to &quot;12、Composition API 和 React hooks 的对比&quot;">​</a></h2><ul><li>前者 <code>setup</code> 只会被调用一次，而后者函数会被多次调用。</li><li>前者无需 <code>useMemo </code>和 <code>useCallback</code> （即缓存数据和缓存函数），因为 <code>setup</code> 只调用一次。</li><li>前者无需顾虑调用顺序，而后者需要保证 <code>hooks</code> 的顺序一致。</li><li>前者 <code>reactive+ref</code> 比后者的 <code>useState</code> ，要难理解。</li></ul><h1 id="📸-七、结束语" tabindex="-1">📸 七、结束语 <a class="header-anchor" href="#📸-七、结束语" aria-label="Permalink to &quot;📸 七、结束语&quot;">​</a></h1><p>从 <code>vue2.x</code> 的基础知识，再到 <code>vue2.x</code> 的原理知识，最后到 <code>vue3.x</code> 的新特性和原理知识学习，全文贯穿着 <code>vue</code> 的知识要点及相关知识点所涉及到的一些面试题。</p><p>最后，关于这部分内容已整理成 <code>PDF</code> ，获取方式放在彩蛋里面，有需要的小伙伴自取 o！</p><h1 id="🐣-彩蛋-one-more-thing" tabindex="-1">🐣 彩蛋 One More Thing <a class="header-anchor" href="#🐣-彩蛋-one-more-thing" aria-label="Permalink to &quot;🐣 彩蛋 One More Thing&quot;">​</a></h1><h2 id="🏷️-往期推荐" tabindex="-1">🏷️ 往期推荐 <a class="header-anchor" href="#🏷️-往期推荐" aria-label="Permalink to &quot;🏷️ 往期推荐&quot;">​</a></h2><p><code>vue2.x</code> 和 <code>vue3.x</code> 的原理学习，累计博文输出 <code>11</code> 篇，以下是相关专栏文章~</p><ul><li>vue.js 基础知识 👉<a href="https://juejin.cn/column/6976040277068759077" target="_blank" rel="noreferrer">基础知识专栏传送门</a></li><li>vue.js 原理知识 👉<a href="https://juejin.cn/column/6976041758945706015" target="_blank" rel="noreferrer">原理知识专栏传送门</a></li></ul>`,191),p=[o];function t(c,r,i,d,E,y){return n(),a("div",null,p)}const b=s(e,[["render",t]]);export{h as __pageData,b as default};
