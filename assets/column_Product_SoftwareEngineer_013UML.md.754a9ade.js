import{_ as t,c as l,o as e,N as o}from"./chunks/framework.6510d215.js";const h=JSON.parse('{"title":"『软件工程13』浅谈面向对象方法，统一建模语言UML","description":"","frontmatter":{"title":"『软件工程13』浅谈面向对象方法，统一建模语言UML","author":"周一","date":"2021-06-05","categories":["产品汪"],"tags":["软件工程"],"sidebar":"auto"},"headers":[{"level":1,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":1,"title":"一、UML 的含义","slug":"一、uml-的含义","link":"#一、uml-的含义","children":[]},{"level":1,"title":"二、UML 的主要内容","slug":"二、uml-的主要内容","link":"#二、uml-的主要内容","children":[{"level":2,"title":"1、UML 的概念模型","slug":"_1、uml-的概念模型","link":"#_1、uml-的概念模型","children":[]},{"level":2,"title":"2、UML 概念模型图例","slug":"_2、uml-概念模型图例","link":"#_2、uml-概念模型图例","children":[]}]},{"level":1,"title":"三、UML 的基本构造块","slug":"三、uml-的基本构造块","link":"#三、uml-的基本构造块","children":[{"level":2,"title":"1、UML 中的事物","slug":"_1、uml-中的事物","link":"#_1、uml-中的事物","children":[{"level":3,"title":"（1）UML 中的四种事物","slug":"_1-uml-中的四种事物","link":"#_1-uml-中的四种事物","children":[]},{"level":3,"title":"（2）UML 中各种事物的图示法","slug":"_2-uml-中各种事物的图示法","link":"#_2-uml-中各种事物的图示法","children":[]}]},{"level":2,"title":"2、UML 中的四种关系","slug":"_2、uml-中的四种关系","link":"#_2、uml-中的四种关系","children":[{"level":3,"title":"（1）依赖","slug":"_1-依赖","link":"#_1-依赖","children":[]},{"level":3,"title":"（2）关联","slug":"_2-关联","link":"#_2-关联","children":[]},{"level":3,"title":"（3）泛化","slug":"_3-泛化","link":"#_3-泛化","children":[]},{"level":3,"title":"（4）实现","slug":"_4-实现","link":"#_4-实现","children":[]}]},{"level":2,"title":"3、UML 中的图形（五大类十种图）","slug":"_3、uml-中的图形-五大类十种图","link":"#_3、uml-中的图形-五大类十种图","children":[{"level":3,"title":"（1）用例图","slug":"_1-用例图","link":"#_1-用例图","children":[]},{"level":3,"title":"（2）静态图：类图、对象图、包图","slug":"_2-静态图-类图、对象图、包图","link":"#_2-静态图-类图、对象图、包图","children":[]},{"level":3,"title":"（3）行为图：状态图、活动图","slug":"_3-行为图-状态图、活动图","link":"#_3-行为图-状态图、活动图","children":[]},{"level":3,"title":"（4）交互图：顺序图、协作图","slug":"_4-交互图-顺序图、协作图","link":"#_4-交互图-顺序图、协作图","children":[]},{"level":3,"title":"（5）实现图：构建图、部署图","slug":"_5-实现图-构建图、部署图","link":"#_5-实现图-构建图、部署图","children":[]}]}]},{"level":1,"title":"四、写在最后","slug":"四、写在最后","link":"#四、写在最后","children":[]}],"relativePath":"column/Product/SoftwareEngineer/013UML.md","lastUpdated":1644826256000}'),r={name:"column/Product/SoftwareEngineer/013UML.md"},s=o('<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p>在下面的这篇文章中，将讲解我们平常常用的一种面向对象的画图方法，即统一建模语言<strong>UML</strong>(Unified Modeling Language)。</p><p>接下来开始进行讲解。</p><h1 id="一、uml-的含义" tabindex="-1">一、UML 的含义 <a class="header-anchor" href="#一、uml-的含义" aria-label="Permalink to &quot;一、UML 的含义&quot;">​</a></h1><ul><li>标准的建模语言（具有语言的规范）</li><li>促进沟通（各种图示表达规范）</li><li>支持系统构建（正向工程，反向工程）</li></ul><h1 id="二、uml-的主要内容" tabindex="-1">二、UML 的主要内容 <a class="header-anchor" href="#二、uml-的主要内容" aria-label="Permalink to &quot;二、UML 的主要内容&quot;">​</a></h1><h2 id="_1、uml-的概念模型" tabindex="-1">1、UML 的概念模型 <a class="header-anchor" href="#_1、uml-的概念模型" aria-label="Permalink to &quot;1、UML 的概念模型&quot;">​</a></h2><p>UML 具有一个完整的概念模型，提供了一套完整、全面的表达方法，其主要元素包括：<strong>①UML 的基本构造块</strong>；<strong>②</strong>支配这些构造块如何放在一起的<strong>规则</strong>；<strong>③</strong>一些运用于整个 UML 的<strong>公共机制</strong>。</p><h2 id="_2、uml-概念模型图例" tabindex="-1">2、UML 概念模型图例 <a class="header-anchor" href="#_2、uml-概念模型图例" aria-label="Permalink to &quot;2、UML 概念模型图例&quot;">​</a></h2><p>UML 概念模型$\\begin{cases} 基本构造块\\begin{cases} 事物：结构事物、行为事物、分组事物、注释事物 \\ 关系：依赖、关联、泛化、实现 \\ 图：用例图、类图、对象图、包图、交互图等 \\end{cases} \\ 规则 \\ 公共机制\\begin{cases} 规格说明 \\ 修饰 \\ 通用划分 \\扩展机制 \\end{cases} \\end{cases}$</p><p>下面依据概念模型中的这三大类进行一一讲解。</p><h1 id="三、uml-的基本构造块" tabindex="-1">三、UML 的基本构造块 <a class="header-anchor" href="#三、uml-的基本构造块" aria-label="Permalink to &quot;三、UML 的基本构造块&quot;">​</a></h1><p>在 UML 中可以将词汇划分为 3 中构造块，即 3 类词汇或基本元素：事物、关系和图。</p><h2 id="_1、uml-中的事物" tabindex="-1">1、UML 中的事物 <a class="header-anchor" href="#_1、uml-中的事物" aria-label="Permalink to &quot;1、UML 中的事物&quot;">​</a></h2><h3 id="_1-uml-中的四种事物" tabindex="-1">（1）UML 中的四种事物 <a class="header-anchor" href="#_1-uml-中的四种事物" aria-label="Permalink to &quot;（1）UML 中的四种事物&quot;">​</a></h3><p>事物是对模型中最具有代表性的成分的抽象，可分为<strong>结构事物</strong>、<strong>行为事物</strong>、<strong>分组事物</strong>和<strong>注释事物</strong>。</p><p><strong>1）结构事物</strong></p><p>通常是模型的静态部分，描述概念的物理元素。<strong>主要有以下五种结构事物：</strong></p><ul><li>类 <code>(class)</code> ：与面向对象方法中类的概念一致。</li><li>接口 <code>(interface)</code> ：描述了一个类或构件的一个服务的操作集。</li><li>用例 <code>(use case)</code> ：代表了一个系统功能，是对一组动作序列的描述，系统执行这些动作将产生一个对特定的参与者（即系统用户）有价值而且可观察的结果。</li><li>构件 <code>(component)</code> ：描述的是系统中的软件物理事物。</li><li>节点 <code>(node)</code> ：是在运行时存在的物理元素，表示了一种可计算的资源。</li></ul><p><strong>2）行为事物</strong></p><p>行为事物主要有：状态、交互。</p><p><strong>3）分组事物</strong></p><p>分组事物主要有：包。</p><p><strong>4）注释事物</strong></p><p>注释事物主要有：注解。</p><h3 id="_2-uml-中各种事物的图示法" tabindex="-1">（2）UML 中各种事物的图示法 <a class="header-anchor" href="#_2-uml-中各种事物的图示法" aria-label="Permalink to &quot;（2）UML 中各种事物的图示法&quot;">​</a></h3><p>依据上面对四种事物的描述，下面给出 UML 中各种事物的图示。</p><p><img src="https://img-blog.csdnimg.cn/20210529201854231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="UML中各种事物的图示法"></p><h2 id="_2、uml-中的四种关系" tabindex="-1">2、UML 中的四种关系 <a class="header-anchor" href="#_2、uml-中的四种关系" aria-label="Permalink to &quot;2、UML 中的四种关系&quot;">​</a></h2><p>UML 中的四种关系是：依赖、关联、泛化、实现。</p><h3 id="_1-依赖" tabindex="-1">（1）依赖 <a class="header-anchor" href="#_1-依赖" aria-label="Permalink to &quot;（1）依赖&quot;">​</a></h3><p>两个模型元素中，有一个是独立的，一个是非独立的，<strong>独立的模型元素</strong>发生改变，会影响<strong>非独立的模型元素</strong>。</p><p>用带箭头的虚线来表示依赖关系。</p><p><strong>如图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210529202027243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="依赖关系"></p><h3 id="_2-关联" tabindex="-1">（2）关联 <a class="header-anchor" href="#_2-关联" aria-label="Permalink to &quot;（2）关联&quot;">​</a></h3><p>关联是一种<strong>结构化</strong>的关系，指两个模型元素<strong>有联系</strong>。双向关联用<strong>一条实线</strong>来表示。</p><p>注意：关联关系有多重度，主要有： <code>0</code> 、 <code>1</code> 、 <code>0..1</code> 、 <code>0..*</code> 、 <code>1..*</code> 。</p><p><strong>如图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210529202037203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="关联关系"></p><p>值得注意的是，关联中有两种特殊的关联关系：<strong>组合和聚合</strong>。</p><p>如果是组合和聚合类型，则再加一个<strong>棱形符号</strong>。</p><p><strong>如下图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210529202050121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="组合"><img src="https://img-blog.csdnimg.cn/20210529202056723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="聚合"></p><h3 id="_3-泛化" tabindex="-1">（3）泛化 <a class="header-anchor" href="#_3-泛化" aria-label="Permalink to &quot;（3）泛化&quot;">​</a></h3><p>是<strong>一般</strong>与<strong>特殊</strong>的关系，也就是<strong>继承</strong>的关系。用<strong>实线加空心三角号</strong>来表示。</p><p><strong>如图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210529202110142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="泛化关系"></p><h3 id="_4-实现" tabindex="-1">（4）实现 <a class="header-anchor" href="#_4-实现" aria-label="Permalink to &quot;（4）实现&quot;">​</a></h3><p>实现关系是，一种模型元素保证另外一种模型元素的执行，该关系主要用在<strong>接口</strong>中。用<strong>一条实线</strong>来表示。</p><p><strong>如图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210529202121870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="实现关系"></p><p>讲到这里，以下再给出一张完整的图来回顾这四种关系。</p><p><img src="https://img-blog.csdnimg.cn/20210529202131866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="四种关系"></p><h2 id="_3、uml-中的图形-五大类十种图" tabindex="-1">3、UML 中的图形（五大类十种图） <a class="header-anchor" href="#_3、uml-中的图形-五大类十种图" aria-label="Permalink to &quot;3、UML 中的图形（五大类十种图）&quot;">​</a></h2><h3 id="_1-用例图" tabindex="-1">（1）用例图 <a class="header-anchor" href="#_1-用例图" aria-label="Permalink to &quot;（1）用例图&quot;">​</a></h3><p><strong>1）用例图的定义</strong></p><p>用例图从<strong>用户角度</strong>描述系统功能，并指出各功能的操作者。</p><p>用例图显示<strong>若干角色</strong>或<strong>执行者</strong> <code>(actor)</code> 以及这些角色与系统提供的用例之间的连接关系。用例图定义的是<strong>系统的功能需求</strong>。</p><p><strong>2）用例图的基本构成</strong></p><ul><li>用例；</li><li>角色；</li><li>角色之间的关系（如果有，主要是泛化）；</li><li>角色和用例之间的关系（单向关联或双向关联）；</li><li>用例和用例之间的关系（包含、扩展、泛化）。</li></ul><p><strong>3）元素与元素之间的关系</strong></p><p><strong>include：</strong></p><ul><li>include（包含关系），当两个或多个用例中共用一组相同的动作，可以将其抽出来作为一个<strong>独立的子用例</strong>，供多个基用例所共享。</li><li>基用例<strong>并非一个完整的用例</strong>，所以必须和子用例<strong>一起使用</strong>才够完整。</li><li>include 关系在用例图中使用<strong>带箭头的虚线</strong>表示(在线上标注 <code>&lt;&lt;include&gt;&gt;</code> )，箭头从<strong>基用例指向子用例</strong>。</li></ul><p><strong>extend：</strong></p><ul><li>extend（扩展关系），对基用例的<strong>扩展</strong>，基用例是一个<strong>完整的</strong>用例，即使没有子用例的参与，也可以完成一个完整的功能。</li><li>extend 的基用例中将存在一个扩展点，只有当<strong>扩展点被激活</strong>时，子用例才会被执行。</li><li>extend 关系在用例图中使用带箭头的虚线表示（在线上标注 <code>&lt;&lt;extend&gt;&gt;</code> ），箭头从<strong>子用例指向基用例</strong>。</li></ul><p><strong>子用例和基用例的关系：</strong></p><p>（泛化关系）子用例将<strong>继承</strong>父用例的所有结构、行为和关系。也就是说在任何使用基用例的地方都可以用子用例来代替。</p><p>（泛化关系）在用例图中使用<strong>空心的箭头</strong>表示，箭头方向从<strong>子用例指向基用例</strong>。</p><p><strong>4）图示</strong></p><p><img src="https://img-blog.csdnimg.cn/20210529202151247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="用例图"></p><h3 id="_2-静态图-类图、对象图、包图" tabindex="-1">（2）静态图：类图、对象图、包图 <a class="header-anchor" href="#_2-静态图-类图、对象图、包图" aria-label="Permalink to &quot;（2）静态图：类图、对象图、包图&quot;">​</a></h3><p><strong>1）类图</strong></p><p><strong>① 定义：</strong> 类图(class diagram)描述系统所有涉及到的类以及类和类之间的关系。</p><p><strong>② 类图的基本构成：</strong></p><ul><li>类（类名、属性和方法）；</li><li>类和类之间的关系（依赖、关联、泛化、实现）。</li></ul><p><strong>2）对象图</strong></p><p><strong>① 定义：</strong> 对象图是类图的<strong>实例</strong>，几乎使用与类图完全相同的标识，但两者之间又有一定的差别，如下图例所示。</p><p><strong>② 图例：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210529202203833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="对象图"></p><h3 id="_3-行为图-状态图、活动图" tabindex="-1">（3）行为图：状态图、活动图 <a class="header-anchor" href="#_3-行为图-状态图、活动图" aria-label="Permalink to &quot;（3）行为图：状态图、活动图&quot;">​</a></h3><p><strong>1）状态图</strong></p><p><strong>① 定义：</strong> 状态图(state chart diagram)描述系统涉及到的某个对象的所有状态以及状态和状态之间转换的事件。</p><p><strong>② 状态图的基本构成：</strong></p><ul><li>状态（圆角矩形）；</li><li>状态的起点、终点；</li><li>状态之间转换的事件；</li><li>注解（有时会有）。</li></ul><p><strong>③ 图例：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210529202213207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="状态图"></p><p><strong>2）活动图</strong></p><p><strong>① 定义：</strong> 活动图(activity diagram)描述满足用例功能需求所要进行的活动以及活动间的约束关系。</p><p><strong>② 活动图的基本构成：</strong></p><ul><li>活动（注意符号与状态不同）；</li><li>活动的起点、终点（终点有时有多个）；</li><li>活动之间用箭头连接；</li><li>判定（有时会有，棱型框）；</li><li>同步条（表示活动的分叉或汇合，包括水平、垂直两种）；</li><li>泳道（表示活动的不同职责）。</li></ul><p><strong>③ 图例：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210529202226568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="活动图"></p><h3 id="_4-交互图-顺序图、协作图" tabindex="-1">（4）交互图：顺序图、协作图 <a class="header-anchor" href="#_4-交互图-顺序图、协作图" aria-label="Permalink to &quot;（4）交互图：顺序图、协作图&quot;">​</a></h3><p><strong>1）顺序图</strong></p><p><strong>① 定义：</strong> 顺序图显示对象之间的动态合作关系。。</p><p><strong>② 顺序图的基本构成：</strong></p><ul><li>对象；</li><li>生命线（对象正下方的虚线，表示对象在一段时期内的存在） ；</li><li>窄矩形条（表示对象被激活，说明对象正在执行某种操作）；</li><li>交互的消息（有顺序之分，消息其实就是接收对象的操作方法）；</li><li>注解（有时会有）；</li><li>可以转换成协作图。</li></ul><p><strong>③ 图例：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210529202235835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="顺序图"></p><p><strong>2）协作图</strong></p><p><strong>① 定义：</strong> 协作图(callobaration diagram)和顺序图的作用一样，反映的也是<strong>动态协作</strong>。</p><p><strong>② 协作图的基本构成：</strong></p><ul><li>对象；</li><li>实线（对象之间的连接线，注意没有箭头） ;</li><li>交互的消息（有顺序之分，消息其实就是接收对象的操作方法）；</li><li>注解（有时会有）；</li><li>可以转换成顺序图。</li></ul><p><strong>③ 图例：</strong></p><p><img src="https://img-blog.csdnimg.cn/2021052920224535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="协作图"></p><h3 id="_5-实现图-构建图、部署图" tabindex="-1">（5）实现图：构建图、部署图 <a class="header-anchor" href="#_5-实现图-构建图、部署图" aria-label="Permalink to &quot;（5）实现图：构建图、部署图&quot;">​</a></h3><p><strong>1）构件图</strong></p><p>**① 定义：**描述代码构件的物理结构以及各构件之间的依赖关系。</p><p><strong>② 构件图的基本构成：</strong> 构件。</p><p><strong>③ 图例：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210529203719513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="构件图"></p><p><strong>2）部署图</strong></p><p><strong>① 定义：</strong> 系统中硬件的物理体系结构。</p><p><strong>② 部署图的基本构成：</strong></p><ul><li>三维立方体表示部件；</li><li>节点名称位于立方体上部。</li></ul><p><strong>③ 图例：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210529203733675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="部署图"></p><h1 id="四、写在最后" tabindex="-1">四、写在最后 <a class="header-anchor" href="#四、写在最后" aria-label="Permalink to &quot;四、写在最后&quot;">​</a></h1><p>到这里，关于软件工程的体系知识就讲解结束啦！后面将会继续更新一些实践的内容。敬请期待！</p><p>如有需要了解软件工程相关的其他内容，可到『<a href="https://blog.csdn.net/weixin_44803753/category_10895589.html?spm=1001.2014.3001.5482" target="_blank" rel="noreferrer">软件工程</a>』栏目进行查看学习~</p><p>🙋🙋🙋</p><p>同时，有不理解或有误的地方也欢迎评论区评论或私信我交流~</p><blockquote><ul><li>关注公众号 <strong>星期一研究室</strong> ，不定期分享学习干货，学习路上不迷路~</li><li>如果这篇文章对你有用，记得<strong>点个赞加个关注</strong>再走哦~</li></ul></blockquote>',124),n=[s];function a(i,g,p,c,d,_){return e(),l("div",null,n)}const u=t(r,[["render",a]]);export{h as __pageData,u as default};
