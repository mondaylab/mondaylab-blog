import{_ as s,c as n,o as a,N as l}from"./chunks/framework.6510d215.js";const g=JSON.parse('{"title":"JS中的依赖注入 — 在测试中未使用过的最佳工具","description":"","frontmatter":{"title":"JS中的依赖注入 — 在测试中未使用过的最佳工具","author":"周一","date":"2021-11-13","categories":["前端开发"],"tags":["掘金翻译计划"],"sidebar":"auto"},"headers":[{"level":1,"title":"JS 中的依赖项注入 — 在测试中未使用过的最佳工具","slug":"js-中的依赖项注入-—-在测试中未使用过的最佳工具","link":"#js-中的依赖项注入-—-在测试中未使用过的最佳工具","children":[]},{"level":1,"title":"引言","slug":"引言","link":"#引言","children":[]},{"level":1,"title":"part1：确切存在的问题是什么呢？","slug":"part1-确切存在的问题是什么呢","link":"#part1-确切存在的问题是什么呢","children":[]},{"level":1,"title":"part2：模式","slug":"part2-模式","link":"#part2-模式","children":[]},{"level":1,"title":"part3：为什么要引入依赖项注入呢？","slug":"part3-为什么要引入依赖项注入呢","link":"#part3-为什么要引入依赖项注入呢","children":[]},{"level":1,"title":"part4：在 JS 中如何去执行依赖项注入呢？","slug":"part4-在-js-中如何去执行依赖项注入呢","link":"#part4-在-js-中如何去执行依赖项注入呢","children":[{"level":2,"title":"1️⃣ 最佳情况：在编写代码的同时边做测试","slug":"_1️⃣-最佳情况-在编写代码的同时边做测试","link":"#_1️⃣-最佳情况-在编写代码的同时边做测试","children":[]},{"level":2,"title":"2️⃣ 不理想情况：正在测试已经编写完成的代码并且无法更改它","slug":"_2️⃣-不理想情况-正在测试已经编写完成的代码并且无法更改它","link":"#_2️⃣-不理想情况-正在测试已经编写完成的代码并且无法更改它","children":[]}]},{"level":1,"title":"结束语","slug":"结束语","link":"#结束语","children":[]}],"relativePath":"column/FrontEnd/Translation/001.md","lastUpdated":1685151998000}'),o={name:"column/FrontEnd/Translation/001.md"},p=l(`<blockquote><ul><li>原文地址：<a href="https://blog.bitsrc.io/dependency-injection-in-javascript-the-best-tool-youre-not-using-for-your-tests-4e83aca7579f" target="_blank" rel="noreferrer">Dependency Injection in JavaScript — the Best Tool You’re Not Using for your Tests</a></li><li>原文作者：Fernando Doglio</li><li>译文出自：<a href="https://juejin.cn/translate" target="_blank" rel="noreferrer">掘金翻译计划</a></li></ul></blockquote><h1 id="js-中的依赖项注入-—-在测试中未使用过的最佳工具" tabindex="-1">JS 中的依赖项注入 — 在测试中未使用过的最佳工具 <a class="header-anchor" href="#js-中的依赖项注入-—-在测试中未使用过的最佳工具" aria-label="Permalink to &quot;JS 中的依赖项注入 — 在测试中未使用过的最佳工具&quot;">​</a></h1><blockquote><p>让我来为大家介绍在测试中最好的朋友。</p></blockquote><h1 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h1><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270718335.jpeg" alt="1_qnpc_WjjW0E60zbOTIAdXw.jpeg"></p><p>代码中的依赖项可以是任何内容，从一个用于<strong>执行验证的第三方库</strong>，到用于<strong>保存所有数据的数据库</strong>。</p><p><strong>依赖项</strong>是我们日常开发任务中的一部分，但是当我们<strong>写单元测试</strong>时，我们总会趋向于忘记，依赖项不是测试中一部分。因此，取而代之的是，往往我们很容易<strong>在没有意识到情况下</strong>，编写了依赖于<strong>这些依赖项</strong>的测试。这听起来似乎有点恐怖。 <strong>为什么呢？</strong> 因为基于以上这种情况，你就不得不检查（在这种情况下产生的）错误结果，同时，还要建立一个<strong>相对好的基础设施</strong>来获取运行后的测试结果。</p><p>上述所说的还不是单元测试的全部内容，在本文中，将向你展示，遇到上述所说的情况时，如何去修复它。</p><blockquote><p><strong>小知识补充：</strong></p><p><code>negative</code> 在这里做<strong>名词</strong>，表示 <strong>（否定的）结果</strong> 。</p></blockquote><h1 id="part1-确切存在的问题是什么呢" tabindex="-1">part1：确切存在的问题是什么呢？ <a class="header-anchor" href="#part1-确切存在的问题是什么呢" aria-label="Permalink to &quot;part1：确切存在的问题是什么呢？&quot;">​</a></h1><p>接下来让我们快速地深入到这个问题：为什么我会说你正在<strong>不正确地</strong>写着单元测试代码呢？</p><p>当我们学习单元测试的时候，我们会被告知<strong>单元测试</strong>是用来验证围绕着<strong>代码单元</strong>的逻辑测试。 <strong>“单元”</strong> 这个词的定义因文献而异，但从本质上来讲，<strong>单元</strong>指的是逻辑中最小的可测试部分。因为已经是最小的可测试部分，那么这也就确保了你<strong>不会进行逐行测试</strong>，同时<strong>也不会去测试一个完整的函数</strong>，尤其是<strong>当同一时间要去处理多个事务时</strong>，更不会去进行逐行测试或者去测试一个完整的函数。</p><p>下面，我们尝试着用几个例子来说明 <strong>“单元”</strong> 这个概念是<strong>不固定的</strong>。然而，在实际的开发中，几乎没有人展示过<strong>以下这两种测试：</strong></p><ul><li>① 处理<strong>将数据写进数据库</strong>的测试；</li><li>② 处理<strong>从磁盘中去读取配置文件</strong>的测试。</li></ul><p>接下来我们来分析，为什么这两种测试会经常被开发者忽略掉呢？</p><p>我们在测试中引入的任何与 <code>I/O</code> 有关的活动，无论是有意地还是无意地，这些活动都会迫使你所编写的测试去依赖于当前<strong>正在交互的服务</strong>。当然，在这里，这些<strong>I/O 活动</strong>我指的是<strong>数据库或者硬盘</strong>。但它同样也可以是<strong>任何其他东西</strong>，比如外部 <code>API</code> 。</p><p>因为我们在测试的时候有可能是在无意中引入，因此，如果是在运行测试时<strong>磁盘出现故障</strong>，会发生什么情况呢？在这个时候，你的代码将无法读取到<strong>代码所对应的文件</strong>，这个时候我们可能会想，这算是<strong>代码逻辑错误</strong>吗？因为通常情况下，代码逻辑错误就是单元测试中失败的原因。但事实上你想错了，这不是代码逻辑错误的问题，而是因为<strong>服务有问题</strong>而导致的单元测试失败。</p><p>这个时候你可能会想，服务有问题跟我的单元测试沾上关系嘞？</p><p>事实上，<strong>检查外部服务的稳定性</strong>不是单元测试的责任，而是<strong>集成测试的目的</strong>。你必须确保的是，<strong>单元测试只关注你的代码问题</strong>，因此，你可以通过<strong>依赖项注入</strong>的方式，来让单元测试做到这一点。</p><blockquote><p><strong>小知识补充：</strong></p><p>[1] : meant 在这里做非谓语成份，be meant to do sth 译为 按照道理，按照规矩的去做某事</p><p>[2] : refer to 谈及，提到</p><p>[3] : line-by-line adj. 逐行的</p><p>[4] : thing 在日常生活中常译为<strong>事情</strong>，而在程序中，我们把它译为<strong>事务</strong></p></blockquote><h1 id="part2-模式" tabindex="-1">part2：模式 <a class="header-anchor" href="#part2-模式" aria-label="Permalink to &quot;part2：模式&quot;">​</a></h1><p>那么，如何通过<strong>依赖项注入</strong>的方式，让单元测试<strong>只关注你的代码问题</strong>呢？</p><p>模式也很简单，依赖项注入就是让你能够<strong>以某种方式</strong>去覆盖<strong>一段代码</strong>（这段代码也称为<u>客户端</u>）中<strong>所具有的依赖项</strong>（这些依赖项也称为<u>服务端</u>）。因此，如果你正准备对一个<strong>已经写进数据库的函数</strong>进行操作，那么你必须以某种方式去<strong>覆盖 DB 驱动程序</strong>。如果你正准备去处理一个<strong>需要调用外部 API 的函数</strong>，那么你将会覆盖到一个<strong>即将执行 HTTP 请求的库</strong>，依次类推。</p><p>现在，相信大家已经感受到这个模式的美妙之处了。那依据以上这种模式，我们该如何去实现依赖项注入呢？</p><p>如果你是从<strong>零</strong>开始，或者更好的情况下是，你有使用过测试驱动开发 <code>TDD</code> ，那么最简单的方法是先考虑用 <code>TDD</code> ，<code>TDD</code> 能够为你<strong>从模块中导出的每一个方法和函数</strong>提供一个简单的<strong>覆盖参数</strong>。这样，即使你<strong>在没有进行测试的时候</strong>，就会先有一个<strong>默认行为</strong>（这个默认行为可以理解为前面所说的<strong>覆盖参数</strong>）。从而等到你<strong>在进行测试时</strong>，就有一个<strong>覆盖开关</strong>可以进行操作。</p><p>从另一方面来说，如果你测试的代码没有事先考虑到上面所说的<strong>测试驱动开发</strong> （这是最常见的场景），那也问题不大。接下来，你将能够在 <code>JS</code> 中找到实现<strong>依赖项注入</strong>的不同方法。</p><blockquote><p><strong>小知识补充：</strong></p><p>[1] : TDD，即 Test-Driven Development 测试驱动开发</p></blockquote><h1 id="part3-为什么要引入依赖项注入呢" tabindex="-1">part3：为什么要引入依赖项注入呢？ <a class="header-anchor" href="#part3-为什么要引入依赖项注入呢" aria-label="Permalink to &quot;part3：为什么要引入依赖项注入呢？&quot;">​</a></h1><p>现在，我们来谈论<strong>为什么要引入依赖项注入</strong>这个问题。</p><p>这是一个很好的问题，我想我在本文的引言中，围绕着这个问题的答案绕了一大圈。现在应该能够得到很明确的答案了 👇：</p><ul><li>如果你在单元测试中没有使用依赖项注入，那么你正在错误地做着单元测试。</li></ul><p>这听起来似乎有点奇怪，让我们来看看为什么会这样子。<strong>具体如下：</strong></p><ul><li>你不想依赖于存在有<strong>潜在地无法控制的外部服务</strong>来了解<u>程序的逻辑是否是稳定的</u>。</li><li>没有依赖项注入，你就没有办法去完全控制到<strong>这些外部服务是如何响应的</strong>，从而增加了测试行为的不确定性。</li><li>如果这些外部服务出现延迟，那么 它们将直接影响测试的性能。当然，如果只跑<strong>10 个</strong>测试，那可能没啥问题。但是呢，如果你在一个大的系统上工作，即使影响不到 1000 个测试，也会影响到 100 个测试。而且，<strong>运行测试</strong>通常是任何 <code>CI/CD</code> 管道的第一步，如果外部服务出现延迟，这也将会影响到<strong>所部署项目的性能</strong>。</li></ul><p>说到这里，相信你已经可以自己提出一些其他的潜在问题了。这里值得注意的要点是，外部服务会<strong>降低测试的稳定性</strong>，而测试的稳定性应该是一直 <code>100%</code> 的情况才是。我们可以<strong>将测试视为幂等元</strong>，对于相同受控环境下的每一次执行，结果应该是相同的。这就像有一个<strong>使用了全局变量的函数</strong>，除非主动去控制该变量，否则是无法真正判断函数的输出结果是否总是相同的。</p><p>同样地，在这里，你无法去控制外部服务，因此，就需要去考虑在这种错误结果下<strong>会产生的副作用</strong>。这也就是<strong>为什么要使用依赖项注入</strong>的原因。</p><h1 id="part4-在-js-中如何去执行依赖项注入呢" tabindex="-1">part4：在 JS 中如何去执行依赖项注入呢？ <a class="header-anchor" href="#part4-在-js-中如何去执行依赖项注入呢" aria-label="Permalink to &quot;part4：在 JS 中如何去执行依赖项注入呢？&quot;">​</a></h1><p>多亏了 <code>JS</code> 这门动态语言，使得这变得相当简单。</p><p>正如我下面所提及到的，有很多种方法可以去做这件事情。它们将依据<strong>具体的情况</strong>去进行相应的操作。</p><h2 id="_1️⃣-最佳情况-在编写代码的同时边做测试" tabindex="-1">1️⃣ 最佳情况：在编写代码的同时边做测试 <a class="header-anchor" href="#_1️⃣-最佳情况-在编写代码的同时边做测试" aria-label="Permalink to &quot;1️⃣ 最佳情况：在编写代码的同时边做测试&quot;">​</a></h2><p>在这种情况下，可以先简单地进行一些操作。<strong>如下代码所示：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">connect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dbdriver</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">saveData</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">q</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> query</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">con</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> connect </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    Call &#39;q&#39; to execute the db query</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    Call &#39;con&#39; to connect to the database</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">con</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">strQuery</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">insert into mydatabase.mytable (data) value (&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">q</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">strQuery</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      error</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      msg</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">There was a problem saving your data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>在以上代码中，我们在 <code>saveData</code> 函数中声明了依赖项作为<strong>最后的参数</strong>，也就是 <code>{ q = query, con = connect } = {}</code> 。在这句代码中，值得注意的是，我正在使用<strong>解构语法</strong>将潜在性存在的覆盖内容给分组到一个<strong>单一对象</strong>中。同时，在下面的代码中，大家可以发现到，不论它们被定义在何处，我始终引用着 <code>q</code> 和 <code>con</code> 。</p><p>在正常执行时，我只需要使用第一个参数，也就是 <code>q</code> ，来调用 <code>saveData</code> 函数。同时， <code>q</code> 调用的其他参数将默认为是从<strong>数据库驱动程序包</strong>中导入的参数，也就是上面代码中的 <code>strQuery</code> 。</p><p>如果我现在在测试上面这个函数，那么我会这么处理。<strong>具体代码如下：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">describe</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 当数据到保存到数据库时，应该返回一个true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">it</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">should return true if the data is saved into the database</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;font-style:italic;">// 此处的 saveData 是全局 require 形式</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">saveData</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hi there!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 查询成功</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">q</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 连接成功</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">con</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">should</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">be</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>注意看下我是<strong>如何重写这两种依赖</strong>的。我<strong>不再连接数据库</strong>，同时，也很明确地表示<strong>不会再给数据库发送一个查询</strong>。</p><p>相反，如果是数据没有被成功被保存到数据库的情况下，结果也总是成功的。用这种方法，代码可以这么写。<strong>如下所示：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 当数据库没有被保存到数据库时，应该返回一个error对象</span></span>
<span class="line"><span style="color:#82AAFF;">it</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">should return an error object if the data is not saved into the database</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">saveData</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hi there!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 查询失败</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">q</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 连接成功</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">con</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">should</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equal</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    error</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    msg</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">There was a problem saving your data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>大家看上面这段代码，这次，我将 <code>query</code> 函数总是返回一个 <code>false</code> 的结果，用这种方法，我就可以很安全地测试到函数中的<strong>备用逻辑路径</strong>。</p><p>这样，我就不再需要<u>数据库</u><strong>一直处于活动状态并在任何时候运行</strong>，至此，测试将毫不延迟地得到运行。</p><blockquote><p><strong>小知识补充：</strong></p><p>[1] : declare …… as …… 声明 … 为 …</p><p>[2] : group sth 这里的 group 是动词，表示将什么进行分组</p><p>[3] : no matter where … 无论…</p></blockquote><h2 id="_2️⃣-不理想情况-正在测试已经编写完成的代码并且无法更改它" tabindex="-1">2️⃣ 不理想情况：正在测试已经编写完成的代码并且无法更改它 <a class="header-anchor" href="#_2️⃣-不理想情况-正在测试已经编写完成的代码并且无法更改它" aria-label="Permalink to &quot;2️⃣ 不理想情况：正在测试已经编写完成的代码并且无法更改它&quot;">​</a></h2><p>从另一个方面来说，如果你的任务是将测试添加到一大块已经编写完成的代码中，并且出于某些奇怪的要求，你又不能将它修改成像上面例子所呈现的。那么，这个时候我们就需要找到<strong>更具有创造性的方法</strong>来解决这个问题。</p><p>举个例子，假设你正在写 <code>Node.js</code> 的代码，那么你可以使用类似于 <a href="https://www.npmjs.com/package/proxyquire" target="_blank" rel="noreferrer">proxyquire</a> 的东西， <code>proxyquire</code> 允许你<strong>在不影响代码的情况下</strong>替换正在测试的文件中所需的依赖项。比如，假设我们现在有这么一段代码，<strong>具体如下：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">connect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dbdriver</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">saveData</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">connect</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">strQuery</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">insert into mydatabase.mytable (data) value (&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">query</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">strQuery</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      error</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      msg</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">There was a problem saving your data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>在上面的这段代码中，想要从外部重写 <code>dbdriver</code> 模块并不容易，但是，如果使用了 <code>proxyquire</code> ，我们就可以在测试的内部去执行这样的操作。<strong>具体代码如下：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">describe</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 如果数据被成功保存到数据库中，应该返回一个true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">it</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">should return true if the data is saved into the database</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">saveData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">proxyquire</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./saveData.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dbdriver</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 查询成功</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">q</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 连接成功</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">con</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">saveData</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hi there!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">should</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">be</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>现在，大家可以看到，我们将在测试用例中导入 <code>saveData</code> 函数，而不再使用一个全局的 <code>require</code> 。同时，我们还将使用一个<strong>自定义返回的对象</strong>，来覆盖 <code>dbdriver</code> 在文件中的中 <code>require</code> 调用。从根本意义上来说，我们没有更改到原始代码，但是这个版本的 <code>saveData</code> 将使用我们残留下来的驱动程序，而不是原来的驱动程序。</p><p>在上面的例子中，如果你使用的是 <code>browsify</code> ，那么有一个 <code>proxyquire</code> 的版本你可以使用它。<a href="https://github.com/thlorenz/proxyquireify" target="_blank" rel="noreferrer">点击这里进行查看</a>。</p><p>当然，还有另外一种情况是，如果你是在 <code>TypeScript</code> 中使用，那么可以访问这两个网址：<strong>①</strong> <a href="https://inversify.io/" target="_blank" rel="noreferrer">https://inversify.io/</a>；<strong>②</strong> <a href="https://github.com/typestack/typedi" target="_blank" rel="noreferrer">https://github.com/typestack/typedi</a> 。使用起来肯定没有那么简单，但这两个网址提供了一个极度兼容 <code>TypeScript</code> 的 <code>API</code> 。</p><blockquote><p><strong>小知识补充：</strong></p><p>[1] : override (sth1) with (sth2) 用 sth2 覆盖 sth1</p><p>[2] : stub 作名词时表示残余部分，+ed 后为 stubbed，当形容词使用，表示残留的。</p><p>[3] : browsify 是一个 npm 包</p></blockquote><h1 id="结束语" tabindex="-1">结束语 <a class="header-anchor" href="#结束语" aria-label="Permalink to &quot;结束语&quot;">​</a></h1><p>依赖项注入是一个非常好用的工具，它被许多开发人员严重忽视，尤其是在单元测试的时候。不可否认的是，它会在帮助我们编写可扩展且可靠的代码时创造一些奇迹。因此，这非常值得我们去尝试。</p><p><code>JavaScript</code> 中动态的类型和行为是值得我们去做更多尝试的理想选择。所以，多去留意 <code>JS</code> 中的动态美！</p><p>在 <code>JavaScript</code> 中你最喜欢的 <code>DI</code> 库是什么呢？最重要的一点是，你是考虑使用 <code>DI</code> 库进行编码（不理想情况），还是考虑在编写测试代码的时候去构建 <code>DI</code> 呢（最佳情况）？（这句话中的所有 <code>DI</code> 都翻译为<strong>依赖项注入</strong>）</p><blockquote><p><strong>小知识补充：</strong></p><p>[1] : dipping your toes into the DI waters 柯林斯词典中将其译为 <strong>稍加尝试/谨慎尝试</strong></p><p>[2] : 第一部分的 DI water 表示去离子水，第二部分的 DI 是依赖项注入的<strong>缩写</strong></p></blockquote>`,66),e=[p];function t(r,c,F,y,D,i){return a(),n("div",null,e)}const b=s(o,[["render",t]]);export{g as __pageData,b as default};
