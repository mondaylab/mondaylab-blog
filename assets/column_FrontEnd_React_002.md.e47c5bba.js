import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.98c15f2e.js";const u=JSON.parse('{"title":"react只停留在表层？五大知识点带你梳理进阶知识","description":"","frontmatter":{"title":"react只停留在表层？五大知识点带你梳理进阶知识","author":"周一","date":"2021-10-19","categories":["前端开发"],"tags":["React.js"],"sidebar":"auto"},"headers":[{"level":1,"title":"✉️ 前言","slug":"✉️-前言","link":"#✉️-前言","children":[]},{"level":1,"title":"📧 一、props","slug":"📧-一、props","link":"#📧-一、props","children":[{"level":2,"title":"1、PropTypes 与 DefaultProps 应用","slug":"_1、proptypes-与-defaultprops-应用","link":"#_1、proptypes-与-defaultprops-应用","children":[{"level":3,"title":"（1）PropTypes","slug":"_1-proptypes","link":"#_1-proptypes","children":[]},{"level":3,"title":"（2）defaultProps","slug":"_2-defaultprops","link":"#_2-defaultprops","children":[]}]},{"level":2,"title":"2、props，state 与 render 函数","slug":"_2、props-state-与-render-函数","link":"#_2、props-state-与-render-函数","children":[]}]},{"level":1,"title":"📨 二、React 中的虚拟 DOM","slug":"📨-二、react-中的虚拟-dom","link":"#📨-二、react-中的虚拟-dom","children":[{"level":2,"title":"1、什么是虚拟 DOM","slug":"_1、什么是虚拟-dom","link":"#_1、什么是虚拟-dom","children":[{"level":3,"title":"（1）第一种方案","slug":"_1-第一种方案","link":"#_1-第一种方案","children":[]},{"level":3,"title":"（2）第二种方案","slug":"_2-第二种方案","link":"#_2-第二种方案","children":[]},{"level":3,"title":"（3）第三种方案","slug":"_3-第三种方案","link":"#_3-第三种方案","children":[]}]},{"level":2,"title":"2、虚拟 DOM 中的 Diff 算法","slug":"_2、虚拟-dom-中的-diff-算法","link":"#_2、虚拟-dom-中的-diff-算法","children":[]}]},{"level":1,"title":"📩 三、React 中 ref 的使用","slug":"📩-三、react-中-ref-的使用","link":"#📩-三、react-中-ref-的使用","children":[]},{"level":1,"title":"📦 四、React 中的生命周期","slug":"📦-四、react-中的生命周期","link":"#📦-四、react-中的生命周期","children":[{"level":2,"title":"1、生命周期函数是什么","slug":"_1、生命周期函数是什么","link":"#_1、生命周期函数是什么","children":[]},{"level":2,"title":"2、生命周期图例","slug":"_2、生命周期图例","link":"#_2、生命周期图例","children":[]}]},{"level":1,"title":"📪 五、React 中使用 CSS 动画效果","slug":"📪-五、react-中使用-css-动画效果","link":"#📪-五、react-中使用-css-动画效果","children":[{"level":2,"title":"1、普通用法","slug":"_1、普通用法","link":"#_1、普通用法","children":[]},{"level":2,"title":"2、react-transition-group","slug":"_2、react-transition-group","link":"#_2、react-transition-group","children":[{"level":3,"title":"（1）初次探索","slug":"_1-初次探索","link":"#_1-初次探索","children":[]},{"level":3,"title":"（2）进阶探索","slug":"_2-进阶探索","link":"#_2-进阶探索","children":[]}]}]},{"level":1,"title":"📮 六、结束语","slug":"📮-六、结束语","link":"#📮-六、结束语","children":[]}],"relativePath":"column/FrontEnd/React/002.md","filePath":"column/FrontEnd/React/002.md","lastUpdated":1723906346000}'),p={name:"column/FrontEnd/React/002.md"},o=l(`<h1 id="✉️-前言" tabindex="-1">✉️ 前言 <a class="header-anchor" href="#✉️-前言" aria-label="Permalink to &quot;✉️ 前言&quot;">​</a></h1><p>对于 <code>react</code> 的表层来说，我们可能经常听说的是<strong>声明式开发</strong>、<strong>单向数据流</strong>、<strong>组件化方式开发</strong>等等。那么，进一步来讲的话，我们还需要了解的是 <code>react</code> 的 <code>props</code> ，虚拟 <code>DOM</code> 、 <code>ref</code> 以及过渡动画等更多新的知识点。</p><p>那在下面的这篇文章中，将来探索关于 <code>react</code> 的进阶知识。</p><p>叮，下面开始本文的介绍~🤪</p><h1 id="📧-一、props" tabindex="-1">📧 一、props <a class="header-anchor" href="#📧-一、props" aria-label="Permalink to &quot;📧 一、props&quot;">​</a></h1><h2 id="_1、proptypes-与-defaultprops-应用" tabindex="-1">1、PropTypes 与 DefaultProps 应用 <a class="header-anchor" href="#_1、proptypes-与-defaultprops-应用" aria-label="Permalink to &quot;1、PropTypes 与 DefaultProps 应用&quot;">​</a></h2><h3 id="_1-proptypes" tabindex="-1">（1）PropTypes <a class="header-anchor" href="#_1-proptypes" aria-label="Permalink to &quot;（1）PropTypes&quot;">​</a></h3><p>在 <code>react</code> 中，有时候我们要对组件中的<strong>某个属性</strong>进行<strong>格式校验</strong>，这个时候我们就需要用到 <code>propTypes</code> 。<strong>下面给出一些常见的例子：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 表示要对TodoItem这个组件做属性的校验</span></span>
<span class="line"><span style="color:#E1E4E8;">TodoItem.propTypes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// isRequired 表示必须有值</span></span>
<span class="line"><span style="color:#E1E4E8;">  test: PropTypes.string.isRequired,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 表示content的propTypes必须是string类型，那string类型的校验是从PropTypes这个包里面拿到的</span></span>
<span class="line"><span style="color:#E1E4E8;">  content: PropTypes.string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 表示detail可以是一个number或者string的语法</span></span>
<span class="line"><span style="color:#E1E4E8;">  detail: PropTypes.</span><span style="color:#B392F0;">arrayOf</span><span style="color:#E1E4E8;">(PropTypes.number, PropTypes.string),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 表示deleteItem必须是一个函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  deleteItem: PropTypes.func,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 表示index必须是一个数字类型</span></span>
<span class="line"><span style="color:#E1E4E8;">  index: PropTypes.number,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 表示要对TodoItem这个组件做属性的校验</span></span>
<span class="line"><span style="color:#24292E;">TodoItem.propTypes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// isRequired 表示必须有值</span></span>
<span class="line"><span style="color:#24292E;">  test: PropTypes.string.isRequired,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 表示content的propTypes必须是string类型，那string类型的校验是从PropTypes这个包里面拿到的</span></span>
<span class="line"><span style="color:#24292E;">  content: PropTypes.string,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 表示detail可以是一个number或者string的语法</span></span>
<span class="line"><span style="color:#24292E;">  detail: PropTypes.</span><span style="color:#6F42C1;">arrayOf</span><span style="color:#24292E;">(PropTypes.number, PropTypes.string),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 表示deleteItem必须是一个函数</span></span>
<span class="line"><span style="color:#24292E;">  deleteItem: PropTypes.func,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 表示index必须是一个数字类型</span></span>
<span class="line"><span style="color:#24292E;">  index: PropTypes.number,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_2-defaultprops" tabindex="-1">（2）defaultProps <a class="header-anchor" href="#_2-defaultprops" aria-label="Permalink to &quot;（2）defaultProps&quot;">​</a></h3><p>有时候，对于某个属性来说，我们希望给它个初始值，那这个时候就需要用到 <code>defaultProps</code> 。<strong>示例如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TodoItem.defaultProps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  test: </span><span style="color:#9ECBFF;">&#39;hello world&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TodoItem.defaultProps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  test: </span><span style="color:#032F62;">&#39;hello world&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面的代码表明，当 <code>test</code> 属性没有被赋值时，那么它将被赋予一个初始值，值为 <code>hello world</code> 。</p><h2 id="_2、props-state-与-render-函数" tabindex="-1">2、props，state 与 render 函数 <a class="header-anchor" href="#_2、props-state-与-render-函数" aria-label="Permalink to &quot;2、props，state 与 render 函数&quot;">​</a></h2><p>在 <code>react</code> 中，定义一个组件时，经常会看到 <code>props</code> 、 <code>state</code> 和 <code>render</code> 。那他们三者是怎么样的关系呢？</p><p>首先我们要想一个问题：<strong>为什么数据发生变化，页面就会跟着变化呢？</strong></p><p>原因在于，页面是由 <code>render</code> 函数渲染出来的，当数据 <code>state</code> 发生变化时， <code>render</code> 函数就会被重新的执行一次。</p><p>同时，当<strong>父组件</strong>的 <code>render</code> 函数被运行时，它的<strong>子组件</strong>的 <code>render</code> 都将被重新运行。</p><h1 id="📨-二、react-中的虚拟-dom" tabindex="-1">📨 二、React 中的虚拟 DOM <a class="header-anchor" href="#📨-二、react-中的虚拟-dom" aria-label="Permalink to &quot;📨 二、React 中的虚拟 DOM&quot;">​</a></h1><h2 id="_1、什么是虚拟-dom" tabindex="-1">1、什么是虚拟 DOM <a class="header-anchor" href="#_1、什么是虚拟-dom" aria-label="Permalink to &quot;1、什么是虚拟 DOM&quot;">​</a></h2><h3 id="_1-第一种方案" tabindex="-1">（1）第一种方案 <a class="header-anchor" href="#_1-第一种方案" aria-label="Permalink to &quot;（1）第一种方案&quot;">​</a></h3><p><strong>传统实现虚拟 DOM 的思路：</strong></p><ul><li>先定义 <code>state</code> ，也就是数据；</li><li>编写<code>JSX</code> 模板内容；</li><li>把<strong>数据和模板</strong>进行结合，生成真是的 <code>DOM</code> ，进而将内容显示到页面上；</li><li>如果遇到要替换数据时，则把<strong>数据和模板</strong>进行结合，生成真实的 <code>DOM</code> ，来替换原始的 <code>DOM</code> 。</li></ul><p><strong>存在缺陷：</strong></p><ul><li>第一次生成了一个完整的 <code>DOM</code> 片段；</li><li>第二次又生成了一个完整的 <code>DOM</code> 片段；</li><li>第二次的 <code>DOM</code> 替换第一次的 <code>DOM</code> ，非常耗费性能。</li></ul><h3 id="_2-第二种方案" tabindex="-1">（2）第二种方案 <a class="header-anchor" href="#_2-第二种方案" aria-label="Permalink to &quot;（2）第二种方案&quot;">​</a></h3><p><strong>传统实现虚拟 DOM 的思路改进版：</strong></p><ul><li>先定义 <code>state</code> ，即数据；</li><li>编写 <code>JSX</code> 模板内容；</li><li>把<strong>数据和模板</strong>进行结合，生成真实的 <code>DOM</code> ，并展示；</li><li>当 <code>state</code> 的数据发生改变；</li><li>继续，把<strong>数据和模板</strong>进行结合，生成真实的 <code>DOM</code> ，并不是直接替换原始的 <code>DOM</code></li><li>将新的 <code>DOM</code> 和原始的 <code>DOM</code> 做比较，<strong>并找出差异</strong>；</li><li>找到新的 <code>Dom</code> 中发生的变化；</li><li>只用<strong>新</strong>的 <code>DOM</code> 中<strong>变化的数据</strong>，来替换掉<strong>老</strong>的 <code>DOM</code> 中的数据。</li></ul><p><strong>存在缺陷：</strong></p><ul><li>性能的提升并不明显</li></ul><h3 id="_3-第三种方案" tabindex="-1">（3）第三种方案 <a class="header-anchor" href="#_3-第三种方案" aria-label="Permalink to &quot;（3）第三种方案&quot;">​</a></h3><p><strong>react 中实现虚拟 DOM 的思路：</strong></p><ul><li><p>先定义 <code>state</code> ，即数据；</p></li><li><p>编写 <code>JSX</code> 模板内容；</p></li><li><p>把<strong>数据和模板</strong>进行结合，生成<strong>虚拟 <code>DOM</code></strong> （虚拟 <code>DOM</code> 就是一个 <code>JS</code> 对象，用它来描述真实 <code>DOM</code> ）。<strong>👉（损耗了性能）</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div id=</span><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">&gt;&lt;span</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">hello world</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">/span&gt;&lt;/div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, {id: </span><span style="color:#9ECBFF;">&#39;abc&#39;</span><span style="color:#E1E4E8;">}, [</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, {}, </span><span style="color:#9ECBFF;">&#39;hello world&#39;</span><span style="color:#E1E4E8;">]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div id=</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">&gt;&lt;span</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">hello world</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">/span&gt;&lt;/div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">, {id: </span><span style="color:#032F62;">&#39;abc&#39;</span><span style="color:#24292E;">}, [</span><span style="color:#032F62;">&#39;span&#39;</span><span style="color:#24292E;">, {}, </span><span style="color:#032F62;">&#39;hello world&#39;</span><span style="color:#24292E;">]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>用虚拟 <code>DOM</code> 的结构生成<strong>真实的 <code>DOM</code></strong> ，来进行显示；</p></li><li><p>当 <code>state</code> 发生变化时，<strong>数据 + 模板</strong>生成新的虚拟 <code>DOM</code> ；<strong>👉（极大的提升了性能）</strong></p></li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div id=</span><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">&gt;&lt;span</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">monday</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">/span&gt;&lt;/div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, {id: </span><span style="color:#9ECBFF;">&#39;abc&#39;</span><span style="color:#E1E4E8;">}, [</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, {}, </span><span style="color:#9ECBFF;">&#39;monday&#39;</span><span style="color:#E1E4E8;">]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div id=</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">&gt;&lt;span</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">monday</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">/span&gt;&lt;/div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">, {id: </span><span style="color:#032F62;">&#39;abc&#39;</span><span style="color:#24292E;">}, [</span><span style="color:#032F62;">&#39;span&#39;</span><span style="color:#24292E;">, {}, </span><span style="color:#032F62;">&#39;monday&#39;</span><span style="color:#24292E;">]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>比较 <strong>原始虚拟 <code>DOM</code></strong> 和 <strong>新的虚拟 <code>DOM</code></strong> 的区别，找到其中的区别是 <code>span</code> 中的内容；</li><li>直接操作 <code>DOM</code> ，改变 <code>span</code> 的内容；</li><li>因此， <code>React</code> 的虚拟 <code>DOM</code> 主要经历的过程是： <code>JSX</code> → <code>createElement</code> → 虚拟 <code>DOM</code> （ <code>JS</code> 对象 ）→ 真实的 <code>DOM</code> 。</li></ul><p><strong>react 虚拟 DOM 的优点：</strong></p><ul><li>极大的提升了性能；</li><li>它使得<strong>跨端应用</strong>得以实现，这要谈到 <code>react</code> 中的一个概念，<code>react native</code> ；</li><li><code>react</code> 使用可以编写原生应用，像 <code>Android</code> 和 <code>IOS</code> 开发，这些都是操作真实 <code>DOM</code> ；</li><li>而 <code>react</code> 使得编写这些<strong>原生应用</strong>得以使用。</li></ul><h2 id="_2、虚拟-dom-中的-diff-算法" tabindex="-1">2、虚拟 DOM 中的 Diff 算法 <a class="header-anchor" href="#_2、虚拟-dom-中的-diff-算法" aria-label="Permalink to &quot;2、虚拟 DOM 中的 Diff 算法&quot;">​</a></h2><ul><li><code>react</code> 对 <code>setState</code> 的性能优化，它会把多次 <code>setState</code> 结合成一次 <code>setState</code> ；</li><li>虚拟 <code>DOM</code> 使用 <code>diff</code> 算法做比较，<strong>只在同层做比较，不跨级做比较</strong>；</li><li>同层比对的算法比较简单，而算法简单带来的直接好处就是速度非常快；</li><li>虽然可能会造成 <code>DOM</code> 渲染上的一些浪费，但是呢，它也极大的减少了两个虚拟 <code>DOM</code> 之间进行比较时，性能上的消耗。</li></ul><h1 id="📩-三、react-中-ref-的使用" tabindex="-1">📩 三、React 中 ref 的使用 <a class="header-anchor" href="#📩-三、react-中-ref-的使用" aria-label="Permalink to &quot;📩 三、React 中 ref 的使用&quot;">​</a></h1><p><code>react</code> 中建议的是，希望我们可以用<strong>数据驱动</strong>的形式来编写代码，尽量不要操作 <code>DOM</code> 。但有时候，我们在做一些极其复杂业务的时候，比如<strong>各种震撼动画</strong>，不可避免的还是会用到一些原生的 <code>DOM</code> 标签。因此， <code>ref</code> 帮助我们在 <code>react</code> 中直接获取 <code>DOM</code> 元素的时候来进行使用。</p><p>一般情况下，我们尽量不使用 <code>ref</code> 。如果用 <code>ref</code> 时，会出现各种各样的问题。同时，当使用 <code>ref</code> 和 <code>setState</code> 时，要注意一些<strong>存在的坑</strong>。</p><p>比如，当 <code>ref</code> 与 <code>setState</code> 相关联使用时，要注意， <code>setState</code> 是一个<strong>异步函数</strong>，往往会在同步代码执行完毕后再执行异步代码。因此，如果我们希望同步代码执行顺序在 <code>setState</code> 之后时，可以<strong>在 setState 接受的第二个参数中，再增加一个回调函数来进行调用</strong>，这样就可以达到我们的效果啦！</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{(</span><span style="color:#FFAB70;">ul</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ul </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ul}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        	{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getTodoItem</span><span style="color:#E1E4E8;">()}</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">prevState</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#E1E4E8;">    list: [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">prevState.list, prevState.inputValue],</span></span>
<span class="line"><span style="color:#E1E4E8;">    inputValue: </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}), () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ul.</span><span style="color:#B392F0;">querySelectorAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">ul</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{(</span><span style="color:#E36209;">ul</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.ul </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ul}&gt;</span></span>
<span class="line"><span style="color:#24292E;">        	{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getTodoItem</span><span style="color:#24292E;">()}</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">((</span><span style="color:#E36209;">prevState</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">    list: [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">prevState.list, prevState.inputValue],</span></span>
<span class="line"><span style="color:#24292E;">    inputValue: </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">}), () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.ul.</span><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h1 id="📦-四、react-中的生命周期" tabindex="-1">📦 四、React 中的生命周期 <a class="header-anchor" href="#📦-四、react-中的生命周期" aria-label="Permalink to &quot;📦 四、React 中的生命周期&quot;">​</a></h1><h2 id="_1、生命周期函数是什么" tabindex="-1">1、生命周期函数是什么 <a class="header-anchor" href="#_1、生命周期函数是什么" aria-label="Permalink to &quot;1、生命周期函数是什么&quot;">​</a></h2><p>所谓生命周期函数，指的是在某一个时刻，组件会自动调用执行的函数。那 <code>react</code> 的生命周期都有哪一些呢？</p><table><thead><tr><th style="text-align:center;">阶段</th><th style="text-align:center;">生命周期</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>Mounting</strong></td><td style="text-align:center;">componentWillMount</td><td style="text-align:center;">① 当组件即将被挂载到页面的时刻时自动执行，即在页面挂在之前执行；② 只在组件被第一次挂在到页面上才会执行；</td></tr><tr><td style="text-align:center;"><strong>Mounting/Updation</strong></td><td style="text-align:center;">render</td><td style="text-align:center;">页面挂载时被执行</td></tr><tr><td style="text-align:center;"><strong>Mounting</strong></td><td style="text-align:center;">componentDidMount</td><td style="text-align:center;">会在组件被挂载到页面之后，自动被执行；只在组件被第一次挂在到页面上才会执行</td></tr><tr><td style="text-align:center;"><strong>Updation</strong></td><td style="text-align:center;">componentWillReceiveProps</td><td style="text-align:center;">① 当一个组件从父组件接收参数；② 只要父组件的<strong>render</strong>函数被执行了，子组件的这个生命周期函数就会被执行；③ 如果这个组件第一次存在于父组件中，不会执行；④ 如果这个组件之前已经存在于父组件中，才会被执行；</td></tr><tr><td style="text-align:center;"><strong>Updation</strong></td><td style="text-align:center;">componentWillUpdate</td><td style="text-align:center;">① 组件被更新之前，她会自动执行；② 但是它是在<strong>shouldComponentUpdate</strong>之后被执行，如果<strong>shouldComponentUpdate</strong>返回<strong>true</strong>时，它才执行；如果返回<strong>false</strong>，这个函数就不会被执行了。</td></tr><tr><td style="text-align:center;"><strong>Updation</strong></td><td style="text-align:center;">componentDidUpdate</td><td style="text-align:center;">组件更新完成之后，它会被执行。</td></tr><tr><td style="text-align:center;"><strong>Updation</strong></td><td style="text-align:center;">shouldComponentUpdate</td><td style="text-align:center;">组件被更新之前，它会被自动被执行；此生命周期返回一个<strong>布尔值</strong></td></tr><tr><td style="text-align:center;"><strong>Unmounting</strong></td><td style="text-align:center;">componentWillUnmount</td><td style="text-align:center;">当这个组件即将被从页面中剔除的时候，会被执行。</td></tr></tbody></table><h2 id="_2、生命周期图例" tabindex="-1">2、生命周期图例 <a class="header-anchor" href="#_2、生命周期图例" aria-label="Permalink to &quot;2、生命周期图例&quot;">​</a></h2><p>下面用一张图来展示 <code>react</code> 中生命周期的执行效果：</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270705335.png" alt="react生命周期
"></p><h1 id="📪-五、react-中使用-css-动画效果" tabindex="-1">📪 五、React 中使用 CSS 动画效果 <a class="header-anchor" href="#📪-五、react-中使用-css-动画效果" aria-label="Permalink to &quot;📪 五、React 中使用 CSS 动画效果&quot;">​</a></h1><h2 id="_1、普通用法" tabindex="-1">1、普通用法 <a class="header-anchor" href="#_1、普通用法" aria-label="Permalink to &quot;1、普通用法&quot;">​</a></h2><p>我们来看一下，在 <code>react</code> 中，如何使用 <code>css3</code> 所提供的动画效果。<strong>具体代码如下：</strong></p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">.show</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">animation</span><span style="color:#E1E4E8;">: show-item </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ease-in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">forwards</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.hide</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">animation</span><span style="color:#E1E4E8;">: hide-item </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">s</span><span style="color:#E1E4E8;"> wase-in </span><span style="color:#79B8FF;">forwards</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">@keyframes</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">show-item</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">0%</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">oppacity</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">50%</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">opacity</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">green</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">100%</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">opacity</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">blue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">.show</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">animation</span><span style="color:#24292E;">: show-item </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">s</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ease-in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">forwards</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">.hide</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">animation</span><span style="color:#24292E;">: hide-item </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">s</span><span style="color:#24292E;"> wase-in </span><span style="color:#005CC5;">forwards</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">@keyframes</span><span style="color:#24292E;"> </span><span style="color:#E36209;">show-item</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">0%</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">oppacity</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">red</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">50%</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">opacity</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">green</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">100%</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">opacity</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">blue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="_2、react-transition-group" tabindex="-1">2、react-transition-group <a class="header-anchor" href="#_2、react-transition-group" aria-label="Permalink to &quot;2、react-transition-group&quot;">​</a></h2><h3 id="_1-初次探索" tabindex="-1">（1）初次探索 <a class="header-anchor" href="#_1-初次探索" aria-label="Permalink to &quot;（1）初次探索&quot;">​</a></h3><p>有时候，我们可能会想要实现一些很复杂的动画，这个时候 <code>css3</code> 提供的是不够的。因此，我们还需要一点 <code>js</code> 来加以辅助实现更为复杂的动画。这个时候就有谈到 <code>react</code> 中的 <code>react-transition-group</code> 动画。</p><p>假设我们想要实现，当点击一个按钮时，一行文字渐隐渐显的实现，那该怎么处理呢？</p><p>首先，我们在项目的 <code>src</code> 文件夹下新增一个组件，命名为 <code>App.js</code> 。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React, { Component, Fragment } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { CSSTransition } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react-transition-group&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./style.css&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(props);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      show: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handleToggle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handleToggle.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">Fragment</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span><span style="color:#6A737D;">/* onEntered指的是在某一个时刻会自动执行的一个函数</span></span>
<span class="line"><span style="color:#6A737D;">            当入场动画结束时，onEntered将会被执行</span></span>
<span class="line"><span style="color:#6A737D;">        */</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#79B8FF;">CSSTransition</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">in</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.show}</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">timeout</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">classNames</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;fade&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">unmountOnExit</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">onEntered</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            el.style.color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;blue&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          }}</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">appear</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;hello&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#79B8FF;">CSSTransition</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handleToggle}&gt;toggle&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#79B8FF;">Fragment</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">handleToggle</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      show: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.show </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> App;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React, { Component, Fragment } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { CSSTransition } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-transition-group&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./style.css&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">props</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(props);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      show: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handleToggle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handleToggle.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">Fragment</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        {</span><span style="color:#6A737D;">/* onEntered指的是在某一个时刻会自动执行的一个函数</span></span>
<span class="line"><span style="color:#6A737D;">            当入场动画结束时，onEntered将会被执行</span></span>
<span class="line"><span style="color:#6A737D;">        */</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#005CC5;">CSSTransition</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">in</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.show}</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">timeout</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">classNames</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;fade&#39;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">unmountOnExit</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">onEntered</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{(</span><span style="color:#E36209;">el</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            el.style.color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;blue&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          }}</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">appear</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        &gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;hello&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#005CC5;">CSSTransition</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handleToggle}&gt;toggle&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#005CC5;">Fragment</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">handleToggle</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      show: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.show </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> App;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>之后新增一个 <code>CSS</code> 文件，命名为 <code>style.css</code> 。<strong>具体代码如下：</strong></p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* 入场动画执行的第一个时刻，即刚要入场的这个瞬间 */</span></span>
<span class="line"><span style="color:#6A737D;">/* fade-appear用于实现渐隐渐现的效果 */</span></span>
<span class="line"><span style="color:#B392F0;">.fade-enter</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">.fade-appear</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">opacity</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 入场动画执行的第二个时刻，到入场动画执行完成之前的一个时刻 */</span></span>
<span class="line"><span style="color:#B392F0;">.fade-enter-active</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">.fade-appear-active</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">opacity</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">transition</span><span style="color:#E1E4E8;">: opacity </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ease-in</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 当整个入场动画执行完成之后 */</span></span>
<span class="line"><span style="color:#B392F0;">.fade-enter-done</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">opacity</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 表示出场动画执行的第一个时刻 */</span></span>
<span class="line"><span style="color:#B392F0;">.fade-exit</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">opacity</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 整个出场的过程 */</span></span>
<span class="line"><span style="color:#B392F0;">.fade-exit-active</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">opacity</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">transition</span><span style="color:#E1E4E8;">: opacity </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ease-in</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 当整个出场动画执行完成时 */</span></span>
<span class="line"><span style="color:#B392F0;">.fade-exit-done</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* 入场动画执行的第一个时刻，即刚要入场的这个瞬间 */</span></span>
<span class="line"><span style="color:#6A737D;">/* fade-appear用于实现渐隐渐现的效果 */</span></span>
<span class="line"><span style="color:#6F42C1;">.fade-enter</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">.fade-appear</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">opacity</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 入场动画执行的第二个时刻，到入场动画执行完成之前的一个时刻 */</span></span>
<span class="line"><span style="color:#6F42C1;">.fade-enter-active</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">.fade-appear-active</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">opacity</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">transition</span><span style="color:#24292E;">: opacity </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">s</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ease-in</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 当整个入场动画执行完成之后 */</span></span>
<span class="line"><span style="color:#6F42C1;">.fade-enter-done</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">opacity</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 表示出场动画执行的第一个时刻 */</span></span>
<span class="line"><span style="color:#6F42C1;">.fade-exit</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">opacity</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 整个出场的过程 */</span></span>
<span class="line"><span style="color:#6F42C1;">.fade-exit-active</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">opacity</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">transition</span><span style="color:#24292E;">: opacity </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">s</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ease-in</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 当整个出场动画执行完成时 */</span></span>
<span class="line"><span style="color:#6F42C1;">.fade-exit-done</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>此时我们来看下浏览器的显示效果：</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270705735.gif" alt="css动画初阶探索"></p><h3 id="_2-进阶探索" tabindex="-1">（2）进阶探索 <a class="header-anchor" href="#_2-进阶探索" aria-label="Permalink to &quot;（2）进阶探索&quot;">​</a></h3><p>上面我们只是改变了一项数据。现在，如果我们想要点击就新增一项过渡效果，这又该如何处理呢？</p><p>我们来改造下 <code>App.js</code> 文件的代码。<strong>具体代码如下：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React, { Component, Fragment } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { CSSTransition, TransitionGroup } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react-transition-group&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./style.css&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(props);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      show: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      list: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handleToggle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handleToggle.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">Fragment</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span><span style="color:#6A737D;">/* onEntered指的是在某一个时刻会自动执行的一个函数</span></span>
<span class="line"><span style="color:#6A737D;">            当入场动画结束时，onEntered将会被执行</span></span>
<span class="line"><span style="color:#6A737D;">        */</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#79B8FF;">TransitionGroup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          {</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.list.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">              &lt;</span><span style="color:#79B8FF;">CSSTransition</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">in</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.show}</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">timeout</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">classNames</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;fade&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">unmountOnExit</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">onEntered</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  el.style.color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;blue&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }}</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">appear</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{index}</span></span>
<span class="line"><span style="color:#E1E4E8;">              &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;{item}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">              &lt;/</span><span style="color:#79B8FF;">CSSTransition</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            );</span></span>
<span class="line"><span style="color:#E1E4E8;">          })}</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#79B8FF;">TransitionGroup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handleToggle}&gt;toggle&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#79B8FF;">Fragment</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">handleToggle</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">prevState</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        list: [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">prevState.list, </span><span style="color:#9ECBFF;">&#39;item&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> App;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React, { Component, Fragment } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { CSSTransition, TransitionGroup } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-transition-group&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./style.css&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">props</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(props);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      show: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      list: [],</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handleToggle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handleToggle.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">Fragment</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        {</span><span style="color:#6A737D;">/* onEntered指的是在某一个时刻会自动执行的一个函数</span></span>
<span class="line"><span style="color:#6A737D;">            当入场动画结束时，onEntered将会被执行</span></span>
<span class="line"><span style="color:#6A737D;">        */</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#005CC5;">TransitionGroup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          {</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.list.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">              &lt;</span><span style="color:#005CC5;">CSSTransition</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">in</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.show}</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">timeout</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">classNames</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;fade&#39;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">unmountOnExit</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">onEntered</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{(</span><span style="color:#E36209;">el</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                  el.style.color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;blue&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }}</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">appear</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{index}</span></span>
<span class="line"><span style="color:#24292E;">              &gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;{item}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">              &lt;/</span><span style="color:#005CC5;">CSSTransition</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            );</span></span>
<span class="line"><span style="color:#24292E;">          })}</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#005CC5;">TransitionGroup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handleToggle}&gt;toggle&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#005CC5;">Fragment</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">handleToggle</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">((</span><span style="color:#E36209;">prevState</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        list: [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">prevState.list, </span><span style="color:#032F62;">&#39;item&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> App;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><p><strong>此时浏览器的运行效果如下：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270706031.gif" alt="css动画进阶探索"></p><p>对于这种类型的动画来说，我们通过 <code>TransitionGroup</code> 对外层进行包裹，之后通过 <code>CSSTransition</code> 对里层进行包裹，进而达到我们最终的效果。</p><h1 id="📮-六、结束语" tabindex="-1">📮 六、结束语 <a class="header-anchor" href="#📮-六、结束语" aria-label="Permalink to &quot;📮 六、结束语&quot;">​</a></h1><p>在上面这篇文章中，我们讲解了 <code>react</code> 中的 <code>props</code> ，同时，还简单的了解了虚拟 <code>DOM</code> 的内容。除此之外呢，还学习了 <code>ref</code> 的使用，以及 <code>react</code> 中的酷炫的过渡动画。当然，最为重要的一点是， <code>react</code> 中的<strong>生命周期函数</strong>。</p><p>那到这里， <code>react</code> 的进阶知识讲到这里就结束了。不知道小伙伴们对 <code>react</code> 是否又有进一步的认识呢？</p>`,75),e=[o];function t(r,c,E,y,i,d){return n(),a("div",null,e)}const F=s(p,[["render",t]]);export{u as __pageData,F as default};
