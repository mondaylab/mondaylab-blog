import{_ as t,o as e,c as n,Q as l}from"./chunks/framework.98c15f2e.js";const p=JSON.parse('{"title":"『软件测试3』八大典型的黑盒测试方法已来袭，快快接住！","description":"","frontmatter":{"title":"『软件测试3』八大典型的黑盒测试方法已来袭，快快接住！","author":"周一","date":"2021-06-01","categories":["产品汪"],"tags":["软件测试"],"sidebar":"auto"},"headers":[{"level":1,"title":"一、等价类划分法","slug":"一、等价类划分法","link":"#一、等价类划分法","children":[{"level":2,"title":"1、定义","slug":"_1、定义","link":"#_1、定义","children":[]},{"level":2,"title":"2、等价类划分法步骤","slug":"_2、等价类划分法步骤","link":"#_2、等价类划分法步骤","children":[]},{"level":2,"title":"3、设计测试用例步骤","slug":"_3、设计测试用例步骤","link":"#_3、设计测试用例步骤","children":[]},{"level":2,"title":"4、案例：学生选修课程","slug":"_4、案例-学生选修课程","link":"#_4、案例-学生选修课程","children":[]}]},{"level":1,"title":"二、边界值分析法","slug":"二、边界值分析法","link":"#二、边界值分析法","children":[{"level":2,"title":"1、边界值分析法概述","slug":"_1、边界值分析法概述","link":"#_1、边界值分析法概述","children":[]},{"level":2,"title":"2、设计测试用例","slug":"_2、设计测试用例","link":"#_2、设计测试用例","children":[]},{"level":2,"title":"3、边界值设计原则","slug":"_3、边界值设计原则","link":"#_3、边界值设计原则","children":[]}]},{"level":1,"title":"三、错误推测法","slug":"三、错误推测法","link":"#三、错误推测法","children":[{"level":2,"title":"1、错误推测法概述","slug":"_1、错误推测法概述","link":"#_1、错误推测法概述","children":[]},{"level":2,"title":"2、错误推测法基本思想","slug":"_2、错误推测法基本思想","link":"#_2、错误推测法基本思想","children":[]}]},{"level":1,"title":"四、因果图设计法","slug":"四、因果图设计法","link":"#四、因果图设计法","children":[{"level":2,"title":"1、因果图设计法概述","slug":"_1、因果图设计法概述","link":"#_1、因果图设计法概述","children":[]},{"level":2,"title":"2、因果图表示","slug":"_2、因果图表示","link":"#_2、因果图表示","children":[]},{"level":2,"title":"3、约束条件","slug":"_3、约束条件","link":"#_3、约束条件","children":[]},{"level":2,"title":"4、设计测试用例","slug":"_4、设计测试用例","link":"#_4、设计测试用例","children":[]},{"level":2,"title":"5、优点","slug":"_5、优点","link":"#_5、优点","children":[]},{"level":2,"title":"6、思考题","slug":"_6、思考题","link":"#_6、思考题","children":[]}]},{"level":1,"title":"五、判定表驱动法","slug":"五、判定表驱动法","link":"#五、判定表驱动法","children":[{"level":2,"title":"1、判定表驱动法概述","slug":"_1、判定表驱动法概述","link":"#_1、判定表驱动法概述","children":[]},{"level":2,"title":"2、判定驱动法 —— 引例","slug":"_2、判定驱动法-——-引例","link":"#_2、判定驱动法-——-引例","children":[]},{"level":2,"title":"3、判定表结构","slug":"_3、判定表结构","link":"#_3、判定表结构","children":[]},{"level":2,"title":"4、判定表的建立步骤","slug":"_4、判定表的建立步骤","link":"#_4、判定表的建立步骤","children":[]},{"level":2,"title":"5、使用判定表设计测试用例的条件","slug":"_5、使用判定表设计测试用例的条件","link":"#_5、使用判定表设计测试用例的条件","children":[]},{"level":2,"title":"6、案例：工资发放","slug":"_6、案例-工资发放","link":"#_6、案例-工资发放","children":[]}]},{"level":1,"title":"六、正交实验设计法","slug":"六、正交实验设计法","link":"#六、正交实验设计法","children":[{"level":2,"title":"1、正交实验设计法概述","slug":"_1、正交实验设计法概述","link":"#_1、正交实验设计法概述","children":[]},{"level":2,"title":"2、正交实验设计法三个关键因素","slug":"_2、正交实验设计法三个关键因素","link":"#_2、正交实验设计法三个关键因素","children":[]},{"level":2,"title":"3、利用正交实验法设计测试用例的步骤","slug":"_3、利用正交实验法设计测试用例的步骤","link":"#_3、利用正交实验法设计测试用例的步骤","children":[]},{"level":2,"title":"4、正交表的特点","slug":"_4、正交表的特点","link":"#_4、正交表的特点","children":[]},{"level":2,"title":"5、总结","slug":"_5、总结","link":"#_5、总结","children":[]},{"level":2,"title":"6、案例：微信 Web 页面运行环境正交试验设计","slug":"_6、案例-微信-web-页面运行环境正交试验设计","link":"#_6、案例-微信-web-页面运行环境正交试验设计","children":[]}]},{"level":1,"title":"七、场景法","slug":"七、场景法","link":"#七、场景法","children":[{"level":2,"title":"1、设计思想","slug":"_1、设计思想","link":"#_1、设计思想","children":[]},{"level":2,"title":"2、场景的构成要素","slug":"_2、场景的构成要素","link":"#_2、场景的构成要素","children":[{"level":3,"title":"（1）基本流","slug":"_1-基本流","link":"#_1-基本流","children":[]},{"level":3,"title":"（2）场景流","slug":"_2-场景流","link":"#_2-场景流","children":[]}]},{"level":2,"title":"3、基本流和备选流的场景说明","slug":"_3、基本流和备选流的场景说明","link":"#_3、基本流和备选流的场景说明","children":[]},{"level":2,"title":"4、设计测试用例","slug":"_4、设计测试用例-1","link":"#_4、设计测试用例-1","children":[]},{"level":2,"title":"5、总结","slug":"_5、总结-1","link":"#_5、总结-1","children":[]},{"level":2,"title":"6、案例：在线购物案例","slug":"_6、案例-在线购物案例","link":"#_6、案例-在线购物案例","children":[]}]},{"level":1,"title":"八、功能图法","slug":"八、功能图法","link":"#八、功能图法","children":[]},{"level":1,"title":"九、黑盒测试方法策略总结","slug":"九、黑盒测试方法策略总结","link":"#九、黑盒测试方法策略总结","children":[{"level":2,"title":"1、各种测试方法选择的综合策略","slug":"_1、各种测试方法选择的综合策略","link":"#_1、各种测试方法选择的综合策略","children":[]},{"level":2,"title":"2、黑盒测试的优缺点","slug":"_2、黑盒测试的优缺点","link":"#_2、黑盒测试的优缺点","children":[]}]},{"level":1,"title":"十、写在最后","slug":"十、写在最后","link":"#十、写在最后","children":[]}],"relativePath":"column/Product/SoftwareTesting/003.md","filePath":"column/Product/SoftwareTesting/003.md","lastUpdated":1685151998000}'),r={name:"column/Product/SoftwareTesting/003.md"},s=l(`<h1 id="一、等价类划分法" tabindex="-1">一、等价类划分法 <a class="header-anchor" href="#一、等价类划分法" aria-label="Permalink to &quot;一、等价类划分法&quot;">​</a></h1><h2 id="_1、定义" tabindex="-1">1、定义 <a class="header-anchor" href="#_1、定义" aria-label="Permalink to &quot;1、定义&quot;">​</a></h2><p>一个程序可以有多个输入，等价类划分就是将这些<strong>输入数据</strong>按照输入需求进行分类，将它们划分为若干个子集，这些子集即为等价类（<strong>某个输入域的子集合</strong>），在每个<strong>等价类</strong>中选择有代表性的数据设计测试用例。</p><p><strong>举个例子</strong>：</p><p>这种方法类似于学生站队，男生站左边，女生站右边，老师站中间，这样就把师生这整个群体划分成了<strong>三个等价类</strong>。 <img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270912984.png" alt="等价类划分举例"></p><h2 id="_2、等价类划分法步骤" tabindex="-1">2、等价类划分法步骤 <a class="header-anchor" href="#_2、等价类划分法步骤" aria-label="Permalink to &quot;2、等价类划分法步骤&quot;">​</a></h2><p>（1）先从程序<strong>规格说明书</strong>中找出各个<strong>输入条件</strong>； （2）再为每个输入条件划分<strong>等价类</strong>，形成若干<strong>互不相交的子集</strong>； （3）列出等价表</p><table><thead><tr><th>输入条件</th><th>有效等价类</th><th>无效等价类</th></tr></thead><tbody><tr><td>……</td><td>……</td><td>……</td></tr></tbody></table><h2 id="_3、设计测试用例步骤" tabindex="-1">3、设计测试用例步骤 <a class="header-anchor" href="#_3、设计测试用例步骤" aria-label="Permalink to &quot;3、设计测试用例步骤&quot;">​</a></h2><p>等价类划分法设计测试用例要经历<strong>划分等价类</strong>（列出等价类表）和<strong>选取测试用例</strong>两步。</p><p><strong>（1）划分等价类</strong></p><blockquote><p>等价类是指某个输入域的子集合。在该子集合中，<strong>各个输入数据对于揭露程序中的错误都是等效的</strong>。测试代表值就等价于这一类其他值的测试。</p></blockquote><p>那在划分等价类的时候，会出现有效等价类和无效等价类，这个时候我们需要怎么判断呢？</p><blockquote><p><strong>有效等价类</strong>就是有效值的集合，它们是符合程序要求、合理且有意义的输入数据。</p><p><strong>无效等价类</strong>就是无效值的集合，它们是不符合程序要求、不合理或无意义的输入数据。</p></blockquote><p>因此，在设计测试用例时，要<strong>同时考虑</strong>有效等价类和无效等价类的设计。</p><p>同时，在划分等价类的时候，需要遵循一定的划分原则：</p><blockquote><p><strong>等价类划分原则</strong>：</p><p><strong>原则 1</strong>：如果输入条件规定了<strong>取值范围</strong>或<strong>值的个数</strong>的情况下，可以确定<u>一个有效等价类</u>和<u>两个无效等价类</u>。</p><p><strong>原则 2</strong>：如果输入条件规定了<strong>输入值的集合</strong>或者规定了**“必须如何”的条件**的情况下，可以确立<u>一个有效等价类</u>和<u>一个无效等价类</u>。</p><p><strong>原则 3</strong>：如果输入条件是一个<strong>布尔量</strong>的情况下，可确定<u>一个有效等价类</u>和<u>一个无效等价类</u>。</p><p><strong>原则 4</strong>：如果规定了<strong>输入数据的一组值</strong>（假定 n 个），并且程序要对每一个输入值分别处理的情况下，可确定<u>n 个有效等价类</u>和<u>一个无效等价类</u>。</p><p><strong>原则 5</strong>：如果规定了<strong>输入数据必须遵守</strong>的规则，可确定<u>一个有效等价类</u>（符合规则）和<u>若干个无效等价类</u>（从不同角度违反规则）。</p><p><strong>原则 6</strong>：在确知已划分的等价类中，各元素在程序处理中的方式不同的情况下，则应再将该等价类进一步地划分为更小的等价类。</p></blockquote><blockquote><p>同一个等价类中的数据发现程序缺陷的能力是相同的，如果使用等价类中的其中一个数据不能捕获缺陷，那么使用等价类中的其他数据也不能捕获缺陷；同样，如果等价类中的其中一个数据能够捕获缺陷，那么该等价类中的其他数据也能捕获缺陷，即<strong>等价类中的所有输入数据都是等效的</strong>。</p></blockquote><p><strong>（2）设计测试用例</strong></p><ul><li>在确立了等价类之后，建立等价类列表，列出所有划分出的等价类。</li><li>为每个等价类规定一个<strong>唯一编号</strong>。</li><li>设计一个新的测试用例，使其<strong>尽可能多地覆盖</strong>尚未被覆盖的有效等价类。重复这一步，直到所有的有效等价类都被覆盖为止。</li><li>设计一个新的测试用例，使其<strong>仅覆盖一个</strong>尚未被覆盖的无效等价类。重复这一步，直到所有的无效等价类都被覆盖为止。</li></ul><h2 id="_4、案例-学生选修课程" tabindex="-1">4、案例：学生选修课程 <a class="header-anchor" href="#_4、案例-学生选修课程" aria-label="Permalink to &quot;4、案例：学生选修课程&quot;">​</a></h2><p>看到这里，不妨再做下案例分析。</p><p><strong>案例 1</strong>：每个学生可以选修 1~3 门课程，要求采用等价类设计测试用例。</p><p><strong>解题思路</strong>：首先分析有效等价类和无效等价类，然后建立等价类表。</p><blockquote><p><strong>【解析】</strong></p><p><strong>（1）根据题干分析有效等价类和无效等价类：</strong></p><p>有效等价类：选修 1~3 门课</p><p>无效等价类：没有选修课、选修 3 门课以上</p><p><strong>（2）根据分析建立等价类表：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270912299.png" alt="等价类表"></p><p><strong>（3）根据等价类表设计测试用例覆盖有效等价类和无效等价类：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270913072.png" alt="根据等价类表设计测试用例覆盖有效等价类和无效等价类
"></p></blockquote><p><strong>案例 2</strong>：某连锁酒店集团实行积分奖励计划，会员每次入住集团旗下酒店均可以获得一定积分，积分由欢迎积分加消费积分构成。其中欢迎积分跟酒店等级有关，具体标准如表 1-1 所示；消费积分跟每次入住消费金额有关，具体标准为每消费 1 元获得 2 积分（不足 1 元的部分不给分）。此外，集团会员分为优先会员、金会员、白金会员三个级别，金会员和白金会员在入住酒店时可获得消费积分的额外奖励，奖励规则如表 1-2 所示。</p><p><strong>表 1-1</strong> 集团不同等级酒店的欢迎积分标准</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270913704.png" alt="集团不同等级酒店的欢迎积分标准"></p><p><strong>表 1-2</strong> 额外积分奖励规则</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270913982.png" alt="额外积分奖励规则"></p><p>该酒店集团开发了一个程序来计算会员每次入住后所累积的积分，程序的输入包括会员级别 L、酒店等级 C 和消费金额 A（单位：元），程序的输出为本次积分 S。其中，L 为单个字母且大小写不敏感，C 为取值 1 到 6 的整数，A 为正浮点数且最多保留两位小数，S 为整数。</p><p>【<strong>问题一</strong>】采用等价类划分法对该程序进行测试，等价类表如表 1-3 所示，请补充表中空（1）-（7）。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270913026.png" alt="问题一答案"></p><p>【<strong>问题二</strong>】根据以上等价类表设计的测试用例如下表所示，请补充表 2-4 中空（1）-（13）。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270913646.png" alt="问题二答案"></p><h1 id="二、边界值分析法" tabindex="-1">二、边界值分析法 <a class="header-anchor" href="#二、边界值分析法" aria-label="Permalink to &quot;二、边界值分析法&quot;">​</a></h1><h2 id="_1、边界值分析法概述" tabindex="-1">1、边界值分析法概述 <a class="header-anchor" href="#_1、边界值分析法概述" aria-label="Permalink to &quot;1、边界值分析法概述&quot;">​</a></h2><p>（<strong>1</strong>）边界值分析法是对软件的输入或输出边界进行测试的一种方法，它通常作为等价类划分法的一种补充测试。</p><p>（<strong>2</strong>）在等价类划分法中，无论是输入等价类还是输出等价类，都会有<strong>多个边界</strong>，而边界值分析法就是在这些边界附近寻找<strong>某些点</strong>作为测试数据，而不是在等价类内部选择测试数据。</p><h2 id="_2、设计测试用例" tabindex="-1">2、设计测试用例 <a class="header-anchor" href="#_2、设计测试用例" aria-label="Permalink to &quot;2、设计测试用例&quot;">​</a></h2><p><strong>设计测试用例步骤</strong>：</p><p>（<strong>1</strong>）首先划分<strong>等价类</strong>，<u>根据等价类划分情况</u>确定<strong>边界情况</strong>。</p><p>（<strong>2</strong>）选取<strong>正好等于</strong>、<strong>刚刚大于</strong>、<strong>刚刚小于</strong>边界的值作为测试数据，而不是选取等价类中的典型值或任意值。</p><h2 id="_3、边界值设计原则" tabindex="-1">3、边界值设计原则 <a class="header-anchor" href="#_3、边界值设计原则" aria-label="Permalink to &quot;3、边界值设计原则&quot;">​</a></h2><p><strong>原则 1</strong>：如果输入条件规定了<strong>值的范围</strong>，则应取刚达到这个范围的边界的值，以及刚刚超越这个范围边界的值作为测试输入数据</p><p><strong>原则 2</strong>：如果输入条件规定了<strong>值的个数</strong>，则用最大个数、最小个数、比最小个数少 1、比最大个数多 1 的数作为测试数据</p><p><strong>原则 3</strong>：根据规格说明的每个输出条件，使用前面的原则 1。</p><p><strong>原则 4</strong>：根据规格说明的每个输出条件，使用前面的原则 2。</p><p><strong>原则 5</strong>：如果程序的规格说明给出的输入域或输出域是<strong>有序集合</strong>，则应选取集合的<strong>第一个元素</strong>和<strong>最后一个元素</strong>作为测试用例。</p><p><strong>原则 6</strong>：如果程序中使用了一个<strong>内部数据结构</strong>，则应该选择这个内部数据结构边界上的值作为测试用例。</p><p><strong>原则 7</strong>：分析规格说明，找出<strong>其他可能的边界条件</strong>。</p><h1 id="三、错误推测法" tabindex="-1">三、错误推测法 <a class="header-anchor" href="#三、错误推测法" aria-label="Permalink to &quot;三、错误推测法&quot;">​</a></h1><h2 id="_1、错误推测法概述" tabindex="-1">1、错误推测法概述 <a class="header-anchor" href="#_1、错误推测法概述" aria-label="Permalink to &quot;1、错误推测法概述&quot;">​</a></h2><p>错误推测法就是人们可以靠<strong>经验和直觉</strong>推测程序中可能存在的各种错误，从而有针对性地编写检查这些错误的例子。</p><h2 id="_2、错误推测法基本思想" tabindex="-1">2、错误推测法基本思想 <a class="header-anchor" href="#_2、错误推测法基本思想" aria-label="Permalink to &quot;2、错误推测法基本思想&quot;">​</a></h2><p>（1）列举出程序中<strong>所有可能</strong>有的错误和<strong>容易发生</strong>错误的特殊情况（比如，程序只能输入数字，测试时可以输入字母进行测试）。 （2）根据它们选择测试用例。</p><h1 id="四、因果图设计法" tabindex="-1">四、因果图设计法 <a class="header-anchor" href="#四、因果图设计法" aria-label="Permalink to &quot;四、因果图设计法&quot;">​</a></h1><h2 id="_1、因果图设计法概述" tabindex="-1">1、因果图设计法概述 <a class="header-anchor" href="#_1、因果图设计法概述" aria-label="Permalink to &quot;1、因果图设计法概述&quot;">​</a></h2><p>如果在测试时必须考虑<strong>输入条件的各种组合</strong>以及<strong>各种输出情况</strong>，那么可以使用一种适用于描述对于多种条件的组合，相应产生多个动作的形式来设计测试用例，这就需要利用因果图。</p><h2 id="_2、因果图表示" tabindex="-1">2、因果图表示 <a class="header-anchor" href="#_2、因果图表示" aria-label="Permalink to &quot;2、因果图表示&quot;">​</a></h2><p>因果图使用一些简单的<strong>逻辑符号</strong>和直线将程序的因（输入）与果（输出）连接起来，一般原因用 ci 表示，结果用 ei 表示，<strong>各结点表示状态</strong>，可以取值“0”或“1”，其中“0”表示状态不出现，“1”表示状态出现。</p><p><strong>如下图所示：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270913798.png" alt="因果图表示"></p><p><strong>ci 与 ei 之间有恒等、非（~）、或（∨）、与（∧）4 种关系，分别为：</strong></p><p><strong>恒等</strong>：在恒等关系中，要求程序有一个输入和一个输出，输出与输入保持一致。若 c1 为 1，则 e1 也为 1，若 c1 为 0，则 e1 也为 0。</p><p><strong>非</strong>：非使用符号“~”表示，在这种关系中，要求程序有一个输入和一个输出，输出是输入的取反。若 c1 为 1，则 e1 为 0，若 c1 为 0，则 e1 为 1。</p><p><strong>或</strong>：使用符号“∨”表示，或关系可以有任意个输入，只要这些输入中有一个为 1，则输出为 1，否则输出为 0。</p><p><strong>与</strong>：使用符号“∧”表示，与关系也可以有任意个输入，但只有这些输入全部为 1，输出才能为 1，否则输出为 0。</p><p><strong>以下用一张图展示这 4 种关系：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270913798.png" alt="因果图4种关系，恒等、非、与、或"></p><blockquote><p><strong>总结</strong>：</p><ul><li>在软件测试中，如果程序有多个输入，那么除了输入与输出之间的作用关系之外，这些输入之间往往也会存在某些依赖关系，某些输入条件本身不能同时出现，某一种输入可能会影响其他输入。</li><li>例如，某一软件用于统计体检信息，在输入个人信息时，性别只能输入男或女，这两种输入不能同时存在，而且如果输入性别为女，那么体检项就会受到限制。</li></ul></blockquote><h2 id="_3、约束条件" tabindex="-1">3、约束条件 <a class="header-anchor" href="#_3、约束条件" aria-label="Permalink to &quot;3、约束条件&quot;">​</a></h2><p>为了表示<strong>原因与原因之间</strong>，<strong>原因与结果之间</strong>可能存在的约束条件，在因果图中可以附加一些表示约束条件的符号。</p><p><strong>（1）输入条件的约束类别可分为四种：</strong></p><p><strong>E</strong>（Exclusive，这些依赖关系在软件测试中称为“约束”，异）、<strong>I</strong>（at least one，或）、<strong>O</strong>（one and only one，唯一）、<strong>R</strong>（Requires，要求），在因果图中，用特定的符号表明这些约束关系。</p><ul><li><strong>E</strong>（异）：a 和 b 中最多只能有一个为 1，即 a 和 b 不能同时为 1。</li><li><strong>I</strong>（或）：a、b 和 c 中至少有一个必须是 1，即 a、b、c 不能同时为 0。</li><li><strong>O</strong>（唯一）：a 和 b 有且仅有一个为 1。</li><li><strong>R</strong>（要求）：a 和 b 必须保持一致，即 a 为 1 时，b 也必须为 1，a 为 0 时，b 也必须为 0。</li></ul><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270913567.png" alt="因果图约束条件"></p><p><strong>（2）输出条件的约束类别只有一种：</strong></p><ul><li>除了输入条件，输出条件也会相互约束，输出条件的约束只有一种<strong>M</strong>（Mask，强制），强制约束关系。若结果 a 是 1，那么结果 b 强制为 0。</li></ul><h2 id="_4、设计测试用例" tabindex="-1">4、设计测试用例 <a class="header-anchor" href="#_4、设计测试用例" aria-label="Permalink to &quot;4、设计测试用例&quot;">​</a></h2><p><strong>（1）因果图设计测试用例思想：</strong></p><ul><li><p>从程序<strong>规格说明书</strong>的描述中，找出因（输入条件）和果（输出结果或者程序状态的改变）；</p></li><li><p>通过因果图转换为<strong>判定表</strong>；</p></li><li><p>为判定表中的<strong>每一列</strong>设计一个测试用例；</p></li></ul><p><strong>（2）使用因果图设计测试用例的步骤：</strong></p><ul><li><p>分析程序规格说明书描述内容，确定程序的输入与输出，即确定“原因”和“结果” 。</p></li><li><p>分析得出<strong>输入与输入之间</strong>、<strong>输入与输出之间</strong>的对应关系，将这些输入与输出之间的关系使用<strong>因果图</strong>表示出来。</p></li><li><p>由于语法与环境的限制，有些输入与输入之间、输入与输出之间的组合情况是不可能出现的，对于这种情况，使用符号标记它们之间的限制或约束关系。</p></li><li><p>将因果图转换为<strong>决策表</strong>，根据决策表设计测试用例。（决策表将在标题五判定表驱动法中提到）</p></li></ul><h2 id="_5、优点" tabindex="-1">5、优点 <a class="header-anchor" href="#_5、优点" aria-label="Permalink to &quot;5、优点&quot;">​</a></h2><p><strong>因果图法的优点：</strong></p><ul><li><p>考虑到了输入情况的<strong>各种组合</strong>以及各个输入情况之间的<strong>相互制约关系</strong>。</p></li><li><p>因果图的约束关系可以<strong>有效简化决策表</strong>，帮助测试人员高效率的开发测试用例。</p></li><li><p>因果图法是将<strong>自然语言</strong>规格说明转化成<strong>形式语言</strong>规格说明的一种严格的方法，可以指出规格说明存在的<strong>不完整性</strong>和<strong>二义性</strong>。</p></li></ul><h2 id="_6、思考题" tabindex="-1">6、思考题 <a class="header-anchor" href="#_6、思考题" aria-label="Permalink to &quot;6、思考题&quot;">​</a></h2><p>程序的规格说明要求：输入的第一个字符必须是#或*，第二个字符必须是一个数字，在此情况下进行文件的修改；如果第一个字符不是#或*，则给出信息 N，如果第二个字符不是数字，则给出信息 M。采用因果图法设计该软件的测试用例。</p><blockquote><p><strong>具体解析如下：</strong> （<strong>1）分析程序规格说明中的原因和结果：</strong></p><table><thead><tr><th><strong>原因</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>C1：第一个字符是#</td><td>e1:给出信息 N</td></tr><tr><td>C2：第一个字符是*</td><td>e2：修改文件</td></tr><tr><td>C3：第二个字符是一个数字</td><td>e3：给出信息 M</td></tr></tbody></table><p><strong>（2）画出因果图：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270914815.png" alt="因果图表示"></p><p><strong>（3)将因果图转换成判定表，3 个条件一般可以有 2³ 种组合</strong></p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;">1</th><th style="text-align:center;">2</th><th style="text-align:center;">3</th><th style="text-align:center;">4</th><th style="text-align:center;">5</th><th style="text-align:center;">6</th><th style="text-align:center;">7</th><th style="text-align:center;">8</th></tr></thead><tbody><tr><td style="text-align:center;">原因</td><td style="text-align:center;">c1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">c2</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">c3</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">结果</td><td style="text-align:center;">e1</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">e2</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">✔</td><td style="text-align:center;"></td><td style="text-align:center;">✔</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">e3</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">✔</td><td style="text-align:center;"></td><td style="text-align:center;">✔</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><p><strong>（4）简化判定表，第 7 列和第 8 列合并</strong></p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;">1</th><th style="text-align:center;">2</th><th style="text-align:center;">3</th><th style="text-align:center;">4</th><th style="text-align:center;">5</th><th style="text-align:center;">6</th><th style="text-align:center;">7</th></tr></thead><tbody><tr><td style="text-align:center;">原因</td><td style="text-align:center;">c1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">c2</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">c3</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">结果</td><td style="text-align:center;">e1</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">✔</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">e2</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">✔</td><td style="text-align:center;"></td><td style="text-align:center;">✔</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">e3</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">✔</td><td style="text-align:center;"></td><td style="text-align:center;">✔</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><strong>（5）根据判定表生成测试用例</strong></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">测试用例 ID</td><td style="text-align:center;">输入数据</td><td style="text-align:center;">输出结果</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">:--------:</td><td style="text-align:center;">:------:</td><td style="text-align:center;">:-------:</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;">#3</td><td style="text-align:center;">修改文件</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">#M</td><td style="text-align:center;">给出信息 M</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">*5</td><td style="text-align:center;">修改文件</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">*A</td><td style="text-align:center;">给出信息 M</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">MM</td><td style="text-align:center;">给出信息 N</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table></blockquote><h1 id="五、判定表驱动法" tabindex="-1">五、判定表驱动法 <a class="header-anchor" href="#五、判定表驱动法" aria-label="Permalink to &quot;五、判定表驱动法&quot;">​</a></h1><h2 id="_1、判定表驱动法概述" tabindex="-1">1、判定表驱动法概述 <a class="header-anchor" href="#_1、判定表驱动法概述" aria-label="Permalink to &quot;1、判定表驱动法概述&quot;">​</a></h2><p>判定表也称为<strong>决策表</strong>，其实质就是一种<strong>逻辑表</strong>。在程序设计发展初期，判定表就已经被当作程序开发的辅助工具了，帮助开发人员整理开发模式和流程，因为它可以把复杂的逻辑关系和多种条件组合的情况表达的既具体又明确，利用判定表可以设计出完整的测试用例集合。</p><h2 id="_2、判定驱动法-——-引例" tabindex="-1">2、判定驱动法 —— 引例 <a class="header-anchor" href="#_2、判定驱动法-——-引例" aria-label="Permalink to &quot;2、判定驱动法 —— 引例&quot;">​</a></h2><p>为了让大家明白什么是<code>判定表</code>，下面通过一个<code>“图书阅读指南”</code>来制作一个判定表，图书阅读指南指明了图书阅读过程中可能出现的状况，以及针对各种情况给读者的建议。</p><p><strong>（1）在图书阅读过程中可能会出现 3 种情况：</strong></p><ul><li>是否疲倦。</li><li>是否对内容感兴趣。</li><li>对书中的内容是否感到糊涂。</li></ul><blockquote><p>如果回答是肯定的，则使用“Y”标记；</p><p>如果回答是否定的，则使用“N”标记。</p></blockquote><p>那么这 3 种情况可以有<strong>2³=8 种</strong>组合，针对这 8 种组合。</p><p><strong>（2）阅读指南给读者提供了 4 条建议：</strong></p><ul><li>回到本章开头重读。</li><li>继续读下去。</li><li>跳到下一章去读。</li><li>停止阅读并休息。</li></ul><p>（<strong>3</strong>）针对以上分析，得出以下<strong>图书阅读指南判定表</strong>。</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;"><strong>问题与建议</strong></th><th style="text-align:center;"><strong>1</strong></th><th style="text-align:center;"><strong>2</strong></th><th style="text-align:center;"><strong>3</strong></th><th style="text-align:center;"><strong>4</strong></th><th style="text-align:center;"><strong>5</strong></th><th style="text-align:center;"><strong>6</strong></th><th style="text-align:center;"><strong>7</strong></th><th style="text-align:center;"><strong>8</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>问题</strong></td><td style="text-align:center;">是否疲倦</td><td style="text-align:center;">Y</td><td style="text-align:center;">Y</td><td style="text-align:center;">Y</td><td style="text-align:center;">Y</td><td style="text-align:center;">N</td><td style="text-align:center;">N</td><td style="text-align:center;">N</td><td style="text-align:center;">N</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">是否对内容感兴趣</td><td style="text-align:center;">Y</td><td style="text-align:center;">Y</td><td style="text-align:center;">N</td><td style="text-align:center;">N</td><td style="text-align:center;">N</td><td style="text-align:center;">Y</td><td style="text-align:center;">Y</td><td style="text-align:center;">N</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">对书中内容是否感到糊涂</td><td style="text-align:center;">Y</td><td style="text-align:center;">N</td><td style="text-align:center;">N</td><td style="text-align:center;">Y</td><td style="text-align:center;">Y</td><td style="text-align:center;">Y</td><td style="text-align:center;">N</td><td style="text-align:center;">N</td></tr><tr><td style="text-align:center;"><strong>建议</strong></td><td style="text-align:center;">回到本章开头重读</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">✔</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">继续读下去</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">✔</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">跳到下一章去读</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">✔</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">✔</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">停止阅读并休息</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><p>（<strong>4</strong>）在实际测试中，条件桩往往很多，而且每个条件桩都有<strong>真假</strong>两个条件项，有 n 个条件桩的判定表就会有<strong>2<sup>n</sup>种</strong>条件规则，如果每条规则都设计一个测试用例，不仅工作量大，而且有些工作量可能是重复的无意义的。例如在“图书阅读指南”中，第 1、2 条规则，第 1 条规则取值为：Y、Y、Y，执行结果为“停止阅读并休息”；第 2 条规则取值为：Y、Y、N，执行结果也是为“停止阅读并休息”；对于这两条规则来说，前两个问题的取值相同，执行结果一样。</p><p>这些不影响结果取值的问题称为无关条件项，用“-”表示。忽略无关条件项，可以将两条规则合并。</p><p>合并规则需要满足如下<strong>两个条件</strong>：<strong>①</strong>两条规则采取的动作相同；<strong>②</strong>两条规则的条件项取值相似。</p><p><strong>（5）根据合并规则，可以将“图书阅读指南”判定表合并。</strong></p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;"><strong>问题与建议</strong></th><th style="text-align:center;"><strong>1</strong></th><th style="text-align:center;"><strong>2</strong></th><th style="text-align:center;"><strong>3</strong></th><th style="text-align:center;"><strong>4</strong></th><th style="text-align:center;"><strong>5</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>问题</strong></td><td style="text-align:center;">是否疲倦</td><td style="text-align:center;">Y</td><td style="text-align:center;">Y</td><td style="text-align:center;">N</td><td style="text-align:center;">N</td><td style="text-align:center;">N</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">是否对内容感兴趣</td><td style="text-align:center;">Y</td><td style="text-align:center;">N</td><td style="text-align:center;">N</td><td style="text-align:center;">Y</td><td style="text-align:center;">Y</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">对书中内容是否感到糊涂</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">Y</td><td style="text-align:center;">N</td></tr><tr><td style="text-align:center;"><strong>建议</strong></td><td style="text-align:center;">回到本章开头重读</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">✔</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">继续读下去</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">✔</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">跳到下一章去读</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">✔</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">停止阅读并休息</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><h2 id="_3、判定表结构" tabindex="-1">3、判定表结构 <a class="header-anchor" href="#_3、判定表结构" aria-label="Permalink to &quot;3、判定表结构&quot;">​</a></h2><p>判定表是把作为条件的<strong>所有输入</strong>的各种组合值以及<strong>对应的输出值</strong>都罗列出来而形成的表格，判定表由<strong>4 个部分</strong>组成，<strong>判定表结构</strong>如下：</p><table><thead><tr><th>条件桩</th><th>条件项</th></tr></thead><tbody><tr><td>动作桩</td><td>动作项</td></tr></tbody></table><p>其中每一列称为一个规则。判定表的<strong>4 个部分</strong>分别为：</p><ul><li><strong>条件桩</strong>：列出问题的所有条件，除了某些问题对条件的先后次序有要求之外，通常决策表中所列条件的先后次序都无关紧要。</li><li><strong>条件项</strong>：条件项就是条件桩的所有可能取值。</li><li><strong>动作桩</strong>：动作桩就是问题可能采取的操作，这些操作一般没有先后次序之分。</li><li><strong>动作项</strong>：指出在条件项的各组取值情况下应采取的动作。</li></ul><p>在判定表中，任何一个条件组合的特定取值及其相应要执行的操作称为<strong>一条规则</strong>，即判定表中的每一列就是一条规则，每一列都可以设计一个测试用例，根据判定表设计测试用例就不会有所遗漏。</p><h2 id="_4、判定表的建立步骤" tabindex="-1">4、判定表的建立步骤 <a class="header-anchor" href="#_4、判定表的建立步骤" aria-label="Permalink to &quot;4、判定表的建立步骤&quot;">​</a></h2><ul><li>确定规则个数（n 个条件相应的有 2ⁿ 条规则）。</li><li>列出所有的<strong>条件桩</strong>和<strong>动作桩</strong>。</li><li>填入条件项。</li><li>填入动作项，制定初始判定表。</li><li>简化，合并相似规则或相同动作。</li></ul><h2 id="_5、使用判定表设计测试用例的条件" tabindex="-1">5、使用判定表设计测试用例的条件 <a class="header-anchor" href="#_5、使用判定表设计测试用例的条件" aria-label="Permalink to &quot;5、使用判定表设计测试用例的条件&quot;">​</a></h2><ul><li><strong>规格说明</strong>以判定表的形式给出，或很容易转换成判定表。</li><li><strong>条件的排列顺序</strong>不影响执行哪些操作。</li><li><strong>规则的排列顺序</strong>不影响执行哪些操作。</li><li>当某一规则的条件已经满足，并确定要执行的操作后，不必检验别的规则。</li><li>如果某一规则要执行多个操作，这些操作的<strong>执行顺序</strong>无关紧要。</li></ul><h2 id="_6、案例-工资发放" tabindex="-1">6、案例：工资发放 <a class="header-anchor" href="#_6、案例-工资发放" aria-label="Permalink to &quot;6、案例：工资发放&quot;">​</a></h2><p>某公司的薪资管理制度如下：员工工资分为年薪制与月薪制两种，员工的错误定位包括普通错误与严重错误两种，如果是年薪制的员工，犯普通错误扣款 2%，犯严重错误扣款 4%；如果是月薪制的员工，犯普通错误扣款 4%，犯严重错误扣款 8%。该公司编写了一款软件用于员工工资计算发放，现在要对该软件进行测试。</p><p>对公司员工工资管理进行分析，可得出员工工资由 4 个因素决定：年薪、月薪、普通错误、严重错误。其中，年薪与月薪不可能同时并存，但普通错误与严重错误可以并存。</p><p>员工最终扣款结果有 7 种：未扣款、扣款 2%、扣款 4%、扣款 6%（2%+4%）、扣款 4%、扣款 8%、扣款 12%（4%+8%）。</p><p>采用<strong>判定表驱动法</strong>设计该软件的测试用例。</p><blockquote><p><strong>具体解析如下：</strong></p><p>（<strong>1）分析员工工资的原因和结果：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270914197.png" alt="员工工资原因和结果"></p><p>（<strong>2</strong>）有 4 个原因，每个原因有“Y”和“N”两个取值，理论上可以组成<strong>2<sup>4</sup>=16 种</strong>规则，但是 c1 与 c2 不能同时并存，因此有<strong>2<sup>3</sup>=8 种</strong>规则。得出<strong>员工工资判定表</strong>如下：</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270914502.png" alt="员工工资判定表"></p><p>（<strong>3）最终得出员工工资测试用例表：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270914869.png" alt="在这里插入图片描述"></p></blockquote><h1 id="六、正交实验设计法" tabindex="-1">六、正交实验设计法 <a class="header-anchor" href="#六、正交实验设计法" aria-label="Permalink to &quot;六、正交实验设计法&quot;">​</a></h1><h2 id="_1、正交实验设计法概述" tabindex="-1">1、正交实验设计法概述 <a class="header-anchor" href="#_1、正交实验设计法概述" aria-label="Permalink to &quot;1、正交实验设计法概述&quot;">​</a></h2><p><strong>正交实验设计法</strong>（Orthogonal experimental design）是指从大量的实验点中挑选出<strong>适量的</strong>、<strong>有代表性的</strong>点，依据 Glois 理论导出“正交表”，从而合理的安排实验的一种实验设计方法。</p><h2 id="_2、正交实验设计法三个关键因素" tabindex="-1">2、正交实验设计法三个关键因素 <a class="header-anchor" href="#_2、正交实验设计法三个关键因素" aria-label="Permalink to &quot;2、正交实验设计法三个关键因素&quot;">​</a></h2><ul><li><strong>指标</strong>：判断实验结果优劣的标准。</li><li><strong>因子</strong>：因子也称为因素，是指所有影响实验指标的条件。</li><li><strong>因子的状态</strong>：因子的状态也叫因子的水平，它指的是因子变量的取值。</li></ul><h2 id="_3、利用正交实验法设计测试用例的步骤" tabindex="-1">3、利用正交实验法设计测试用例的步骤 <a class="header-anchor" href="#_3、利用正交实验法设计测试用例的步骤" aria-label="Permalink to &quot;3、利用正交实验法设计测试用例的步骤&quot;">​</a></h2><ul><li>提取因子，构造因子状态表</li><li>加权筛选，简化因子状态表</li><li>构建正交表，设计测试用例</li></ul><p><strong>接下来对这三个步骤进行一一解析。</strong></p><p><strong>（1）举个栗子（步骤一）：</strong></p><p><strong>提取因子，构造因子状态表</strong>—— 即分析软件的规格需求说明得到影响软件功能的因子，确定因子可以有哪些取值，即确定因子的状态。</p><p>例如，某一软件的运行受到操作系统和数据库的影响，因此影响其运行是否成功的<strong>因子</strong>有操作系统和数据库两个，而操作系统有 Windows、Linux、Mac 三个取值，数据库有 MySQL、MongoDB、Oracle 三个取值，因此操作系统的<strong>因子状态</strong>为 3，数据库<strong>因子状态</strong>为 3。得到如下<strong>因子-状态表：</strong></p><table><thead><tr><th style="text-align:center;">因子</th><th style="text-align:center;"></th><th style="text-align:center;">因子的状态</th><th style="text-align:center;"></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>操作系统</strong></td><td style="text-align:center;">Windows</td><td style="text-align:center;">Linux</td><td style="text-align:center;">Mac</td></tr><tr><td style="text-align:center;"><strong>数据库</strong></td><td style="text-align:center;">MySQL</td><td style="text-align:center;">MongoDB</td><td style="text-align:center;">Oracle</td></tr></tbody></table><p><strong>（2）举个栗子（步骤二）：</strong></p><p><strong>加权筛选，简化因子状态表</strong> —— 在实际软件测试中，软件的因子及因子的状态会有很多，每个因子及其状态对软件的作用也大不相同，如果把这些因子及状态都划分到<strong>因子-状态表</strong>中，最后生成的测试用例会相当庞大，从而影响软件测试的效率。因此需要根据因子及状态的重要程度进行加权筛选，选出重要的因子与状态，简化因子-状态表。</p><p><strong>（3）举个栗子（步骤三）：</strong></p><p><strong>构建正交表，设计测试用例</strong> —— 正交表的表示形式为 <strong>L<sub>n</sub>(t<sup>c</sup>)</strong> 来表示。</p><ul><li>L 表示正交表。</li><li>n 为正交表的行数，正交表的每一行可以设计一个测试用例，因此行数 n 也表示可以设计的测试用例的数目。</li><li>c 表示正交实验的因子数目，即正交表的列数，因此正交表是一个 n 行 c 列的表。</li><li>t 称为水平数，表示每个因子能够取得的最大值，即因子有多少个状态。</li><li>在行数为 n(n 为正整数)的正交表中，<strong>行数 n（试验次数）=∑（每列水平数 t-1）+1</strong>。如： ①<strong>L<sub>8</sub>(2<sup>7</sup>)</strong>，n=7×(2-1)+1=8；②<strong>L<sub>4</sub>(2<sup>3</sup>)</strong>，n=3×(2-1)+1=4。</li></ul><p><strong>下面举出两个例子辅助理解：</strong><strong>例 1：</strong><strong>L<sub>4</sub>(2<sup>3</sup>)</strong> 是最简单的正交表，它表示该实验有 3 个因子，每个因子有两个状态，可以做 4 次实验，如果用 0 和 1 表示每个因子的两种状态，则该正交表就是一个 4 行 3 列的表。 <strong>正交表如下图所示：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270915503.png" alt="正交表实验"></p><p><strong>例 2：</strong> 在实际软件测试中，大多数情况下，软件有多个因子，每个因子的状态数目都不相同，即各列的水平数不等，这样的正交表称为<strong>混合正交表</strong>，如<strong>L<sub>8</sub>(2<sup>4</sup> + 4<sup>1</sup>)</strong> ，这个正交表表示有 4 个因子有 2 种状态，有 1 个因子有 4 种状态。 那么正交表的行数为 <code>n= ∑（每列水平数t-1）+ 1 = (2-1)×4 + (4-1)×1 + 1 = 8</code>，这个 n 值的计算如果发生在大型项目时往往是很难计算的。 所以，混合正交表往往难以确定测试用例的数目，即 n 的值。因此，在这种情况下，可以登录正交表的一些权威网站，查询 n 值，下面给大家提供一个<a href="https://support.sas.com/techsup/technote/ts723_Designs.txt" target="_blank" rel="noreferrer">正交表查询网站</a>， 在这里，可以查询到不同因子数、不同水平数的正交表的 n 值。 <strong>最终得出，该混合正交表如下图所示：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270915032.png" alt="混合正交表"></p><h2 id="_4、正交表的特点" tabindex="-1">4、正交表的特点 <a class="header-anchor" href="#_4、正交表的特点" aria-label="Permalink to &quot;4、正交表的特点&quot;">​</a></h2><p>正交表最大的特点是取点<strong>均匀分散</strong>、<strong>齐整可比</strong>，每一列中每种数字出现的次数都相等，即每种状态的取值次数相等。</p><h2 id="_5、总结" tabindex="-1">5、总结 <a class="header-anchor" href="#_5、总结" aria-label="Permalink to &quot;5、总结&quot;">​</a></h2><p><strong>写到这里，对正交实验设计法做个小结：</strong></p><ul><li>在正交表中，每个因子的每个水平与另一个因子的各水平都“交互”一次，这就是正交性，它保证了实验点均匀分散在因子与水平的组合之中，因此具有很强的代表性。</li><li>对于受<strong>多因子多水平</strong>影响的软件，正交实验法可以<strong>高效适量的</strong>生成测试用例，减少测试工作量，并且利用正交实验法得到的测试用例具有<strong>一定的覆盖度</strong>，<strong>检错率可达 50%以上</strong>。</li><li>正交实验法虽然好用，但在选择正交表时要注意先要确定<strong>实验因子</strong>、<strong>状态</strong>及它们之间的<strong>交互作用</strong>，选择合适的正交表，同时还要考虑实验的精度要求、费用、时长等因素。</li></ul><h2 id="_6、案例-微信-web-页面运行环境正交试验设计" tabindex="-1">6、案例：微信 Web 页面运行环境正交试验设计 <a class="header-anchor" href="#_6、案例-微信-web-页面运行环境正交试验设计" aria-label="Permalink to &quot;6、案例：微信 Web 页面运行环境正交试验设计&quot;">​</a></h2><p>微信是一款手机 App 软件，但它也有 web 版微信可以登录，如果要测试微信 web 页面运行环境，需要考虑多种因素，在众多的因素中，我们可以选出几个影响比较大的因素，如服务器、操作系统，插件和浏览器。利用<strong>正交实验设计法</strong>设计该软件的测试用例。</p><blockquote><p><strong>具体解析如下：</strong> &gt; <strong>（1）提取因子，构造因子状态表</strong></p><ul><li><p>对于选取出的 4 个影响因素，每个因素又有不同的取值，同样，在每个因素的多个值中，可以选出几个比较重要的值。如：</p><ul><li><p>服务器：IIS、Apache、Jetty；</p></li><li><p>操作系统：Windows7、Windows10、Mac；</p></li><li><p>插件：无、小程序、微信插件；</p></li><li><p>浏览器：IE11、Chrome、FireFox；</p></li></ul></li><li><p><strong>构造的因子状态表如下：</strong></p></li></ul><table><thead><tr><th style="text-align:center;">因子</th><th style="text-align:center;"></th><th style="text-align:center;">因子的状态</th><th style="text-align:center;"></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>操作系统</strong></td><td style="text-align:center;">IIS</td><td style="text-align:center;">Apache</td><td style="text-align:center;">Jetty</td></tr><tr><td style="text-align:center;"><strong>数据库</strong></td><td style="text-align:center;">Windows7</td><td style="text-align:center;">Windows10</td><td style="text-align:center;">Mac</td></tr><tr><td style="text-align:center;">插件</td><td style="text-align:center;">无</td><td style="text-align:center;">小程序</td><td style="text-align:center;">微信插件</td></tr><tr><td style="text-align:center;">浏览器</td><td style="text-align:center;">IE11</td><td style="text-align:center;">Chrome</td><td style="text-align:center;">FireFox</td></tr></tbody></table><p><strong>（2）加权筛选，简化因子状态表</strong></p><ul><li>微信 web 版运行环境正交实验中有 4 个因子：服务器、操作系统、插件、浏览器，每个因子又有 3 个水平，因此该正交表是一个 4 因子 3 水平正交表。</li><li>所以正交表的行数为 <code>n= ∑（每列水平数t-1）+ 1 = (3-1)×4 + 1 = 9</code>，因此正交表的表示形式为<strong>L<sub>9</sub>(3<sup>4</sup>)</strong>。</li><li>得出 n=9 后，<a href="https://support.sas.com/techsup/technote/ts723_Designs.txt" target="_blank" rel="noreferrer">查表</a>可得，简化后的因子状态表如下：</li></ul><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270916898.png" alt="web微信简化后的因子状态表"></p><p><strong>（3)构建正交表，设计测试用例</strong></p><ul><li>将因子、状态映射到正交表，可生成具体的测试用例，具体如下表：</li></ul><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270916691.png" alt=""></p></blockquote><h1 id="七、场景法" tabindex="-1">七、场景法 <a class="header-anchor" href="#七、场景法" aria-label="Permalink to &quot;七、场景法&quot;">​</a></h1><h2 id="_1、设计思想" tabindex="-1">1、设计思想 <a class="header-anchor" href="#_1、设计思想" aria-label="Permalink to &quot;1、设计思想&quot;">​</a></h2><p>现在的软件几乎都是由<strong>事件</strong>来触发的，事情触发便形成了<strong>场景</strong>，而同一事件不同的触发顺序和处理结果就形成了<strong>事件流</strong>。</p><h2 id="_2、场景的构成要素" tabindex="-1">2、场景的构成要素 <a class="header-anchor" href="#_2、场景的构成要素" aria-label="Permalink to &quot;2、场景的构成要素&quot;">​</a></h2><p>场景可以看成是<code>基本流与备选流</code>的集合。用例的场景用来描述流经用例的<code>路径</code>，从用例的开始到结束遍历这条路径上所有的基本流和备选流。</p><h3 id="_1-基本流" tabindex="-1">（1）基本流 <a class="header-anchor" href="#_1-基本流" aria-label="Permalink to &quot;（1）基本流&quot;">​</a></h3><p>基本事件流，从系统某个初始状态开始，经一系列状态后，到达最终状态的一个业务流程，并且是<strong>最主要</strong>、<strong>最基本</strong>的一个业务流程（<strong>无任何差错，程序从开始直接到执行结束</strong>）。</p><h3 id="_2-场景流" tabindex="-1">（2）场景流 <a class="header-anchor" href="#_2-场景流" aria-label="Permalink to &quot;（2）场景流&quot;">​</a></h3><p>备选事件流，<strong>以基本流为基础</strong>，在基本流所经过的每个判定节点处满足不同的触发条件而导致的其他事件流。</p><h2 id="_3、基本流和备选流的场景说明" tabindex="-1">3、基本流和备选流的场景说明 <a class="header-anchor" href="#_3、基本流和备选流的场景说明" aria-label="Permalink to &quot;3、基本流和备选流的场景说明&quot;">​</a></h2><p>先用一张图来描述基本流和备选流的流程。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270916656.png" alt="基本流和备选流的绘制"></p><p>从上图可以看出，图中经过用例的每条路径都用<strong>基本流</strong>和<strong>备选流</strong>来表示。</p><p>基本流：采用<strong>直黑线</strong>表示，是经过用例的<strong>最简单的路径</strong>。</p><p>备选流：采用<strong>不同色彩</strong>表示，一个备选流可能从基本流开始，在某个特定条件下执行，然后重新加入基本流中（如备选流 1 和 3）；也可能起源于另一个备选流（如备选流 2），或者终止用例而不再重新加入到某个流（如备选流 2 和 4）。</p><p>根据图中每条经过的可能路径，从基本流开始，再经过基本流、备选流的综合，可以<strong>确定不同的用例场景，如下</strong>：</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202305270917667.png" alt="基本流和备选流的场景"></p><p>基于以上例子，可以得出以下<strong>结论</strong>：基本流只有一个，而备选流的数目则取决于基本流上<strong>判定节点的数目</strong>与<strong>事务分析的颗粒度</strong>，颗粒度越细，考虑越周全，得到的备选流数目就越多，相应的测试工作量就越大。</p><h2 id="_4、设计测试用例-1" tabindex="-1">4、设计测试用例 <a class="header-anchor" href="#_4、设计测试用例-1" aria-label="Permalink to &quot;4、设计测试用例&quot;">​</a></h2><p><strong>场景法设计测试用例的基本步骤如下：</strong></p><p>（<strong>1</strong>）根据需求规格说明，描述出程序的基本流及各项备选流。</p><p>（<strong>2</strong>）根据基本流和各项备选流生成不同的场景。</p><p>（<strong>3</strong>）对每一个场景生成相应的测试用例。</p><p>（<strong>4</strong>）对生成的所有测试用例重新复审，去掉多余的测试用例。测试用例确定后，对每一个测试用例确定测试数据值。</p><h2 id="_5、总结-1" tabindex="-1">5、总结 <a class="header-anchor" href="#_5、总结-1" aria-label="Permalink to &quot;5、总结&quot;">​</a></h2><p><strong>写到这里，对场景法做个小结：</strong></p><ul><li>场景法<strong>以事件流和场景为核心</strong>，又被称为<strong>业务流程测试法</strong>，要求测试人员使用场景法设计测试用例时把自己当成<strong>最终用户</strong>，尽可能真实地模拟用户在使用此软件时的操作情形。</li><li>在测试过程中，测试人员需要模拟两个方面的业务：<strong>正确的操作流程</strong>和<strong>可能出现的错误操作</strong>。</li><li>它适用于业务比较复杂的软件系统测试。</li></ul><h2 id="_6、案例-在线购物案例" tabindex="-1">6、案例：在线购物案例 <a class="header-anchor" href="#_6、案例-在线购物案例" aria-label="Permalink to &quot;6、案例：在线购物案例&quot;">​</a></h2><p>有一个在线购物的实例：用户进入一个在线购物网站进行购物，选购物品后，进行在线购买，这时需要使用账号登录；登录成功后，进行付钱交易；交易成功后，生成订购单；完成整个购物过程。请使用<strong>场景法</strong>设计测试用例。</p><blockquote><p><strong>案例解析如下：</strong></p><p><strong>（1）确定基本流和备选流</strong></p><ul><li>基本流：登录在线购物网站，选择物品，登录账号，付钱交易，生成订购单。</li><li>备选流 1：账号不存在。</li><li>备选流 2：密码错误。</li><li>备选流 3：货物库存不足。</li><li>备选流 4：账号余额不足。</li></ul><p><strong>（2）根据基本流和备选流来确定场景，如下表：</strong></p><p><strong>表</strong> 购物系统场景表</p><table><thead><tr><th style="text-align:center;">场景 1：成功购物</th><th style="text-align:center;">基本流</th></tr></thead><tbody><tr><td style="text-align:center;">场景 2：账号不存在</td><td style="text-align:center;">备选流 1</td></tr><tr><td style="text-align:center;">场景 3：密码错误</td><td style="text-align:center;">备选流 2</td></tr><tr><td style="text-align:center;">场景 4：货物库存不足</td><td style="text-align:center;">备选流 3</td></tr><tr><td style="text-align:center;">场景 5：用户账号余额不足</td><td style="text-align:center;">备选流 4</td></tr></tbody></table><p><strong>（3）根据每一个场景，设计需要的测试用例</strong></p><p>【解析】</p><p>可以采用<strong>矩阵</strong>或<strong>判定表</strong>来确定和管理测试用例，下面介绍一种通用的格式，其中各行代表各个测试用例，而各列则代表测试用例的信息。 在矩阵中，</p><ul><li>V（有效）用于表明这个条件必须是 VALID（有效的）才可执行基本流；</li><li>I（无效）用于表明这种条件下将激活所需备选流；</li><li>N/A(不适用)表明这个条件不适用于测试用例。</li></ul><p><strong>购物系统场景矩阵见下表：</strong></p><p><strong>表</strong> 购物系统场景矩阵</p><table><thead><tr><th style="text-align:center;">测试用例 ID</th><th style="text-align:center;">场景</th><th style="text-align:center;">账号</th><th style="text-align:center;">密码</th><th style="text-align:center;">购买商品数量</th><th style="text-align:center;">商品库存数量</th><th style="text-align:center;">用户账号余额</th><th style="text-align:center;">预期结果</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">场景 1：成功购物</td><td style="text-align:center;">V</td><td style="text-align:center;">V</td><td style="text-align:center;">V</td><td style="text-align:center;">V</td><td style="text-align:center;">V</td><td style="text-align:center;">成功购物</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">场景 2：账号不存在</td><td style="text-align:center;">I</td><td style="text-align:center;">N/A</td><td style="text-align:center;">N/A</td><td style="text-align:center;">N/A</td><td style="text-align:center;">N/A</td><td style="text-align:center;">提示账号不存在</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">场景 3：密码错误</td><td style="text-align:center;">V</td><td style="text-align:center;">I</td><td style="text-align:center;">N/A</td><td style="text-align:center;">N/A</td><td style="text-align:center;">N/A</td><td style="text-align:center;">提示密码输入有误</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">场景 4：购买商品库存不足</td><td style="text-align:center;">V</td><td style="text-align:center;">V</td><td style="text-align:center;">V</td><td style="text-align:center;">I</td><td style="text-align:center;">N/A</td><td style="text-align:center;">提示库存不足</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">场景 5：用户账号余额不足</td><td style="text-align:center;">V</td><td style="text-align:center;">V</td><td style="text-align:center;">V</td><td style="text-align:center;">V</td><td style="text-align:center;">I</td><td style="text-align:center;">提示账号余额不足</td></tr></tbody></table><p><strong>（4）设计具体的测试用例数据（假设所购物品单价为 30 元）</strong></p><p><strong>表</strong> 购物系统具体测试用例</p><table><thead><tr><th style="text-align:center;"><strong>场景</strong></th><th style="text-align:center;"><strong>测试用例 ID</strong></th><th style="text-align:center;"><strong>账号</strong></th><th style="text-align:center;"><strong>密码</strong></th><th style="text-align:center;"><strong>购买商品数量</strong></th><th style="text-align:center;"><strong>商品库存数量</strong></th><th style="text-align:center;"><strong>用户账号余额</strong></th><th style="text-align:center;"><strong>预期结果</strong></th></tr></thead><tbody><tr><td style="text-align:center;">场景 1：成功购物</td><td style="text-align:center;">1</td><td style="text-align:center;">admin123</td><td style="text-align:center;">test123</td><td style="text-align:center;">10 件</td><td style="text-align:center;">50 件</td><td style="text-align:center;">2000 元</td><td style="text-align:center;">成功购物</td></tr><tr><td style="text-align:center;">场景 2：账号不存在</td><td style="text-align:center;">2</td><td style="text-align:center;">admin</td><td style="text-align:center;">N/A</td><td style="text-align:center;">N/A</td><td style="text-align:center;">N/A</td><td style="text-align:center;">N/A</td><td style="text-align:center;">提示账号不存在</td></tr><tr><td style="text-align:center;">场景 3：密码错误</td><td style="text-align:center;">3</td><td style="text-align:center;">admin123</td><td style="text-align:center;">test</td><td style="text-align:center;">N/A</td><td style="text-align:center;">N/A</td><td style="text-align:center;">N/A</td><td style="text-align:center;">提示密码输入有误</td></tr><tr><td style="text-align:center;">场景 4：购买商品库存不足</td><td style="text-align:center;">4</td><td style="text-align:center;">admin123</td><td style="text-align:center;">test123</td><td style="text-align:center;">60 件</td><td style="text-align:center;">50 件</td><td style="text-align:center;">N/A</td><td style="text-align:center;">提示库存不足</td></tr><tr><td style="text-align:center;">场景 5：用户账号余额不足</td><td style="text-align:center;">5</td><td style="text-align:center;">admin123</td><td style="text-align:center;">test123</td><td style="text-align:center;">10 件</td><td style="text-align:center;">50 件</td><td style="text-align:center;">200 元</td><td style="text-align:center;">提示账号余额不足</td></tr></tbody></table></blockquote><h1 id="八、功能图法" tabindex="-1">八、功能图法 <a class="header-anchor" href="#八、功能图法" aria-label="Permalink to &quot;八、功能图法&quot;">​</a></h1><p>此处还未学习明白，静待后续更新……</p><h1 id="九、黑盒测试方法策略总结" tabindex="-1">九、黑盒测试方法策略总结 <a class="header-anchor" href="#九、黑盒测试方法策略总结" aria-label="Permalink to &quot;九、黑盒测试方法策略总结&quot;">​</a></h1><p>写到这里，对上面八大黑盒测试方法做个小结。</p><h2 id="_1、各种测试方法选择的综合策略" tabindex="-1">1、各种测试方法选择的综合策略 <a class="header-anchor" href="#_1、各种测试方法选择的综合策略" aria-label="Permalink to &quot;1、各种测试方法选择的综合策略&quot;">​</a></h2><p>（<strong>1</strong>）<strong>首先进行等价类划分</strong>，包括输入条件和输出条件的等价划分，将无限测试变成有限测试，这是减少工作量和提高测试效率最有效的方法。</p><p>（<strong>2</strong>） <strong>在任何情况下都必须使用边界值分析方法</strong>。经验表明，用这种方法设计出的测试用例发现程序错误的能力最强。</p><p>（<strong>3</strong>）<strong>可以用错误推测法追加一些测试用例</strong>，这需要依靠测试工程师的智慧和经验。</p><p>（<strong>4</strong>）<strong>对照程序逻辑，检查已设计出的测试用例的逻辑覆盖程度</strong>。如果没有达到要求的覆盖标准，应当再补充足够的测试用例。</p><p>（<strong>5</strong>）如果程序的功能说明中含有输入条件的组合情况，则一开始就可选用<strong>因果图法</strong>和<strong>判定表</strong>。</p><p>（<strong>6</strong>）对于参数配置类的软件，要用<strong>正交试验法</strong>选择较少的组合方式达到最佳效果。</p><p>（<strong>7</strong>）对于业务流清晰的软件，可以使用<strong>场景</strong>贯穿测试，再综合使用各种测试方法。</p><h2 id="_2、黑盒测试的优缺点" tabindex="-1">2、黑盒测试的优缺点 <a class="header-anchor" href="#_2、黑盒测试的优缺点" aria-label="Permalink to &quot;2、黑盒测试的优缺点&quot;">​</a></h2><p><strong>（1）优点</strong>：<strong>①</strong>对较大的<strong>代码单元</strong>来说，黑盒测试比白盒测试的效率高 ，测试人员不需要了解实现的细节，包括特定的编程语言；<strong>②</strong>测试人员和编程人员是相互独立的，从用户的角度进行测试，很容易被接受和理解，有助于暴露任何与规格不一致或者歧异的地方，测试用例可以在规格完成后马上进行。</p><p><strong>（2）缺点</strong>：不能测试<strong>程序内部特定部位</strong>，比如程序未执行的代码，这些代码得不到测试，则无法发现错误。若没有清晰的和简明的规格，测试用例很难被设计，不易进行充分性测试。</p><h1 id="十、写在最后" tabindex="-1">十、写在最后 <a class="header-anchor" href="#十、写在最后" aria-label="Permalink to &quot;十、写在最后&quot;">​</a></h1><p>黑盒测试相较于白盒测试来说比较简单，不需要了解程序内部的代码，与软件的内部实现无关；从用户角度出发，能很容易的知道用户会使用到哪些功能，会遇到哪些问题；并且是基于软件开发文档做的相关测试，能较清楚地了解软件实现了文档中的哪些功能。 八大典型的黑盒测试方法讲解到这里就结束啦！如有不理解或者有误的地方欢迎私聊或加我微信指正~ 下一篇文章将讲解白盒测试。 如果想查看往期文章，也可以直接点击进入<a href="https://blog.csdn.net/weixin_44803753/category_10923158.html?spm=1001.2014.3001.5482" target="_blank" rel="noreferrer">软件测试栏目</a>。</p>`,200),g=[s];function a(d,i,o,c,y,x){return e(),n("div",null,g)}const u=t(r,[["render",a]]);export{p as __pageData,u as default};
