import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.98c15f2e.js";const d=JSON.parse('{"title":"机器学习与神经网络简介","description":"","frontmatter":{"title":"机器学习与神经网络简介","author":"周一","date":"2023-08-05","categories":["人工智能"],"tags":["机器学习"],"sidebar":"auto"},"headers":[{"level":1,"title":"一、归一化任务简介","slug":"一、归一化任务简介","link":"#一、归一化任务简介","children":[{"level":2,"title":"1、什么是归一化","slug":"_1、什么是归一化","link":"#_1、什么是归一化","children":[]},{"level":2,"title":"2、为何要归一化？","slug":"_2、为何要归一化","link":"#_2、为何要归一化","children":[]},{"level":2,"title":"3、归一化操作步骤","slug":"_3、归一化操作步骤","link":"#_3、归一化操作步骤","children":[]}]},{"level":1,"title":"二、归一化训练数据","slug":"二、归一化训练数据","link":"#二、归一化训练数据","children":[{"level":2,"title":"1、操作步骤","slug":"_1、操作步骤","link":"#_1、操作步骤","children":[]},{"level":2,"title":"2、训练过程","slug":"_2、训练过程","link":"#_2、训练过程","children":[]}]},{"level":1,"title":"三、训练、预测、反归一化","slug":"三、训练、预测、反归一化","link":"#三、训练、预测、反归一化","children":[{"level":2,"title":"1、操作步骤","slug":"_1、操作步骤-1","link":"#_1、操作步骤-1","children":[]},{"level":2,"title":"2、训练过程","slug":"_2、训练过程-1","link":"#_2、训练过程-1","children":[]}]}],"relativePath":"column/MachineLearning/Tensorflow/04_normalization.md","filePath":"column/MachineLearning/Tensorflow/04_normalization.md","lastUpdated":1720881464000}'),p={name:"column/MachineLearning/Tensorflow/04_normalization.md"},o=l(`<h1 id="一、归一化任务简介" tabindex="-1">一、归一化任务简介 <a class="header-anchor" href="#一、归一化任务简介" aria-label="Permalink to &quot;一、归一化任务简介&quot;">​</a></h1><h2 id="_1、什么是归一化" tabindex="-1">1、什么是归一化 <a class="header-anchor" href="#_1、什么是归一化" aria-label="Permalink to &quot;1、什么是归一化&quot;">​</a></h2><ul><li>归一化，指的是把大数量级特征转化到较小的数量级下，通常是<code>[0, 1]</code>或<code>[-1, 1]</code>。</li><li>举个例子，比如说我们想把<strong>身高体重预测</strong>归一化，那么就需要把<strong>身高体重的数据</strong>，给压缩到<code>[0, 1]</code>或者<code>[-1, 1]</code>之间。</li><li>再比如说，想把<strong>房价预测</strong>问题给归一化，那么就需要把影响房价的数据给压缩到<code>[0, 1]</code>或者<code>[-1, 1]</code>之间。</li></ul><h2 id="_2、为何要归一化" tabindex="-1">2、为何要归一化？ <a class="header-anchor" href="#_2、为何要归一化" aria-label="Permalink to &quot;2、为何要归一化？&quot;">​</a></h2><ul><li><strong>绝大多数Tesorflow.js的模型都不是给特别大的数设计的</strong> —— 拿房价预测来说，它的数据有可能是上万的房价以及房屋面积，而根据单位的不同，它们的数量级也有可能非常大，比如说房价可能是几百万，房屋面积可能是几百平方米，这些数量级都很大。那为了能让<code>Tensorflow.js</code>的模型可以更好地进行训练，进行预测，我们最好就还是要把这些数据集<strong>先压缩一下</strong>，然后再喂给模型，让他去训练，去学习。</li><li>将<strong>不同数量级的特征</strong>转换到<strong>同一数量级</strong>，防止某个特征影响过大 —— 同样拿房价预测来讲，有可能压缩过后的数据，有些很大，有些又小了。那为了方便计算，就需要将它们都一起，转换到<strong>同一数量级</strong>，让后面可以更好地计算。</li></ul><h2 id="_3、归一化操作步骤" tabindex="-1">3、归一化操作步骤 <a class="header-anchor" href="#_3、归一化操作步骤" aria-label="Permalink to &quot;3、归一化操作步骤&quot;">​</a></h2><p>上面了解了归一化是什么，下面谈谈归一化的过程。<strong>如下：</strong></p><ul><li>首先先准备<strong>身高体重训练数据</strong>并归一化</li><li>训练模型并预测，将结果<strong>反归一化</strong>为正常数据</li></ul><h1 id="二、归一化训练数据" tabindex="-1">二、归一化训练数据 <a class="header-anchor" href="#二、归一化训练数据" aria-label="Permalink to &quot;二、归一化训练数据&quot;">​</a></h1><p>下面，我们将用<code>tensorflow.js</code>，来归一化整个训练数据。</p><h2 id="_1、操作步骤" tabindex="-1">1、操作步骤 <a class="header-anchor" href="#_1、操作步骤" aria-label="Permalink to &quot;1、操作步骤&quot;">​</a></h2><ul><li>准备身高体重训练数据</li><li>使用<code>tfvis</code>来可视化训练数据</li><li>使用<code>Tensorflow.js</code>的<code>API</code>进行归一化</li></ul><h2 id="_2、训练过程" tabindex="-1">2、训练过程 <a class="header-anchor" href="#_2、训练过程" aria-label="Permalink to &quot;2、训练过程&quot;">​</a></h2><p>具体代码如下👇🏻：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> tf </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@tensorflow/tfjs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> tfvis </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@tensorflow/tfjs-vis&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">onload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">heights</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">150</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">160</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">170</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">weights</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  tfvis.render.</span><span style="color:#B392F0;">scatterplot</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    { name: </span><span style="color:#9ECBFF;">&#39;身高体重训练数据&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    { values: heights.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({ x, y: weights[i] })) },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置x轴和y轴的范围</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      xAxisDomain: [</span><span style="color:#79B8FF;">140</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">180</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      yAxisDomain: [</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">70</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 让每一个身高数据，分别减去150，然后再除以20</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">inputs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.</span><span style="color:#B392F0;">tensor</span><span style="color:#E1E4E8;">(heights).</span><span style="color:#B392F0;">sub</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">150</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">div</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 让每一个体重数据，分别减去40，然后再除以20</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">labels</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.</span><span style="color:#B392F0;">tensor</span><span style="color:#E1E4E8;">(weights).</span><span style="color:#B392F0;">sub</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">div</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> tf </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@tensorflow/tfjs&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> tfvis </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@tensorflow/tfjs-vis&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">onload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">heights</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">150</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">160</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">170</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">weights</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  tfvis.render.</span><span style="color:#6F42C1;">scatterplot</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;身高体重训练数据&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { values: heights.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({ x, y: weights[i] })) },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置x轴和y轴的范围</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      xAxisDomain: [</span><span style="color:#005CC5;">140</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">180</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      yAxisDomain: [</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">70</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 让每一个身高数据，分别减去150，然后再除以20</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">inputs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.</span><span style="color:#6F42C1;">tensor</span><span style="color:#24292E;">(heights).</span><span style="color:#6F42C1;">sub</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">150</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">div</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 让每一个体重数据，分别减去40，然后再除以20</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">labels</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.</span><span style="color:#6F42C1;">tensor</span><span style="color:#24292E;">(weights).</span><span style="color:#6F42C1;">sub</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">div</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>最终展示效果如下👇🏻：</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202407132124982.png" alt="img"></p><p>可以看到，每个点都正确渲染了。</p><h1 id="三、训练、预测、反归一化" tabindex="-1">三、训练、预测、反归一化 <a class="header-anchor" href="#三、训练、预测、反归一化" aria-label="Permalink to &quot;三、训练、预测、反归一化&quot;">​</a></h1><p>上面我们对数据进行了归一化，接下来，要把这些数据做进一步的<strong>训练</strong>、<strong>预测</strong>，以及<strong>反归一化</strong>。</p><h2 id="_1、操作步骤-1" tabindex="-1">1、操作步骤 <a class="header-anchor" href="#_1、操作步骤-1" aria-label="Permalink to &quot;1、操作步骤&quot;">​</a></h2><ul><li>定义一个神经网络模型</li><li>将归一化后的数据喂给模型学习——训练模型</li><li>预测后，把结果反归一化为正常数据</li></ul><h2 id="_2、训练过程-1" tabindex="-1">2、训练过程 <a class="header-anchor" href="#_2、训练过程-1" aria-label="Permalink to &quot;2、训练过程&quot;">​</a></h2><p>首先创建个文件，命名为<code>script.js</code>。具体代码如下：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> tf </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@tensorflow/tfjs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> tfvis </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@tensorflow/tfjs-vis&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">onload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">heights</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">150</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">160</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">170</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">weights</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  tfvis.render.</span><span style="color:#B392F0;">scatterplot</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    { name: </span><span style="color:#9ECBFF;">&#39;身高体重训练数据&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    { values: heights.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({ x, y: weights[i] })) },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置x轴和y轴的范围</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      xAxisDomain: [</span><span style="color:#79B8FF;">140</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">180</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      yAxisDomain: [</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">70</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 让每一个身高数据，分别减去150，然后再除以20</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">inputs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.</span><span style="color:#B392F0;">tensor</span><span style="color:#E1E4E8;">(heights).</span><span style="color:#B392F0;">sub</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">150</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">div</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 让每一个体重数据，分别减去40，然后再除以20</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">labels</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.</span><span style="color:#B392F0;">tensor</span><span style="color:#E1E4E8;">(weights).</span><span style="color:#B392F0;">sub</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">div</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 定义模型结构</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">model</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.</span><span style="color:#B392F0;">sequential</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  model.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(tf.layers.</span><span style="color:#B392F0;">dense</span><span style="color:#E1E4E8;">({ units: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, inputShape: [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] }));</span></span>
<span class="line"><span style="color:#E1E4E8;">  model.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    loss: tf.losses.meanSquaredError,</span></span>
<span class="line"><span style="color:#E1E4E8;">    optimizer: tf.train.</span><span style="color:#B392F0;">sgd</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> model.</span><span style="color:#B392F0;">fit</span><span style="color:#E1E4E8;">(inputs, labels, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 训练数据只有3个，所以这里设置为3。如果不设置的情况下，初始值是32</span></span>
<span class="line"><span style="color:#E1E4E8;">    batchSize: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    epochs: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    callbacks: tfvis.show.</span><span style="color:#B392F0;">fitCallbacks</span><span style="color:#E1E4E8;">({ name: </span><span style="color:#9ECBFF;">&#39;训练过程&#39;</span><span style="color:#E1E4E8;"> }, [</span><span style="color:#9ECBFF;">&#39;loss&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">output</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> model.</span><span style="color:#B392F0;">predict</span><span style="color:#E1E4E8;">(tf.</span><span style="color:#B392F0;">tensor</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">180</span><span style="color:#E1E4E8;">]).</span><span style="color:#B392F0;">sub</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">150</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">div</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 上面是先归一化预测，然后拿到数据结构后，这里再反归一化</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`如果身高为 180cm，那么预测体重为 \${</span><span style="color:#E1E4E8;">output</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">mul</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">20</span><span style="color:#9ECBFF;">).</span><span style="color:#B392F0;">add</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">40</span><span style="color:#9ECBFF;">).</span><span style="color:#B392F0;">dataSync</span><span style="color:#9ECBFF;">()[</span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">]</span><span style="color:#9ECBFF;">}kg\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> tf </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@tensorflow/tfjs&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> tfvis </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@tensorflow/tfjs-vis&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">onload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">heights</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">150</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">160</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">170</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">weights</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  tfvis.render.</span><span style="color:#6F42C1;">scatterplot</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;身高体重训练数据&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { values: heights.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({ x, y: weights[i] })) },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置x轴和y轴的范围</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      xAxisDomain: [</span><span style="color:#005CC5;">140</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">180</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      yAxisDomain: [</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">70</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 让每一个身高数据，分别减去150，然后再除以20</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">inputs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.</span><span style="color:#6F42C1;">tensor</span><span style="color:#24292E;">(heights).</span><span style="color:#6F42C1;">sub</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">150</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">div</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 让每一个体重数据，分别减去40，然后再除以20</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">labels</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.</span><span style="color:#6F42C1;">tensor</span><span style="color:#24292E;">(weights).</span><span style="color:#6F42C1;">sub</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">div</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 定义模型结构</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">model</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.</span><span style="color:#6F42C1;">sequential</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  model.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(tf.layers.</span><span style="color:#6F42C1;">dense</span><span style="color:#24292E;">({ units: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, inputShape: [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] }));</span></span>
<span class="line"><span style="color:#24292E;">  model.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    loss: tf.losses.meanSquaredError,</span></span>
<span class="line"><span style="color:#24292E;">    optimizer: tf.train.</span><span style="color:#6F42C1;">sgd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> model.</span><span style="color:#6F42C1;">fit</span><span style="color:#24292E;">(inputs, labels, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 训练数据只有3个，所以这里设置为3。如果不设置的情况下，初始值是32</span></span>
<span class="line"><span style="color:#24292E;">    batchSize: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    epochs: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    callbacks: tfvis.show.</span><span style="color:#6F42C1;">fitCallbacks</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;训练过程&#39;</span><span style="color:#24292E;"> }, [</span><span style="color:#032F62;">&#39;loss&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">output</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model.</span><span style="color:#6F42C1;">predict</span><span style="color:#24292E;">(tf.</span><span style="color:#6F42C1;">tensor</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">180</span><span style="color:#24292E;">]).</span><span style="color:#6F42C1;">sub</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">150</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">div</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 上面是先归一化预测，然后拿到数据结构后，这里再反归一化</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`如果身高为 180cm，那么预测体重为 \${</span><span style="color:#24292E;">output</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">mul</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">20</span><span style="color:#032F62;">).</span><span style="color:#6F42C1;">add</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">40</span><span style="color:#032F62;">).</span><span style="color:#6F42C1;">dataSync</span><span style="color:#032F62;">()[</span><span style="color:#005CC5;">0</span><span style="color:#032F62;">]</span><span style="color:#032F62;">}kg\`</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>在<code>index.html</code>文件引入，<strong>代码如下：</strong></p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;script.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;script.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>最终我们来看下效果：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202407132124336.png" alt="img"></p><p>至此，我们就完成了整个归一化的过程，并成功预测到了数据。</p>`,30),e=[o];function c(r,t,E,y,i,F){return n(),a("div",null,e)}const u=s(p,[["render",c]]);export{d as __pageData,u as default};
