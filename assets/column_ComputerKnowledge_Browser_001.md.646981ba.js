import{_ as e,c as o,o as t,N as s}from"./chunks/framework.6510d215.js";const u=JSON.parse('{"title":"解决浏览器存储问题，不得不了解的cookie,localStorage和sessionStorage","description":"","frontmatter":{"title":"解决浏览器存储问题，不得不了解的cookie,localStorage和sessionStorage","author":"周一","date":"2021-06-14","categories":["计算机基础知识"],"tags":["浏览器原理"],"sidebar":"auto"},"headers":[{"level":1,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":1,"title":"一、浏览器存储的方式","slug":"一、浏览器存储的方式","link":"#一、浏览器存储的方式","children":[]},{"level":1,"title":"二、cookie、localStorage 和 sessionStorage","slug":"二、cookie、localstorage-和-sessionstorage","link":"#二、cookie、localstorage-和-sessionstorage","children":[{"level":2,"title":"1、cookie、localStorage 和 sessionStorage 是什么？","slug":"_1、cookie、localstorage-和-sessionstorage-是什么","link":"#_1、cookie、localstorage-和-sessionstorage-是什么","children":[{"level":3,"title":"（1）cookie","slug":"_1-cookie","link":"#_1-cookie","children":[]},{"level":3,"title":"（2）localStorage","slug":"_2-localstorage","link":"#_2-localstorage","children":[]},{"level":3,"title":"（3）sessionStorage","slug":"_3-sessionstorage","link":"#_3-sessionstorage","children":[]}]},{"level":2,"title":"2、cookie、localStorage 和 sessionStorage 的异同点","slug":"_2、cookie、localstorage-和-sessionstorage-的异同点","link":"#_2、cookie、localstorage-和-sessionstorage-的异同点","children":[{"level":3,"title":"（1）三者的相同点在于：","slug":"_1-三者的相同点在于","link":"#_1-三者的相同点在于","children":[]},{"level":3,"title":"（2）三者的区别在于：","slug":"_2-三者的区别在于","link":"#_2-三者的区别在于","children":[]}]},{"level":2,"title":"3、cookie 的用途","slug":"_3、cookie-的用途","link":"#_3、cookie-的用途","children":[{"level":3,"title":"（1）保存用户登录状态","slug":"_1-保存用户登录状态","link":"#_1-保存用户登录状态","children":[]},{"level":3,"title":"（2）跟踪用户行为","slug":"_2-跟踪用户行为","link":"#_2-跟踪用户行为","children":[]}]}]},{"level":1,"title":"三、session 和 token","slug":"三、session-和-token","link":"#三、session-和-token","children":[{"level":3,"title":"（1）Session","slug":"_1-session","link":"#_1-session","children":[]},{"level":3,"title":"（2）Token","slug":"_2-token","link":"#_2-token","children":[]}]},{"level":1,"title":"四、结束语","slug":"四、结束语","link":"#四、结束语","children":[]}],"relativePath":"column/ComputerKnowledge/Browser/001.md","lastUpdated":1644826256000}'),l={name:"column/ComputerKnowledge/Browser/001.md"},c=s('<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p>要说浏览器存储的方式，我们听到最多的莫过于就是 cookie，localStorage 和 sessionStorage 了。那这三者之前有什么区别，cookie 与 session、sessionId 又有什么关系呢？接下来我们一起来了解一下吧！</p><h1 id="一、浏览器存储的方式" tabindex="-1">一、浏览器存储的方式 <a class="header-anchor" href="#一、浏览器存储的方式" aria-label="Permalink to &quot;一、浏览器存储的方式&quot;">​</a></h1><table><thead><tr><th style="text-align:center;">特性</th><th style="text-align:center;">cookie</th><th style="text-align:center;">localStorage</th><th style="text-align:center;">sessionStorage</th><th style="text-align:center;">indexedDB</th></tr></thead><tbody><tr><td style="text-align:center;">数据生命周期</td><td style="text-align:center;">一般由服务器生成，可以设置过期时间</td><td style="text-align:center;">除非被清理，否则一直存在</td><td style="text-align:center;">页面关闭就清理</td><td style="text-align:center;">除非被清理，否则一直存在</td></tr><tr><td style="text-align:center;">数据存储大小</td><td style="text-align:center;">4K</td><td style="text-align:center;">5M</td><td style="text-align:center;">5M</td><td style="text-align:center;">无限</td></tr><tr><td style="text-align:center;">与服务端通信</td><td style="text-align:center;">每次都会携带在 header 中，对于请求性能有一定影响</td><td style="text-align:center;">不参与</td><td style="text-align:center;">不参与</td><td style="text-align:center;">不参与</td></tr></tbody></table><p><strong>补充</strong>：<code>cookie</code> 原本并不是用来储存的，而是用来与服务端通信的，需要存取请自行封装 <code>api</code>。</p><p>而 <strong>localStorage</strong> 则自带 <code>getItem</code> 和 <code>setItem</code> 方法，使用很方便。</p><p><strong>localStorage 注意点：</strong></p><ul><li><p><code>localStorage</code> 只能存字符串，存取 <code>JSON</code> 数据需配合 <code>JSON.stringify()</code> 和 <code>JSON.parse()</code> ；</p></li><li><p>遇上禁用 <code>setItem</code> 的浏览器，需要使用 <code>try...catch</code> 捕获异常。</p></li></ul><h1 id="二、cookie、localstorage-和-sessionstorage" tabindex="-1">二、cookie、localStorage 和 sessionStorage <a class="header-anchor" href="#二、cookie、localstorage-和-sessionstorage" aria-label="Permalink to &quot;二、cookie、localStorage 和 sessionStorage&quot;">​</a></h1><h2 id="_1、cookie、localstorage-和-sessionstorage-是什么" tabindex="-1">1、cookie、localStorage 和 sessionStorage 是什么？ <a class="header-anchor" href="#_1、cookie、localstorage-和-sessionstorage-是什么" aria-label="Permalink to &quot;1、cookie、localStorage 和 sessionStorage 是什么？&quot;">​</a></h2><h3 id="_1-cookie" tabindex="-1">（1）cookie <a class="header-anchor" href="#_1-cookie" aria-label="Permalink to &quot;（1）cookie&quot;">​</a></h3><ul><li><p><code>cookie</code> 是一个非常具体的东西，指的就是浏览器里面能<strong>永久存储</strong>的一种数据，仅仅是<strong>浏览器</strong>实现的一种数据存储功能。</p></li><li><p><code>cookie</code> 由服务器生成，发送给浏览器，浏览器把 <code>cookie</code> 以<strong>kv 的形式</strong>保存到某个目录下的文本文件内，下一次请求同一网站时会把该 <code>cookie</code> 发送给服务器。</p></li><li><p><code>cookie</code> 的过期时间由客户端设置。<strong>若不设置过期时间</strong>，则表示这个 <code>cookie</code> 的生命期为浏览器会话期间，关闭浏览器窗口， <code>cookie</code> 就会消失。这种生命期为浏览器会话期的 <code>cookie</code> 被称为<strong>会话 cookie</strong>。<strong>如果设置了过期时间</strong>，则在设置的 <code>cookie</code> 过期时间之前一直有效，即使窗口或浏览器关闭也会一直有效。</p></li><li><p>会话 cookie 一般不存储在硬盘而是保存在<strong>内存</strong>里，当然这个行为并不是规范规定的。若设置了过期时间，浏览器就会把 cookie 保存到<strong>硬盘</strong>上，关闭后再打开浏览器后这些 <code>cookie</code> 仍然有效直到超过设定的过期时间。对于保存在内存里的 <code>cookie</code> ，不同的浏览器有不同的处理方式。</p></li><li><p>可用 <code>document.cookie = &quot;&quot;</code> 来设置 <code>cookie</code> 的值。cookie 的值是键值对的形式存在，当设置的键一样时，会覆盖掉原先的值。当键不一样时，对进行叠加操作。<a href="https://blog.csdn.net/l_ppp/article/details/106363568" target="_blank" rel="noreferrer">这里附上一篇我看过觉得比较好理解的关于如何设置 cookie 的文章，大家可以根据自身需求进行查看~</a></p></li></ul><h3 id="_2-localstorage" tabindex="-1">（2）localStorage <a class="header-anchor" href="#_2-localstorage" aria-label="Permalink to &quot;（2）localStorage&quot;">​</a></h3><ul><li>始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；</li><li>同源窗口都会共享，并且不会失效，不管窗口或者浏览器关闭与否都会始终生效。</li></ul><h3 id="_3-sessionstorage" tabindex="-1">（3）sessionStorage <a class="header-anchor" href="#_3-sessionstorage" aria-label="Permalink to &quot;（3）sessionStorage&quot;">​</a></h3><ul><li><p>浏览器存储的一种形式。</p></li><li><p>仅在当前浏览器窗口关闭前有效，不可能持久保持。</p></li><li><p>在相同浏览器里，如果是在当前页面里面跳转进入一个新的页面，可以共享；而如果是直接打开一个新的页面，不能共享。</p></li></ul><h2 id="_2、cookie、localstorage-和-sessionstorage-的异同点" tabindex="-1">2、cookie、localStorage 和 sessionStorage 的异同点 <a class="header-anchor" href="#_2、cookie、localstorage-和-sessionstorage-的异同点" aria-label="Permalink to &quot;2、cookie、localStorage 和 sessionStorage 的异同点&quot;">​</a></h2><h3 id="_1-三者的相同点在于" tabindex="-1">（1）三者的相同点在于： <a class="header-anchor" href="#_1-三者的相同点在于" aria-label="Permalink to &quot;（1）三者的相同点在于：&quot;">​</a></h3><ul><li>都是保存在浏览器端、且同源的。</li></ul><h3 id="_2-三者的区别在于" tabindex="-1">（2）三者的区别在于： <a class="header-anchor" href="#_2-三者的区别在于" aria-label="Permalink to &quot;（2）三者的区别在于：&quot;">​</a></h3><ul><li><p><strong>与服务器通信不同：</strong></p><p><code>cookie</code> 数据始终在同源的 <code>http</code> 请求中携带（即使不需要），即 <code>cookie</code> 在浏览器和服务器间来回传递，而<strong>sessionStorage 和 localStorage 不会自动把数据发送给服务器</strong>，仅在本地保存；</p><p><code>cookie</code> <strong>会</strong>随着 <code>http</code> 请求被发送出去，而 <code>loacalStorage</code> 和 <code>sessionStorage</code> <strong>不会</strong>随着 <code>http</code> 请求被发送出去。</p><p><code>cookie</code> 数据还有路径（path）的概念，可以限制 <code>cookie</code> 只属于某个路径下。</p></li><li><p><strong>存储大小限制也不同：</strong></p><p><code>cookie</code> 数据不能超过 4K，同时因为每次 <code>http</code> 请求都会携带 <code>cookie </code>、所以 <code>cookie</code> 只适合保存<strong>很小的数据</strong>，如<strong>会话标识</strong>；</p><p><code>sessionStorage</code> 和 <code>localStorage</code> 虽然也有存储大小的限制，但比 <code>cookie</code> 大得多，可以达到 <code>5M</code> 或更大。</p></li><li><p><strong>数据有效期不同：</strong></p><p><code>sessionStorage</code> ：仅在当前浏览器窗口关闭之前有效；</p><p><code>localStorage</code> ：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；</p><p><code>cookie</code> ：只在设置的 <code>cookie</code> 过期时间之前有效，即使窗口关闭或浏览器关闭。</p></li><li><p><strong>作用域不同：</strong></p><p><code>sessionStorage</code> <strong>不在不同的浏览器窗口中共享</strong>，即使是同一个页面；</p><p><code>localstorage</code> 和 <code>cookie</code> 在<strong>所有同源窗口中都是共享的</strong>；</p></li></ul><h2 id="_3、cookie-的用途" tabindex="-1">3、cookie 的用途 <a class="header-anchor" href="#_3、cookie-的用途" aria-label="Permalink to &quot;3、cookie 的用途&quot;">​</a></h2><h3 id="_1-保存用户登录状态" tabindex="-1">（1）保存用户登录状态 <a class="header-anchor" href="#_1-保存用户登录状态" aria-label="Permalink to &quot;（1）保存用户登录状态&quot;">​</a></h3><p>例如将用户 <code>id</code> 存储于一个 <code>cookie</code> 内，这样当用户下次访问该页面 时就不需要重新登录了，现在很多论坛和社区都提供这样的功能。</p><p><code>cookie</code> 还可以设置过期时间，当超过时间期限后，<code>cookie</code> 就会自动消失。因此，系统往往可以提示用户保持登录状态的时间：<strong>常见选项有一个月、三个 月、一年等</strong>。</p><h3 id="_2-跟踪用户行为" tabindex="-1">（2）跟踪用户行为 <a class="header-anchor" href="#_2-跟踪用户行为" aria-label="Permalink to &quot;（2）跟踪用户行为&quot;">​</a></h3><p>例如一个天气预报网站，能够根据用户选择的地区显示当地的天气情况。 如果每次都需要选择所在地是繁琐的，当利用了 <code>cookie</code> 后就会显得很人性化了，系统能够记住上一次访问的地区，当下次再打开该页面时，它就会自动显示上次用户所在地区 的天气情况。</p><p>因为一切都是在后台完成，所以这样的页面就像为某个用户所定制的一样，使用起来非常方便定制页面。如果网站提供了换肤或更换布局的功能，那么可以使用 cookie 来记录用户的选项，例如：背景色、分辨率等。当用户下次访问时，仍然可以保存上一次访问的界面风格。</p><h1 id="三、session-和-token" tabindex="-1">三、session 和 token <a class="header-anchor" href="#三、session-和-token" aria-label="Permalink to &quot;三、session 和 token&quot;">​</a></h1><h3 id="_1-session" tabindex="-1">（1）Session <a class="header-anchor" href="#_1-session" aria-label="Permalink to &quot;（1）Session&quot;">​</a></h3><p><strong>举个例子：</strong></p><ul><li><code>session</code> 从字面上讲，就是<strong>会话</strong>。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相、身高等等）表明他就是张三。</li><li><code>session</code> 也是类似的道理，服务器要知道当前发请求给自己的是谁。</li><li>为了做这种区分，服务器就要给每个客户端分配不同的“<strong>身份标识</strong>”，这个身份表示也就是我们平常所说的 <code>sessionId</code> 。然后客户端每次向服务器发请求的时候，都带上这个“<strong>身份标识</strong>”，服务器就知道这个请求来自于谁了。</li><li>至于客户端怎么保存这个“<strong>身份标识</strong>”，可以有很多种方式，对于浏览器客户端，大部分情况下都默认采用 <code>cookie</code> 的方式，当然也可以使用 <code>localStorage</code> 和 <code>sessionStorage</code> 存储这个<strong>身份标识</strong>，大家可以依据自身需求进行使用。</li><li>需要注意的是， <code>session</code> 为一个会话，当页面不同即使是同一页面打开两次，也被视为同一次会话。</li><li>服务器使用 <code>session</code> 把用户的信息<strong>临时</strong>保存在了服务器上，用户离开网站后 <code>session</code> 会被销毁。</li><li>这种用户信息存储方式相对 <code>cookie</code> 来说更安全，但是 <code>session</code> 有一个<strong>缺陷</strong>：如果 web 服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候 <code>session</code> 会丢失。</li></ul><p><strong>综上所述，对 session 做个总结：</strong></p><ul><li>当程序需要为某个客户端的请求创建一个 <code>session</code> 时，服务器首先检查这个客户端的请求里是否已包含了一个 <code>session</code> 标识（ 称为 <code>sessionId</code> ），如果已包含则说明以前已经为此客户端创建过 <code>session</code> ，服务器就按照此 <code>sessionId</code> 把其对应的 <code>session</code> 检索出来使用（检索不到，会新建一个）；反之，如果客户端请求不包含 <code>sessionId</code> ，则为客户端创建一个 <code>session</code> 并且生成一个与此 <code>session</code> 相关联的 <code>sessionId</code> ， <code>sessionId</code> 的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个 <code>sessionId</code> 将被在本次响应中返回给客户端保存。保存这个 <code>sessionId</code> 的方式可以采用 <code>cookie</code> ，也可以是 <code>locaStorage</code> 和 <code>sessionStorage</code> ，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。</li></ul><h3 id="_2-token" tabindex="-1">（2）Token <a class="header-anchor" href="#_2-token" aria-label="Permalink to &quot;（2）Token&quot;">​</a></h3><ul><li><p>在 Web 领域基于 <code>Token</code> 的身份验证随处可见。在大多数使用 Web API 的互联网公司中， <code>token</code> 是<strong>多用户下处理认证的最佳方式</strong>。</p></li><li><p>以下<strong>几点特性</strong>会让你在程序中使用基于 <code>Token</code> 的身份验证：</p><ul><li>无状态、可扩展；</li><li>支持移动设备；</li><li>跨程序调用；</li><li>安全。</li></ul></li><li><p>大部分你见到过的 <code>API</code> 和 <code>Web</code> 应用都使用 <code>token</code> 。例如 <code>Facebook</code> , <code>Twitter</code> , <code>Google</code> , <code>GitHub</code> 等。</p></li></ul><h1 id="四、结束语" tabindex="-1">四、结束语 <a class="header-anchor" href="#四、结束语" aria-label="Permalink to &quot;四、结束语&quot;">​</a></h1><p>cookie、loacalStorage 和 sessionStorage 是面试中老生常谈的问题了。在学习的过程中，要理解好 cookie、localStorage 和 sessionStorage 的关系，以及 session、sessionId 和 cookie 的关系，只有把它们这几个之间的关系弄明白了，自己才不会一直深陷在一个关系杂圈中。</p><p>关于浏览器存储的内容就讲到这里啦！如有疑问或文章有讲的不好的地方欢迎评论区评论或私信我交流~</p><blockquote><ul><li><p>关注公众号 <strong>星期一研究室</strong> ，不定期分享学习干货</p></li><li><p>如果这篇文章对你有用，记得<strong>点个赞加个关注</strong>再走哦~</p></li></ul></blockquote>',40),i=[c];function a(r,n,d,g,k,h){return t(),o("div",null,i)}const _=e(l,[["render",a]]);export{u as __pageData,_ as default};
