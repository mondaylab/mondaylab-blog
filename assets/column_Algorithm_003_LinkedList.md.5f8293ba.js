import{_ as s,c as n,o as a,N as l}from"./chunks/framework.6510d215.js";const C=JSON.parse('{"title":"详解链表在前端的应用，顺便再弄懂原型和原型链！","description":"","frontmatter":{"title":"详解链表在前端的应用，顺便再弄懂原型和原型链！","author":"周一","date":"2021-06-02","categories":["前端开发"],"tags":["数构与前端"],"sidebar":"auto"},"headers":[{"level":1,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":1,"title":"一、链表 VS 数组","slug":"一、链表-vs-数组","link":"#一、链表-vs-数组","children":[]},{"level":1,"title":"二、JS 中的链表","slug":"二、js-中的链表","link":"#二、js-中的链表","children":[]},{"level":1,"title":"三、前端与链表：JS 中的原型链","slug":"三、前端与链表-js-中的原型链","link":"#三、前端与链表-js-中的原型链","children":[{"level":2,"title":"1、原型是什么？","slug":"_1、原型是什么","link":"#_1、原型是什么","children":[]},{"level":2,"title":"2、原型链是什么？","slug":"_2、原型链是什么","link":"#_2、原型链是什么","children":[]},{"level":2,"title":"3、原型链长啥样？","slug":"_3、原型链长啥样","link":"#_3、原型链长啥样","children":[{"level":3,"title":"（1）arr → Array.prototype → Object.prototype → null","slug":"_1-arr-→-array-prototype-→-object-prototype-→-null","link":"#_1-arr-→-array-prototype-→-object-prototype-→-null","children":[]},{"level":3,"title":"（2）obj → Object.prototype → null","slug":"_2-obj-→-object-prototype-→-null","link":"#_2-obj-→-object-prototype-→-null","children":[]},{"level":3,"title":"（3）func → Function.prototype → Object.prototype → null","slug":"_3-func-→-function-prototype-→-object-prototype-→-null","link":"#_3-func-→-function-prototype-→-object-prototype-→-null","children":[]},{"level":3,"title":"（4）class 中的原型","slug":"_4-class-中的原型","link":"#_4-class-中的原型","children":[]},{"level":3,"title":"（5）new Object() 和 Object.create() 区别","slug":"_5-new-object-和-object-create-区别","link":"#_5-new-object-和-object-create-区别","children":[]}]},{"level":2,"title":"4、原型链知识点","slug":"_4、原型链知识点","link":"#_4、原型链知识点","children":[]},{"level":2,"title":"5、常见面试题","slug":"_5、常见面试题","link":"#_5、常见面试题","children":[{"level":3,"title":"（1）instanceof 原理","slug":"_1-instanceof-原理","link":"#_1-instanceof-原理","children":[]},{"level":3,"title":"（2）看代码，得出输出结果。","slug":"_2-看代码-得出输出结果。","link":"#_2-看代码-得出输出结果。","children":[]}]}]},{"level":1,"title":"四、写在最后","slug":"四、写在最后","link":"#四、写在最后","children":[]}],"relativePath":"column/Algorithm/003_LinkedList.md","lastUpdated":1659789425000}'),o={name:"column/Algorithm/003_LinkedList.md"},p=l(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p><code>链表</code> 在前端中的应用常用于原型和原型链当中。在接下来的这篇文章中，将讲解关于 <code>链表</code> 在前端中的应用。</p><h1 id="一、链表-vs-数组" tabindex="-1">一、链表 VS 数组 <a class="header-anchor" href="#一、链表-vs-数组" aria-label="Permalink to &quot;一、链表 VS 数组&quot;">​</a></h1><ul><li>数组：增删非首尾元素时往往<strong>需要移动元素</strong>；</li><li>链表：增删非首尾元素，<strong>不需要移动元素</strong>，只需要更改 <code>next</code> 的指向即可。</li></ul><h1 id="二、js-中的链表" tabindex="-1">二、JS 中的链表 <a class="header-anchor" href="#二、js-中的链表" aria-label="Permalink to &quot;二、JS 中的链表&quot;">​</a></h1><ul><li>Javascript 中没有链表；</li><li>可以用 Object 模拟链表。</li></ul><h1 id="三、前端与链表-js-中的原型链" tabindex="-1">三、前端与链表：JS 中的原型链 <a class="header-anchor" href="#三、前端与链表-js-中的原型链" aria-label="Permalink to &quot;三、前端与链表：JS 中的原型链&quot;">​</a></h1><h2 id="_1、原型是什么" tabindex="-1">1、原型是什么？ <a class="header-anchor" href="#_1、原型是什么" aria-label="Permalink to &quot;1、原型是什么？&quot;">​</a></h2><ul><li>在 <code>Javascript</code> 中，每个对象都会在其内部初始化一个属性，这个属性就是<strong>原型对象</strong>（简称原型）。</li></ul><h2 id="_2、原型链是什么" tabindex="-1">2、原型链是什么？ <a class="header-anchor" href="#_2、原型链是什么" aria-label="Permalink to &quot;2、原型链是什么？&quot;">​</a></h2><ul><li>当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去 <code>prototype</code> 里找这个属性，这个 <code>prototype</code> 又会有自己的 <code>prototype</code> ，于是就这样一直找下去，这样逐级查找形似一个链条，且通过 <code>[[prototype]]</code> 属性连接，这个连接的过程被称为<strong>原型链</strong>。</li><li>原型链的本质是<strong>链表</strong>，且原型链上的节点是<strong>各种原型对象</strong>，如： <code>Function.prototype</code> 、 <code>Object.prototype</code> ……。</li><li>原型链通过 <code>__proto__</code> 属性连接各种原型对象。</li></ul><h2 id="_3、原型链长啥样" tabindex="-1">3、原型链长啥样？ <a class="header-anchor" href="#_3、原型链长啥样" aria-label="Permalink to &quot;3、原型链长啥样？&quot;">​</a></h2><h3 id="_1-arr-→-array-prototype-→-object-prototype-→-null" tabindex="-1">（1）arr → Array.prototype → Object.prototype → null <a class="header-anchor" href="#_1-arr-→-array-prototype-→-object-prototype-→-null" aria-label="Permalink to &quot;（1）arr → Array.prototype → Object.prototype → null&quot;">​</a></h3><ul><li>arr.** proto ** = Array.prototype；</li><li>Array.** proto **= Object.prototype；</li><li>Object.** proto **= null。</li></ul><p><strong>先用代码来演示这段关系：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//  true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//  true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>解释说明：</strong></p><p>假设我们定义了一个对象，名字叫 <code>arr</code> ，那么 <code>arr.__proto__</code> 表示的是 arr 这个对象的原型，在这个例子中 <code>let arr = []</code> 间接调用了 <code>new Array</code> ，所以我们通过 <code>Array.prototype</code> 来表示 <code>Array</code> 这个构造函数的原型对象，通过对 <code>arr.__proto__</code> 和 <code>Array.prototype</code> 进行比较，发现两者相等，所以说， <code>arr</code> 的原型属性就是构造函数 <code>Array</code> 的原型对象。</p><p>与上述类似的，我们发现 <code>arr.__proto__</code> 和 <code>Array.prototype</code> 相等，那么继续往源头查找下去， <code>Array</code> 又有它自己的原型属性，那么这个时候 <code>Array</code> 的原型属性 <code>arr.__proto__.__proto__</code> 又会等于什么呢？</p><p>其实，在 <code>js</code> 当中， <code>Object</code> 是所有对象的父对象，也就是说绝大多数的对象都有一个共同的原型 <code>Object.prototype</code> 。所以，这个时候 <code>Array</code> 的原型属性 <code>arr.__proto__.__proto__</code> 就等于 <code>Object.prototype</code> ，到此为止，找到最原始的<strong>父</strong>对象 <code>Object</code> 的原型之后，基本就快结束了。我们最后再检验 <code>Object</code> 的原型属性 <code>arr.__proto__.__proto__.__proto__</code> ，发现是 <code>null</code> 空值，也就意味着原型链已经走到了最源头的位置。</p><p><strong>总结：</strong></p><ul><li><code>Object</code> 是所有对象的<strong>父对象</strong>。</li><li>从上面例子中可以看到，所有原型对象都会<strong>先指向</strong>自己的 <code>__proto__</code> 属性，<strong>之后再指向</strong>自己的原型，<strong>最后指向</strong>父对象 <code>Object</code> 的原型。</li></ul><p>下面再给出两个例子，大家可以依据（1）的方法进行检验。</p><h3 id="_2-obj-→-object-prototype-→-null" tabindex="-1">（2）obj → Object.prototype → null <a class="header-anchor" href="#_2-obj-→-object-prototype-→-null" aria-label="Permalink to &quot;（2）obj → Object.prototype → null&quot;">​</a></h3><ul><li>obj.** proto ** = Object.prototype；</li><li>Object.** proto **= null。</li></ul><p><strong>用代码来演示这段关系：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//  true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-func-→-function-prototype-→-object-prototype-→-null" tabindex="-1">（3）func → Function.prototype → Object.prototype → null <a class="header-anchor" href="#_3-func-→-function-prototype-→-object-prototype-→-null" aria-label="Permalink to &quot;（3）func → Function.prototype → Object.prototype → null&quot;">​</a></h3><ul><li>func.** proto ** = Function.prototype；</li><li>Function.** proto **= Object.prototype；</li><li>Object.** proto **= null。</li></ul><p><strong>用代码来演示这段关系：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> func </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//  true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//  true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_4-class-中的原型" tabindex="-1">（4）class 中的原型 <a class="header-anchor" href="#_4-class-中的原型" aria-label="Permalink to &quot;（4）class 中的原型&quot;">​</a></h3><p><strong>1）先来看第一段代码。</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//父类</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">People</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">eat</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> eat something</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//子类</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Student</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">People</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">number</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">number</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sayHi</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">姓名：</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，学号：</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">number</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> Student)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//function</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> People)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> xialuo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Student</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">夏洛</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10010</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(xialuo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Student</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(xialuo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Student</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>从上面代码中可以看到， <code>typeof Student</code> 和 <code>typeof People</code> 的值是 <code>function</code> ，所以 <code>class</code> 实际上是函数，也就是语法糖。</p><p>再看下面三个 <code>console.log</code> 打印的值，我们来梳理一个原型间的关系。首先 <code>Student</code> 是一个 <code>class</code> ，那么每个 <code>class</code> 都有它的<strong>显式原型</strong> <code>prototype</code> ，而 <code>xialuo</code> 是一个实例，每个实例都有它的<strong>隐式原型</strong> <code>__proto__</code> 。它们两者之间的关系就是，实例 <code>xialuo</code> 的 <code>__proto__</code> 指向对应的 <code>class</code> （即 <code>Student</code> ）的 <code>prototype</code> 。</p><p><strong>因此，对于 class 中的原型，可以得出以下结论：</strong></p><ul><li>每个 <code>class</code> 都有显式原型 <code>prototype</code> ；</li><li>每个实例都有隐式原型 <code>__proto__</code> ;</li><li>实例的 <code>__proto__</code> 指向对应 <code>class</code> 的 <code>prototype</code> 。</li></ul><p><strong>2）再来看第二段代码。</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//父类</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">People</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">eat</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> eat something</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//子类</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Student</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">People</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">number</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">number</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sayHi</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">姓名：</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，学号：</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">number</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> xialuo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Student</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">夏洛</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10010</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(xialuo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//夏洛</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(xialuo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">number)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//10010</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Student</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sayHi</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//姓名：夏洛，学号：10010</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>从上面代码中可以得出， <code>Student</code> 类本身有 <code>number</code> 这个属性，所以它会直接读取自身 <code>number</code> 的值。同时，它是没有 <code>name</code> 这个属性的，但是由于它继承自父类 <code>People</code> ，所以当它找不到 <code>name</code> 则个属性时，它会自动的往 <code>__proto__</code> 中查找，于是就往它的父类 <code>People</code> 进行查找。</p><p><strong>所以，从上面的演示中可以得出基于原型的执行规则：</strong></p><ul><li>先获取属性（比如 <code>xialuo.name</code> 和 <code>xiaoluo.number</code> ） 或者获取执行方法 （比如 <code>xialuo.sayhi()</code> ）；</li><li>获取后，先在自身属性和方法上寻找；</li><li>如果找不到则自动去 <code>__proto__</code> 中查找。</li></ul><h3 id="_5-new-object-和-object-create-区别" tabindex="-1">（5）new Object() 和 Object.create() 区别 <a class="header-anchor" href="#_5-new-object-和-object-create-区别" aria-label="Permalink to &quot;（5）new Object() 和 Object.create() 区别&quot;">​</a></h3><ul><li><code>{}</code> 等同于 <code>new Object()</code> ，原型为 <code>Object.prototype</code> ；</li><li><code>Object.create(null)</code> 没有原型；</li><li><code>Object.create({...})</code> 可指定原型。</li></ul><h2 id="_4、原型链知识点" tabindex="-1">4、原型链知识点 <a class="header-anchor" href="#_4、原型链知识点" aria-label="Permalink to &quot;4、原型链知识点&quot;">​</a></h2><p>（<strong>1</strong>）如果 <code>A</code> 沿着原型链能找到 <code>B.prototype</code> ，那么 <code>A instanceof B</code> 为 <code>true</code> 。</p><p><strong>举例 1：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>对于 <code>obj instanceof Object</code> 进行左右运算， <code>obj instanceof Object</code> 的意思是查询 <code>obj</code> 的原型链上是否有 <code>Object</code> 的原型对象，即 <code>obj</code> 是否是 <code>Object</code> 的实例。</p><p><strong>举例 2：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> func </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(func </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(func </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>对于 <code>func</code> 来说， <code>func</code> 既是 <code>Function</code> 的实例，也是 <code>Object</code> 的实例。</p><p>（<strong>2</strong>）如果 <code>A</code> 对象上没有找到 <code>x</code> 属性，那么会沿着原型链找 <code>x</code> 属性。</p><p><strong>举例：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//x</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>从上述代码中可以看到，<code>obj</code> 在自己的区域内没有找到 x 的值，则会继续往它的原型链找，最终找到 <code>Object.prototype.x</code> ，所以 <code>obj.x = x</code> 。</p><p>接下来我们用两道常见的面试题来回顾这两个知识点。</p><h2 id="_5、常见面试题" tabindex="-1">5、常见面试题 <a class="header-anchor" href="#_5、常见面试题" aria-label="Permalink to &quot;5、常见面试题&quot;">​</a></h2><h3 id="_1-instanceof-原理" tabindex="-1">（1）instanceof 原理 <a class="header-anchor" href="#_1-instanceof-原理" aria-label="Permalink to &quot;（1）instanceof 原理&quot;">​</a></h3><p><strong>知识点</strong>：如果 <code>A</code> 沿着原型链能找到 <code>B.prototype</code> ，那么 <code>A instanceof B</code> 为 <code>true</code> 。</p><p><strong>解法</strong>：遍历 <code>A</code> 的原型链，如果找到 <code>B.prototype</code> ，返回 <code>true</code> ，否则返回 <code>false</code> 。</p><p><strong>代码演示：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 判断A是否为B的实例</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> instanceOf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">A</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">B</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 定义一个指针P指向A</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">A</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 当P存在时则继续执行</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">p</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 判断P值是否等于B的prototype对象，是则说明A是B的实例</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">p</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 不断遍历A的原型链，直到找到B的原型为止</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">p</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_2-看代码-得出输出结果。" tabindex="-1">（2）看代码，得出输出结果。 <a class="header-anchor" href="#_2-看代码-得出输出结果。" aria-label="Permalink to &quot;（2）看代码，得出输出结果。&quot;">​</a></h3><p>看下面一段代码，请给出 4 个 <code>console.log</code> 打印的值。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> F </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//value a</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">b)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//undefind</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(F</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//value a</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(F</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">b)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//value b</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>知识点</strong>：如果在 <code>A</code> 对象上没有找到 <code>x</code> 属性，那么会沿着原型链找 <code>x</code> 属性。</p><p><strong>解法</strong>：明确 <code>foo</code> 和 <code>F</code> 变量的原型链，沿着原型链找 <code>A</code> 属性和 <code>B</code> 属性。</p><p><strong>解析</strong>：从上面一段代码中可以看到， <code>foo</code> 是一个对象，那么它的 <code>__proto__</code> 属性指向 <code>Object.prototype</code> ，所以此时 <code>foo.a</code> 会往它的原型链上面找具体的值，也就是 <code>Object.prototype.a</code> 的值。同理， <code>foo.b</code> 会往它的原型链找值，但是找不到 <code>Object.prototype.b</code> 的值，所以最终返回 <code>undefined</code> 。 <code>F.a</code> 和 <code>F.b</code> 也是同样的道理，大家可以进行一一验证。</p><h1 id="四、写在最后" tabindex="-1">四、写在最后 <a class="header-anchor" href="#四、写在最后" aria-label="Permalink to &quot;四、写在最后&quot;">​</a></h1><p>原型和原型链在前端中是再基础不过的知识了！我们平常所写的每一个对象中，基本上都有它的原型和原型链。因此，对于前端来说，如果原型和原型链的关系都不明白的话，不知不觉中很容易写出各种各样的 bug，这对于后续维护和程序来说都是一个巨大的灾难。所以，了解原型和原型链，对于前端来说是一项必备的技能。</p><p>链表在前端中的应用就讲到这里啦！如果有不理解或者有误的地方也欢迎私聊我或加我微信指正~</p><blockquote><ul><li>公众号：星期一研究室</li><li>微信：MondayLaboratory</li></ul></blockquote><p>创作不易，如果这篇文章对你有用，记得点个 <strong>Star</strong> 哦~</p>`,75),e=[p];function t(c,r,y,D,F,i){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{C as __pageData,d as default};
