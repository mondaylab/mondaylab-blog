import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.98c15f2e.js";const F=JSON.parse('{"title":"机器学习与神经网络简介","description":"","frontmatter":{"title":"机器学习与神经网络简介","author":"周一","date":"2023-08-05","categories":["人工智能"],"tags":["机器学习"],"sidebar":"auto"},"headers":[{"level":1,"title":"一、欠拟合与过拟合任务简介","slug":"一、欠拟合与过拟合任务简介","link":"#一、欠拟合与过拟合任务简介","children":[{"level":2,"title":"1、欠拟合和过拟合是什么","slug":"_1、欠拟合和过拟合是什么","link":"#_1、欠拟合和过拟合是什么","children":[{"level":3,"title":"（1）欠拟合","slug":"_1-欠拟合","link":"#_1-欠拟合","children":[]},{"level":3,"title":"（2）过拟合","slug":"_2-过拟合","link":"#_2-过拟合","children":[]}]},{"level":2,"title":"2、操作步骤","slug":"_2、操作步骤","link":"#_2、操作步骤","children":[]}]},{"level":1,"title":"二、加载带有噪音的二分类数据集","slug":"二、加载带有噪音的二分类数据集","link":"#二、加载带有噪音的二分类数据集","children":[{"level":2,"title":"1、为什么要加载带有噪音的二分类数据集","slug":"_1、为什么要加载带有噪音的二分类数据集","link":"#_1、为什么要加载带有噪音的二分类数据集","children":[]},{"level":2,"title":"2、操作步骤","slug":"_2、操作步骤-1","link":"#_2、操作步骤-1","children":[]}]},{"level":1,"title":"三、使用简单神经网络演示欠拟合","slug":"三、使用简单神经网络演示欠拟合","link":"#三、使用简单神经网络演示欠拟合","children":[{"level":2,"title":"1、操作步骤","slug":"_1、操作步骤","link":"#_1、操作步骤","children":[]},{"level":2,"title":"2、训练过程","slug":"_2、训练过程","link":"#_2、训练过程","children":[]},{"level":2,"title":"3、遇到欠拟合该怎么办？","slug":"_3、遇到欠拟合该怎么办","link":"#_3、遇到欠拟合该怎么办","children":[]}]},{"level":1,"title":"四、使用复杂神经网络演示过拟合","slug":"四、使用复杂神经网络演示过拟合","link":"#四、使用复杂神经网络演示过拟合","children":[{"level":2,"title":"1、操作步骤","slug":"_1、操作步骤-1","link":"#_1、操作步骤-1","children":[]},{"level":2,"title":"2、训练过程","slug":"_2、训练过程-1","link":"#_2、训练过程-1","children":[]}]},{"level":1,"title":"五、过拟合应对法：早停法、权重衰减、丢弃法","slug":"五、过拟合应对法-早停法、权重衰减、丢弃法","link":"#五、过拟合应对法-早停法、权重衰减、丢弃法","children":[{"level":2,"title":"1、三种法则简单介绍","slug":"_1、三种法则简单介绍","link":"#_1、三种法则简单介绍","children":[]},{"level":2,"title":"2、训练过程","slug":"_2、训练过程-2","link":"#_2、训练过程-2","children":[{"level":3,"title":"（1）使用早停法","slug":"_1-使用早停法","link":"#_1-使用早停法","children":[]},{"level":3,"title":"（2）使用权重衰减","slug":"_2-使用权重衰减","link":"#_2-使用权重衰减","children":[]},{"level":3,"title":"（3）丢弃法","slug":"_3-丢弃法","link":"#_3-丢弃法","children":[]}]}]}],"relativePath":"column/MachineLearning/Tensorflow/08_Underfitting.md","filePath":"column/MachineLearning/Tensorflow/08_Underfitting.md","lastUpdated":1720881464000}'),p={name:"column/MachineLearning/Tensorflow/08_Underfitting.md"},o=l(`<h1 id="一、欠拟合与过拟合任务简介" tabindex="-1">一、欠拟合与过拟合任务简介 <a class="header-anchor" href="#一、欠拟合与过拟合任务简介" aria-label="Permalink to &quot;一、欠拟合与过拟合任务简介&quot;">​</a></h1><h2 id="_1、欠拟合和过拟合是什么" tabindex="-1">1、欠拟合和过拟合是什么 <a class="header-anchor" href="#_1、欠拟合和过拟合是什么" aria-label="Permalink to &quot;1、欠拟合和过拟合是什么&quot;">​</a></h2><h3 id="_1-欠拟合" tabindex="-1">（1）欠拟合 <a class="header-anchor" href="#_1-欠拟合" aria-label="Permalink to &quot;（1）欠拟合&quot;">​</a></h3><p>欠拟合简单来说就是数据很复杂，但是你的模型太简单了，拟合不了这个数据，这就是欠拟合。比如说下面这张图，黑色的线就代表数据是一条弧线，我们的数据分布是<strong>一条弧线</strong>，而蓝色的线则就是我们的模型，模型则是一个简单的线性模型，就是一条直线。显然这个蓝色的模型是不能拟合黑色线的数据的，这种情况下就是欠拟合。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202407132127582.png" alt="img"></p><h3 id="_2-过拟合" tabindex="-1">（2）过拟合 <a class="header-anchor" href="#_2-过拟合" aria-label="Permalink to &quot;（2）过拟合&quot;">​</a></h3><p>过拟合想要表达的就是说我们的模型太过复杂了，太过强大了，导致于我们把数据给拟合过头了，反而遇到额外的数据或者新的数据，结果就表现的不是很好。</p><p>比如下面这张图，红色的点和蓝色的点分别代表<strong>两类数据</strong>，就是这是一个<strong>二分类数据集</strong>，这个黑色的线代表一个比较正常的一个模型，它把红色和蓝色的线分开了，大部分都分开了，而且这个模型应该是一个表现不错的模型。</p><p>而绿色的线就是一个<strong>过拟合的模型</strong>，这个绿色的线，它想方设法把红色和蓝色分开，你看它把几乎所有的这个蓝色的点，红色的点，这蓝色的点，它都拐着弯儿想方设法把它给分开，这样它的训练损失才会降低，对吧？</p><p>但是它为了这么做，会导致一个后果，就是它最终呈现的形态是<strong>非常混乱的</strong>。而这么一个看起来这么复杂的模型，其实有可能只需要用一个简单的二分类数据，用一个弧线就能做到的，平滑的弧线就可以分开来。</p><p>因此，这个模型去预测<strong>新数据</strong>或者<strong>验证集</strong>上的数据的时候，它的损失就不一定低，有可能损失会很高，这就是<strong>过拟合</strong>。</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202407132128560.png" alt="img"></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202407132128200.png" alt="img"></p><h2 id="_2、操作步骤" tabindex="-1">2、操作步骤 <a class="header-anchor" href="#_2、操作步骤" aria-label="Permalink to &quot;2、操作步骤&quot;">​</a></h2><p>下面我们来说说，解决欠拟合和过拟合的一些操作步骤。<strong>具体如下：</strong></p><ul><li>加载带有噪音的二分类数据集（训练集和验证集）</li><li>使用不同神经网络演示欠拟合和过拟合</li><li>过拟合应对法：早停法、权重衰减、丢弃法</li></ul><h1 id="二、加载带有噪音的二分类数据集" tabindex="-1">二、加载带有噪音的二分类数据集 <a class="header-anchor" href="#二、加载带有噪音的二分类数据集" aria-label="Permalink to &quot;二、加载带有噪音的二分类数据集&quot;">​</a></h1><h2 id="_1、为什么要加载带有噪音的二分类数据集" tabindex="-1">1、为什么要加载带有噪音的二分类数据集 <a class="header-anchor" href="#_1、为什么要加载带有噪音的二分类数据集" aria-label="Permalink to &quot;1、为什么要加载带有噪音的二分类数据集&quot;">​</a></h2><p>这是因为稍微带一点噪音更容易复现过拟合的现象。因为过度复杂的模型，为了拟合所有的训练集的数据，他把那一丁点噪音也给过度拟合掉了。</p><p>他为什么能把那一丁点噪音也给拟合掉呢？那些噪音不是非常的不规则，非常的复杂吗？</p><p>正是因为我们的模型足够复杂，所以这个模型它有能力去拟合那些噪音。虽然它有能力，但这显然不是我们想要的结果，因为最终生成的模型会非常复杂，然后面对训练集以外的数据时，反而预测得非常不好了。因为我们这个问题很简单，就是一刀切二分类结果，它生成一个非常复杂的模型，自然是在二分类数据集上表现不好的，这就是典型的一个过拟合现象。</p><h2 id="_2、操作步骤-1" tabindex="-1">2、操作步骤 <a class="header-anchor" href="#_2、操作步骤-1" aria-label="Permalink to &quot;2、操作步骤&quot;">​</a></h2><ul><li>使用预先准备好的脚本加载带有噪音的二分类数据集</li><li>可视化数据集</li></ul><h1 id="三、使用简单神经网络演示欠拟合" tabindex="-1">三、使用简单神经网络演示欠拟合 <a class="header-anchor" href="#三、使用简单神经网络演示欠拟合" aria-label="Permalink to &quot;三、使用简单神经网络演示欠拟合&quot;">​</a></h1><h2 id="_1、操作步骤" tabindex="-1">1、操作步骤 <a class="header-anchor" href="#_1、操作步骤" aria-label="Permalink to &quot;1、操作步骤&quot;">​</a></h2><ul><li><strong>加载非线性的XOR数据集</strong> —— 为什么要加载这个 <code>XOR</code> 数据集呢？因为 <code>XOR</code> 问题是一个复杂问题，只有用简单模型去解决复杂问题的时候，才会造成<strong>欠拟合</strong>，因此我们需要加载一个稍微复杂一点的非线性的 XOR 数据集，然后用简单的模型去拟合它。</li><li>使用<strong>单个神经元</strong>组成的神经网络演示欠拟合 —— 前面我们谈到过，如果想<strong>解决非线性问题</strong>，必须要使用<strong>多层神经网络</strong>，至少得两层配合激活函数才可以。所以说这个单个神经元组成的神经网络肯定是拟合不了这个复杂问题的，这就属于一个欠拟合的过程了。</li></ul><h2 id="_2、训练过程" tabindex="-1">2、训练过程 <a class="header-anchor" href="#_2、训练过程" aria-label="Permalink to &quot;2、训练过程&quot;">​</a></h2><p>首先，我们先创建一个<code>data.js</code>文件，功能主要用来<strong>加载训练数据集</strong>。</p><div class="language-TypeScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">numSamples</span><span style="color:#6A737D;"> 放多少样本量</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">variance</span><span style="color:#6A737D;"> 方差</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@returns</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">numSamples</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">variance</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> points </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genGauss</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">cx</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">cy</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">label</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> numSamples </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalRandom</span><span style="color:#E1E4E8;">(cx, variance);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalRandom</span><span style="color:#E1E4E8;">(cy, variance);</span></span>
<span class="line"><span style="color:#E1E4E8;">      points.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({ x, y, label });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">genGauss</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">genGauss</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> points;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Samples from a normal distribution. Uses the seedrandom library as the</span></span>
<span class="line"><span style="color:#6A737D;"> * random generator.</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">mean</span><span style="color:#6A737D;"> The mean. Default is 0.</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">variance</span><span style="color:#6A737D;"> The variance. Default is 1.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;">// 正态分布</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalRandom</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">mean</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">variance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> v1, v2, s;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    v1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    v2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v1 </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> v1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> v2 </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> v2;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">sqrt</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(s)) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> s) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> v1;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> mean </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">sqrt</span><span style="color:#E1E4E8;">(variance) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">numSamples</span><span style="color:#6A737D;"> 放多少样本量</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">variance</span><span style="color:#6A737D;"> 方差</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(</span><span style="color:#E36209;">numSamples</span><span style="color:#24292E;">, </span><span style="color:#E36209;">variance</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> points </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genGauss</span><span style="color:#24292E;">(</span><span style="color:#E36209;">cx</span><span style="color:#24292E;">, </span><span style="color:#E36209;">cy</span><span style="color:#24292E;">, </span><span style="color:#E36209;">label</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> numSamples </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalRandom</span><span style="color:#24292E;">(cx, variance);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalRandom</span><span style="color:#24292E;">(cy, variance);</span></span>
<span class="line"><span style="color:#24292E;">      points.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ x, y, label });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">genGauss</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">genGauss</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> points;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Samples from a normal distribution. Uses the seedrandom library as the</span></span>
<span class="line"><span style="color:#6A737D;"> * random generator.</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">mean</span><span style="color:#6A737D;"> The mean. Default is 0.</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">variance</span><span style="color:#6A737D;"> The variance. Default is 1.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;">// 正态分布</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalRandom</span><span style="color:#24292E;">(</span><span style="color:#E36209;">mean</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#E36209;">variance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> v1, v2, s;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    v1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    v2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v1 </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> v1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> v2 </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> v2;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">sqrt</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s)) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> s) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> v1;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mean </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">sqrt</span><span style="color:#24292E;">(variance) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>接着，创建一个 <code>script.js</code> 文件，具体训练代码如下：</p><div class="language-TypeScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> tf </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@tensorflow/tfjs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> tfvis </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@tensorflow/tfjs-vis&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { getData } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./data&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">onload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  tfvis.render.</span><span style="color:#B392F0;">scatterplot</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    { name: </span><span style="color:#9ECBFF;">&#39;训练数据&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      values: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        data.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.label </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        data.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.label </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">model</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.</span><span style="color:#B392F0;">sequential</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 增加层，让神经网络更复杂点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 过拟合演示</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//   model.add(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//     tf.layers.dense({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//       units: 10,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//       inputShape: [2],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//       activation: &#39;tanh&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//       // kernelRegularizer: tf.regularizers.l2({ l2: 1 })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//     })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//   );</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//   model.add(tf.layers.dropout({ rate: 0.9 }));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//   model.add(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//     tf.layers.dense({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//       units: 1,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//       activation: &#39;sigmoid&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//     })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//   );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 欠拟合演示</span></span>
<span class="line"><span style="color:#E1E4E8;">  model.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    tf.layers.</span><span style="color:#B392F0;">dense</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      units: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      inputSize: [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      activation: </span><span style="color:#9ECBFF;">&#39;sigmoid&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  model.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    loss: tf.losses.logLoss,</span></span>
<span class="line"><span style="color:#E1E4E8;">    optimizer: tf.train.</span><span style="color:#B392F0;">adam</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 一个长度为2的一维数组</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">inputs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.</span><span style="color:#B392F0;">tensor</span><span style="color:#E1E4E8;">(data.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [p.x, p.y]));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 指定label，将其转换为tensor</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">labels</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.</span><span style="color:#B392F0;">tensor</span><span style="color:#E1E4E8;">(data.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.label));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> model.</span><span style="color:#B392F0;">fit</span><span style="color:#E1E4E8;">(inputs, labels, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    validationSplit: </span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 验证集分出20%</span></span>
<span class="line"><span style="color:#E1E4E8;">    epochs: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">    callbacks: tfvis.show.</span><span style="color:#B392F0;">fitCallbacks</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      { name: </span><span style="color:#9ECBFF;">&#39;训练效果&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">      [</span><span style="color:#9ECBFF;">&#39;loss&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;val_loss&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 训练损失和验证的损失</span></span>
<span class="line"><span style="color:#E1E4E8;">      { callbacks: [</span><span style="color:#9ECBFF;">&#39;onEpochEnd&#39;</span><span style="color:#E1E4E8;">] }</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> tf </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@tensorflow/tfjs&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> tfvis </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@tensorflow/tfjs-vis&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { getData } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./data&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">onload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  tfvis.render.</span><span style="color:#6F42C1;">scatterplot</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;训练数据&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      values: [</span></span>
<span class="line"><span style="color:#24292E;">        data.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((</span><span style="color:#E36209;">p</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.label </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        data.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((</span><span style="color:#E36209;">p</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.label </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">model</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.</span><span style="color:#6F42C1;">sequential</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 增加层，让神经网络更复杂点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 过拟合演示</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//   model.add(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//     tf.layers.dense({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//       units: 10,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//       inputShape: [2],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//       activation: &#39;tanh&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//       // kernelRegularizer: tf.regularizers.l2({ l2: 1 })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//     })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//   );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//   model.add(tf.layers.dropout({ rate: 0.9 }));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//   model.add(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//     tf.layers.dense({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//       units: 1,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//       activation: &#39;sigmoid&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//     })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//   );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 欠拟合演示</span></span>
<span class="line"><span style="color:#24292E;">  model.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    tf.layers.</span><span style="color:#6F42C1;">dense</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      units: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      inputSize: [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      activation: </span><span style="color:#032F62;">&#39;sigmoid&#39;</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  model.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    loss: tf.losses.logLoss,</span></span>
<span class="line"><span style="color:#24292E;">    optimizer: tf.train.</span><span style="color:#6F42C1;">adam</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 一个长度为2的一维数组</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">inputs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.</span><span style="color:#6F42C1;">tensor</span><span style="color:#24292E;">(data.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">p</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [p.x, p.y]));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 指定label，将其转换为tensor</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">labels</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.</span><span style="color:#6F42C1;">tensor</span><span style="color:#24292E;">(data.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">p</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.label));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> model.</span><span style="color:#6F42C1;">fit</span><span style="color:#24292E;">(inputs, labels, {</span></span>
<span class="line"><span style="color:#24292E;">    validationSplit: </span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 验证集分出20%</span></span>
<span class="line"><span style="color:#24292E;">    epochs: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">    callbacks: tfvis.show.</span><span style="color:#6F42C1;">fitCallbacks</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      { name: </span><span style="color:#032F62;">&#39;训练效果&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">      [</span><span style="color:#032F62;">&#39;loss&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;val_loss&#39;</span><span style="color:#24292E;">], </span><span style="color:#6A737D;">// 训练损失和验证的损失</span></span>
<span class="line"><span style="color:#24292E;">      { callbacks: [</span><span style="color:#032F62;">&#39;onEpochEnd&#39;</span><span style="color:#24292E;">] }</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div><p>最后，我们来看下训练效果。<strong>如下图所示：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202407132128493.png" alt="img"></p><p>可以看到，蓝色的线一直0.5，降不下去。这就说明了模型处于一个欠拟合的状态。</p><p>一般来说，我们训练XOR的时候，它是可以把损失值降到非常低的，但这里一直是0.5，算是一个比较高的值了。</p><h2 id="_3、遇到欠拟合该怎么办" tabindex="-1">3、遇到欠拟合该怎么办？ <a class="header-anchor" href="#_3、遇到欠拟合该怎么办" aria-label="Permalink to &quot;3、遇到欠拟合该怎么办？&quot;">​</a></h2><p>下面我们来梳理下，遇到欠拟合的情况该怎么办？一般来说，可以通过<strong>增加模型的复杂度，添加更多的层，添加更多的神经元去尝试。</strong></p><h1 id="四、使用复杂神经网络演示过拟合" tabindex="-1">四、使用复杂神经网络演示过拟合 <a class="header-anchor" href="#四、使用复杂神经网络演示过拟合" aria-label="Permalink to &quot;四、使用复杂神经网络演示过拟合&quot;">​</a></h1><h2 id="_1、操作步骤-1" tabindex="-1">1、操作步骤 <a class="header-anchor" href="#_1、操作步骤-1" aria-label="Permalink to &quot;1、操作步骤&quot;">​</a></h2><ul><li>加载带有噪音的二分类数据集</li><li>使用多层神经网络演示过拟合</li></ul><h2 id="_2、训练过程-1" tabindex="-1">2、训练过程 <a class="header-anchor" href="#_2、训练过程-1" aria-label="Permalink to &quot;2、训练过程&quot;">​</a></h2><p>在上面训练的基础上，我们来<strong>增加更多的层数</strong>，演示过拟合效果。<strong>如下代码所示：</strong></p><div class="language-TypeScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> tf </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@tensorflow/tfjs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> tfvis </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@tensorflow/tfjs-vis&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { getData } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./data&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">onload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  tfvis.render.</span><span style="color:#B392F0;">scatterplot</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    { name: </span><span style="color:#9ECBFF;">&#39;训练数据&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      values: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        data.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.label </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        data.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.label </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">model</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.</span><span style="color:#B392F0;">sequential</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 增加层，让神经网络更复杂点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 过拟合演示</span></span>
<span class="line"><span style="color:#E1E4E8;">  model.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    tf.layers.</span><span style="color:#B392F0;">dense</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      units: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 设置更多的神经元</span></span>
<span class="line"><span style="color:#E1E4E8;">      inputShape: [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 长度为2的一维数组</span></span>
<span class="line"><span style="color:#E1E4E8;">      activation: </span><span style="color:#9ECBFF;">&#39;tanh&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// kernelRegularizer: tf.regularizers.l2({ l2: 1 })</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  model.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(tf.layers.</span><span style="color:#B392F0;">dropout</span><span style="color:#E1E4E8;">({ rate: </span><span style="color:#79B8FF;">0.9</span><span style="color:#E1E4E8;"> }));</span></span>
<span class="line"><span style="color:#E1E4E8;">  model.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    tf.layers.</span><span style="color:#B392F0;">dense</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      units: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      activation: </span><span style="color:#9ECBFF;">&#39;sigmoid&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  model.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    loss: tf.losses.logLoss,</span></span>
<span class="line"><span style="color:#E1E4E8;">    optimizer: tf.train.</span><span style="color:#B392F0;">adam</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 一个长度为2的一维数组</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">inputs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.</span><span style="color:#B392F0;">tensor</span><span style="color:#E1E4E8;">(data.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [p.x, p.y]));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 指定label，将其转换为tensor</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">labels</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.</span><span style="color:#B392F0;">tensor</span><span style="color:#E1E4E8;">(data.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.label));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> model.</span><span style="color:#B392F0;">fit</span><span style="color:#E1E4E8;">(inputs, labels, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    validationSplit: </span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 验证集分出20%</span></span>
<span class="line"><span style="color:#E1E4E8;">    epochs: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">    callbacks: tfvis.show.</span><span style="color:#B392F0;">fitCallbacks</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      { name: </span><span style="color:#9ECBFF;">&#39;训练效果&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">      [</span><span style="color:#9ECBFF;">&#39;loss&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;val_loss&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 训练损失和验证的损失</span></span>
<span class="line"><span style="color:#E1E4E8;">      { callbacks: [</span><span style="color:#9ECBFF;">&#39;onEpochEnd&#39;</span><span style="color:#E1E4E8;">] }</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> tf </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@tensorflow/tfjs&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> tfvis </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@tensorflow/tfjs-vis&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { getData } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./data&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">onload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  tfvis.render.</span><span style="color:#6F42C1;">scatterplot</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    { name: </span><span style="color:#032F62;">&#39;训练数据&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      values: [</span></span>
<span class="line"><span style="color:#24292E;">        data.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((</span><span style="color:#E36209;">p</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.label </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        data.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((</span><span style="color:#E36209;">p</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.label </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">model</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.</span><span style="color:#6F42C1;">sequential</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 增加层，让神经网络更复杂点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 过拟合演示</span></span>
<span class="line"><span style="color:#24292E;">  model.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    tf.layers.</span><span style="color:#6F42C1;">dense</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      units: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 设置更多的神经元</span></span>
<span class="line"><span style="color:#24292E;">      inputShape: [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], </span><span style="color:#6A737D;">// 长度为2的一维数组</span></span>
<span class="line"><span style="color:#24292E;">      activation: </span><span style="color:#032F62;">&#39;tanh&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// kernelRegularizer: tf.regularizers.l2({ l2: 1 })</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  model.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(tf.layers.</span><span style="color:#6F42C1;">dropout</span><span style="color:#24292E;">({ rate: </span><span style="color:#005CC5;">0.9</span><span style="color:#24292E;"> }));</span></span>
<span class="line"><span style="color:#24292E;">  model.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    tf.layers.</span><span style="color:#6F42C1;">dense</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      units: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      activation: </span><span style="color:#032F62;">&#39;sigmoid&#39;</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  model.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    loss: tf.losses.logLoss,</span></span>
<span class="line"><span style="color:#24292E;">    optimizer: tf.train.</span><span style="color:#6F42C1;">adam</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 一个长度为2的一维数组</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">inputs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.</span><span style="color:#6F42C1;">tensor</span><span style="color:#24292E;">(data.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">p</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [p.x, p.y]));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 指定label，将其转换为tensor</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">labels</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.</span><span style="color:#6F42C1;">tensor</span><span style="color:#24292E;">(data.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">p</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.label));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> model.</span><span style="color:#6F42C1;">fit</span><span style="color:#24292E;">(inputs, labels, {</span></span>
<span class="line"><span style="color:#24292E;">    validationSplit: </span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 验证集分出20%</span></span>
<span class="line"><span style="color:#24292E;">    epochs: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">    callbacks: tfvis.show.</span><span style="color:#6F42C1;">fitCallbacks</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      { name: </span><span style="color:#032F62;">&#39;训练效果&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">      [</span><span style="color:#032F62;">&#39;loss&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;val_loss&#39;</span><span style="color:#24292E;">], </span><span style="color:#6A737D;">// 训练损失和验证的损失</span></span>
<span class="line"><span style="color:#24292E;">      { callbacks: [</span><span style="color:#032F62;">&#39;onEpochEnd&#39;</span><span style="color:#24292E;">] }</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><p><strong>最终效果如下：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202407132128133.png" alt="img"></p><p>可以看到，蓝色的线，损失值已经降下去了。但是黄色的线还在不断攀升。因此，这也意味着，在这个模型已经过拟合了。</p><h1 id="五、过拟合应对法-早停法、权重衰减、丢弃法" tabindex="-1">五、过拟合应对法：早停法、权重衰减、丢弃法 <a class="header-anchor" href="#五、过拟合应对法-早停法、权重衰减、丢弃法" aria-label="Permalink to &quot;五、过拟合应对法：早停法、权重衰减、丢弃法&quot;">​</a></h1><p>继续，我们刚刚了解了欠拟合和过拟合，现在来了解应对过拟合的几种方法。</p><h2 id="_1、三种法则简单介绍" tabindex="-1">1、三种法则简单介绍 <a class="header-anchor" href="#_1、三种法则简单介绍" aria-label="Permalink to &quot;1、三种法则简单介绍&quot;">​</a></h2><ul><li><strong>早停法</strong> —— 在验证级的损失曲线开始增长之前，我们就把模型的训练任务给停掉，这样就可以一定程度上的缓解过拟合。</li><li><strong>权重衰减</strong> —— 简单来说就是把<strong>权重的复杂度</strong>也作为模型损失的一部分，我们都知道训练模型就是降低模型的损失，那么既然复杂度也变成损失的一部分了，所以过于复杂的权重自然也就在训练的过程中被衰减掉了，那么这样一来就防止我们的模型过度的复杂，而导致出现过拟合现象。</li><li><strong>丢弃法</strong> —— 丢弃法则是在神经网络的隐藏层设置<strong>丢弃率</strong>，然后就会随机的丢弃某几个神经元的权重，这相当于把我们隐藏层的神经元个数变少了，间接地就相当于简化了我们的模型。那么我们的模型既然被简化了，自然就一定程度上的可以缓解过拟合了。一般来说，过拟合就是想要解决的问题很简单，但是我们的模型却太复杂，然后就出现过拟合了。</li></ul><p>下面我们来演示下这几种方式。</p><h2 id="_2、训练过程-2" tabindex="-1">2、训练过程 <a class="header-anchor" href="#_2、训练过程-2" aria-label="Permalink to &quot;2、训练过程&quot;">​</a></h2><h3 id="_1-使用早停法" tabindex="-1">（1）使用早停法 <a class="header-anchor" href="#_1-使用早停法" aria-label="Permalink to &quot;（1）使用早停法&quot;">​</a></h3><p>如果是早停法的话，我们需要看下这个验证集损失曲线的拐点，也就是从哪个地方开始增长的。我们需要看一下那个<strong>点</strong>在哪，然后等下次在模型快要走到那个地方之前，就提早地把模型训练任务给停掉即可。</p><h3 id="_2-使用权重衰减" tabindex="-1">（2）使用权重衰减 <a class="header-anchor" href="#_2-使用权重衰减" aria-label="Permalink to &quot;（2）使用权重衰减&quot;">​</a></h3><p>这种方法将<strong>会把过度复杂的权重给衰减掉</strong>，在<code>tensorflow</code>里面，通过<code>kernelRegularizer</code>来设置。<strong>如下代码所示：</strong></p><div class="language-TypeScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">onload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">model.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    tf.layers.</span><span style="color:#B392F0;">dense</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      units: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      inputShape: [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      activation: </span><span style="color:#9ECBFF;">&#39;tanh&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      kernelRegularizer: tf.regularizers.</span><span style="color:#B392F0;">l2</span><span style="color:#E1E4E8;">({ l2: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> }) </span><span style="color:#6A737D;">// 权重衰减，L2正则化</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">onload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">model.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    tf.layers.</span><span style="color:#6F42C1;">dense</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      units: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      inputShape: [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      activation: </span><span style="color:#032F62;">&#39;tanh&#39;</span></span>
<span class="line"><span style="color:#24292E;">      kernelRegularizer: tf.regularizers.</span><span style="color:#6F42C1;">l2</span><span style="color:#24292E;">({ l2: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }) </span><span style="color:#6A737D;">// 权重衰减，L2正则化</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>来看下效果：</strong></p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202407132128018.png" alt="img"></p><p>可以看到，黄色线的损失给降下来了。</p><h3 id="_3-丢弃法" tabindex="-1">（3）丢弃法 <a class="header-anchor" href="#_3-丢弃法" aria-label="Permalink to &quot;（3）丢弃法&quot;">​</a></h3><p>我们在这个最复杂的隐藏层<strong>后面再加一层</strong>，来设置丢弃率。<strong>代码如下所示：</strong></p><div class="language-TypeScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">onload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  ……</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 会雨露均沾地随机选择9个</span></span>
<span class="line"><span style="color:#E1E4E8;">  model.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(tf.layers.</span><span style="color:#B392F0;">dropout</span><span style="color:#E1E4E8;">({ rate: </span><span style="color:#79B8FF;">0.9</span><span style="color:#E1E4E8;"> })); </span><span style="color:#6A737D;">// 丢弃率，丢弃一部分神经元的权重</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  ……  </span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">onload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  ……</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 会雨露均沾地随机选择9个</span></span>
<span class="line"><span style="color:#24292E;">  model.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(tf.layers.</span><span style="color:#6F42C1;">dropout</span><span style="color:#24292E;">({ rate: </span><span style="color:#005CC5;">0.9</span><span style="color:#24292E;"> })); </span><span style="color:#6A737D;">// 丢弃率，丢弃一部分神经元的权重</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  ……  </span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>验证效果如下：</p><p><img src="https://mondaylab-1309616765.cos.ap-shanghai.myqcloud.com/images/202407132128369.png" alt="img"></p><p>可以看到，黄色的线压下去了。但颜色的线为什么反而会高了呢？这是因为我们的模型太简单了，然后我们的数据集有带有噪音，所以会导致它高了。</p>`,66),e=[o];function r(c,t,E,y,i,b){return n(),a("div",null,e)}const u=s(p,[["render",r]]);export{F as __pageData,u as default};
