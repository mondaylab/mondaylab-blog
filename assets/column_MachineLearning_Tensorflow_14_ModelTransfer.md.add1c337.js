import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.98c15f2e.js";const u=JSON.parse('{"title":"Python 与 JavaScript 模型互转","description":"","frontmatter":{"title":"Python 与 JavaScript 模型互转","author":"周一","date":"2023-08-05","categories":["人工智能"],"tags":["机器学习"],"sidebar":"auto"},"headers":[{"level":1,"title":"一、任务简介","slug":"一、任务简介","link":"#一、任务简介","children":[{"level":2,"title":"1、什么是Python模型？","slug":"_1、什么是python模型","link":"#_1、什么是python模型","children":[]},{"level":2,"title":"2、什么是JavaScript模型","slug":"_2、什么是javascript模型","link":"#_2、什么是javascript模型","children":[{"level":3,"title":"（1）可以在Tensorflow.js中运行的模型","slug":"_1-可以在tensorflow-js中运行的模型","link":"#_1-可以在tensorflow-js中运行的模型","children":[]},{"level":3,"title":"（2）包括tfjs_layers_model、tfjs_graph_model等","slug":"_2-包括tfjs-layers-model、tfjs-graph-model等","link":"#_2-包括tfjs-layers-model、tfjs-graph-model等","children":[]},{"level":3,"title":"（3）通过开源网站、TFJS生成、Python模型转化等方式获取","slug":"_3-通过开源网站、tfjs生成、python模型转化等方式获取","link":"#_3-通过开源网站、tfjs生成、python模型转化等方式获取","children":[]}]},{"level":2,"title":"3、为何要进行互转？","slug":"_3、为何要进行互转","link":"#_3、为何要进行互转","children":[{"level":3,"title":"（1）Python to JavaScript：JavaScript模型可以在浏览器中运行","slug":"_1-python-to-javascript-javascript模型可以在浏览器中运行","link":"#_1-python-to-javascript-javascript模型可以在浏览器中运行","children":[]},{"level":3,"title":"（2）JavaScript to Python：少见，为了在更多平台运行","slug":"_2-javascript-to-python-少见-为了在更多平台运行","link":"#_2-javascript-to-python-少见-为了在更多平台运行","children":[]},{"level":3,"title":"（3）JavaScript to JavaScript：分片/量化/加速","slug":"_3-javascript-to-javascript-分片-量化-加速","link":"#_3-javascript-to-javascript-分片-量化-加速","children":[]}]},{"level":2,"title":"4、模型互转操作步骤","slug":"_4、模型互转操作步骤","link":"#_4、模型互转操作步骤","children":[]}]},{"level":1,"title":"二、安装 Tensorflow.js Converter","slug":"二、安装-tensorflow-js-converter","link":"#二、安装-tensorflow-js-converter","children":[{"level":2,"title":"1、操作步骤","slug":"_1、操作步骤","link":"#_1、操作步骤","children":[]},{"level":2,"title":"2、安装过程","slug":"_2、安装过程","link":"#_2、安装过程","children":[]}]},{"level":1,"title":"三、Python与JavaScript模型互转","slug":"三、python与javascript模型互转","link":"#三、python与javascript模型互转","children":[{"level":2,"title":"1、操作步骤","slug":"_1、操作步骤-1","link":"#_1、操作步骤-1","children":[]},{"level":2,"title":"2、举例说明","slug":"_2、举例说明","link":"#_2、举例说明","children":[]}]},{"level":1,"title":"四、JavaScript的模型互转：分片、量化、加速","slug":"四、javascript的模型互转-分片、量化、加速","link":"#四、javascript的模型互转-分片、量化、加速","children":[{"level":2,"title":"1、操作步骤","slug":"_1、操作步骤-2","link":"#_1、操作步骤-2","children":[]},{"level":2,"title":"2、举例说明","slug":"_2、举例说明-1","link":"#_2、举例说明-1","children":[{"level":3,"title":"（1）分片","slug":"_1-分片","link":"#_1-分片","children":[]},{"level":3,"title":"（2）量化","slug":"_2-量化","link":"#_2-量化","children":[]},{"level":3,"title":"（3）加速","slug":"_3-加速","link":"#_3-加速","children":[]}]}]}],"relativePath":"column/MachineLearning/Tensorflow/14_ModelTransfer.md","filePath":"column/MachineLearning/Tensorflow/14_ModelTransfer.md","lastUpdated":1720881464000}'),o={name:"column/MachineLearning/Tensorflow/14_ModelTransfer.md"},e=l(`<h1 id="一、任务简介" tabindex="-1">一、任务简介 <a class="header-anchor" href="#一、任务简介" aria-label="Permalink to &quot;一、任务简介&quot;">​</a></h1><h2 id="_1、什么是python模型" tabindex="-1">1、什么是Python模型？ <a class="header-anchor" href="#_1、什么是python模型" aria-label="Permalink to &quot;1、什么是Python模型？&quot;">​</a></h2><ul><li>简单来说，<strong>Python模型</strong>就是通过<strong>Python版本的Tensorflow</strong>或者<strong>Keras</strong>所生成的模型，我们姑且称它为<strong>Python模型</strong>。</li><li><code>Keras</code> 也是一个深度学习的框架，而<code>Tensorflow</code>也是支持 <code>Keras</code> 所拥有的<strong>API</strong>和<strong>语法</strong>的。</li><li>Python 模型具体包含哪些格式？比如说 <code>Tensorflow</code> 的 <code>Saved Model</code> 格式，这是 <code>Tensorflow</code> 上非常通用的格式，以及 <code>Keras</code> 的 <code>HDF5 Model</code> 等等，这些都是比较通用的格式。</li><li>那可以从哪里来获取这些 <code>Python</code> 模型？我们知道有很多好心人已经训练好了一些模型，放到了网上，让我们可以直接下载这些预训练好的模型，直接拿来用。所以说第一个获取方式就是从开源网站上下载这些 <code>Python</code> 模型。</li><li>除此之外，如果你的团队里有算法部门，那么算法同事也会训练一些 <code>Python</code> 模型，提供给你，让你可以转为可以在 <code>Javascript</code> 上运行的模型，我们就姑且称这些模型为 <code>Javascript</code> 模型。</li><li><strong>Javascript模型</strong>也不是一个很官方的叫法，只是为了跟 <strong>Python模型</strong>形成对比。</li></ul><h2 id="_2、什么是javascript模型" tabindex="-1">2、什么是JavaScript模型 <a class="header-anchor" href="#_2、什么是javascript模型" aria-label="Permalink to &quot;2、什么是JavaScript模型&quot;">​</a></h2><h3 id="_1-可以在tensorflow-js中运行的模型" tabindex="-1">（1）<strong>可以在Tensorflow.js中运行的模型</strong> <a class="header-anchor" href="#_1-可以在tensorflow-js中运行的模型" aria-label="Permalink to &quot;（1）**可以在Tensorflow.js中运行的模型**&quot;">​</a></h3><ul><li>什么是Javascript模型？简单来说就是可以在 <code>Tensorflow.js</code> 中运行的模型。</li><li>既然可以在 <code>Tensorflow.js</code> 中运行，那么自然而然就可以在浏览器和这个 <code>Node.js</code> 中运行了，这极大地方便了前端对模型的部署。</li><li>之前Python模型只能在Python环境里运行，现在不仅能在浏览器里面直接跑，而且还能在<code>Node.js</code>里运行了。</li><li>这样一来我们就可以把它部署到更多的前端应用里了，不需要跟<strong>服务端</strong>进行网络请求，就可以直接进行预测了。</li></ul><h3 id="_2-包括tfjs-layers-model、tfjs-graph-model等" tabindex="-1">（2）<strong>包括tfjs_layers_model、tfjs_graph_model等</strong> <a class="header-anchor" href="#_2-包括tfjs-layers-model、tfjs-graph-model等" aria-label="Permalink to &quot;（2）**包括tfjs_layers_model、tfjs_graph_model等**&quot;">​</a></h3><ul><li>那么Javascript模型包含哪些格式？</li><li>主要有两种格式，第一个是 <code>tfjs_layers_model</code>，第二个是 <code>tfjs_graph_model</code>。</li></ul><h3 id="_3-通过开源网站、tfjs生成、python模型转化等方式获取" tabindex="-1">（3）通过开源网站、TFJS生成、Python模型转化等方式获取 <a class="header-anchor" href="#_3-通过开源网站、tfjs生成、python模型转化等方式获取" aria-label="Permalink to &quot;（3）通过开源网站、TFJS生成、Python模型转化等方式获取&quot;">​</a></h3><p>最后我们说一下如何获取Javascript模型？</p><ul><li>第一种获取方法就是从开源网站上预训练模型，不仅包含<strong>Python格式</strong>的，也有<strong>Javascript格式</strong>的，我们同样可以从一些开源网站上直接下载，直接拿来用。</li><li>第二种方式是通过 <code>Tensorflow.js</code> 来生成，我们可以在浏览器里面训练好，然后保存成文件或者像二进制这样的形式，把它保存成已经训练好的模型文件。</li><li>第三种就是通过<strong>Python模型转化</strong>而来，在真实的实际工作中，用第三种方式的情况会比较多。也就是平常我们会用<strong>Python版</strong>的<code>Tensorflow</code>来训练模型，然后转化为 <code>Tensorflow.js</code> 来运行。</li></ul><h2 id="_3、为何要进行互转" tabindex="-1">3、为何要进行互转？ <a class="header-anchor" href="#_3、为何要进行互转" aria-label="Permalink to &quot;3、为何要进行互转？&quot;">​</a></h2><p>接下来，我们聊一下为何要进行互转？</p><h3 id="_1-python-to-javascript-javascript模型可以在浏览器中运行" tabindex="-1">（1）Python to JavaScript：JavaScript模型可以在浏览器中运行 <a class="header-anchor" href="#_1-python-to-javascript-javascript模型可以在浏览器中运行" aria-label="Permalink to &quot;（1）Python to JavaScript：JavaScript模型可以在浏览器中运行&quot;">​</a></h3><ul><li>第一种方式是从<strong>Python模型</strong>到<strong>Javascript模型</strong>，为何要这样做？ <strong>Python模型</strong>不是更通用吗？为何还要转化为 <strong>Javascript格式</strong>？这是因为<code>Javascript</code>的模型可以在浏览器中直接运行，而<code>Python</code>的模型是不可以的。</li><li>我们训练好的模型想要在实际的工业场景下落地， <code>Javascript</code> 运行环境是绝对不能少的。像我们平常所接触到的前端网页游戏、网页应用、小程序、甚至在一些嵌入式的设备里面，都是由<code>Javascript</code>环境运行起来的。</li><li>因此，如果想让你所写的机器学习模型能够被普罗大众所使用的话，那么兼容 <strong>Javascript环境</strong>是必不可少的环节之一。</li><li>当然，<strong>Javascript环境</strong>运行模型也会引发一些问题。比如说有的模型特别大，运行在浏览器里面其实是非常卡顿的，因为它非常的吃内存。不光如此，如果模型特别大的话，光下载模型文件都需要很久很久。我们可以想象一下，一个 <code>1G</code> 的模型，你在下载的时候就要花费很长的一段时间了。</li><li>除了一些大模型无法部署的问题之外，还有模型安全的问题。比如说你辛辛苦苦训练了一个模型，结果别人直接把你的模型给下载走了，放到他的软件里去跑，那好像就很吃亏了。所以也不是所有的<strong>Python模型</strong>都会转为<strong>Javascript模型</strong>的。</li><li>但在某些场景下，这个操作却是必须的。比如说淘宝的美妆应用，为了获取一些更快的实时的一种速度，我们就把模型下载到了<strong>浏览器</strong>里面，这样可以达到即使在没有服务器交互的情况下，加载速度也是非常快速的。</li><li>还有一些开源的小游戏，我们也需要部署到浏览器里面，以获取到浏览器的各种用户交互能力，比如说摄像头、麦克风等等。</li><li>综上所述，要不要把<strong>Python模型</strong>转换为<strong>Javascript模型</strong>，还是要看具体场景综合来分析，但是这个技术还是非常值得我们去学习的。</li></ul><h3 id="_2-javascript-to-python-少见-为了在更多平台运行" tabindex="-1">（2）JavaScript to Python：少见，为了在更多平台运行 <a class="header-anchor" href="#_2-javascript-to-python-少见-为了在更多平台运行" aria-label="Permalink to &quot;（2）JavaScript to Python：少见，为了在更多平台运行&quot;">​</a></h3><p>聊完了这个<strong>Python模型</strong>转为<strong>Javascript模型</strong>之后，我们再来看一下这个<strong>Javascript模型</strong>转为<strong>Python模型</strong>？</p><ul><li>这种转换其实是非常少见的，但是存在即合理。</li><li>猜测这种方法可能是为了让 <code>Javascript</code> 训练的模型在更多的平台上运行。随着 <code>Tensorflow.js</code> 支持 <code>Node.js</code> 环境之后，使用 <code>Javascript</code> 也可以进行大规模的模型训练了，而且速度丝毫不比 <code>Python</code> 差。因为它们背后运行的都是 <code>C++</code>，<code>Python</code>和<code>JS</code>就可以理解为是<strong>桥</strong>，而且就语言来说， <code>Javascript</code> 其实比 <code>Python</code> 还要快。</li><li>所以根据这种情况，假以时日，相信随着社区成长起来之后，说不定<strong>Javascript模型</strong>也会变得非常多，非常通用。到时候Python社区可能会来Javascript社区来获取营养，那个时候可能就会有更多的这种<strong>Javascript模型</strong>转为<strong>Python模型</strong>的需求了。</li></ul><h3 id="_3-javascript-to-javascript-分片-量化-加速" tabindex="-1">（3）JavaScript to JavaScript：分片/量化/加速 <a class="header-anchor" href="#_3-javascript-to-javascript-分片-量化-加速" aria-label="Permalink to &quot;（3）JavaScript to JavaScript：分片/量化/加速&quot;">​</a></h3><p>那么最后一种是 <strong>Javascript模型</strong>到 <strong>Javascript模型</strong>的操作，主要包含：<strong>分片、量化和加速</strong>。这几个东西分别是👇🏻：</p><ul><li>分片就是把一个模型文件分成多个模型文件，比如说把一个<code>4M</code>的模型文件分成<code>几十k</code>的模型文件，就是把它给分开了，切开了。</li><li>这么做的好处是可以利用<strong>浏览器的并发请求能力</strong>来更快的把模型加载到浏览器中。比如说我们之前把一个<code>4M</code>的模型文件加载到浏览器里面可能需要很长时间，可能需要几秒钟。但如果我们把它分片切成多个并发加载的话就是同时加载的话，那么速度就会得到成倍的提升。</li><li>第二个功能是量化。简单来说这个量化就是<strong>牺牲一部分精度</strong>来把模型压缩的更小。那么为什么要把模型压缩的更小呢？其实还是为了能更快地去部署，就是让模型的下载速度更快一点。</li><li>最后一个是<strong>加速</strong>。加速其实就是让模型预测的时间更短，让模型可以更快地进行预测，对预测速度进行加速。</li><li>那么这个加速是怎么实现的？我们会把layers模型转为graph模型，这样做，graph模型的速度就会相对会快一点，这是加速中常用的一个方法。</li></ul><h2 id="_4、模型互转操作步骤" tabindex="-1">4、模型互转操作步骤 <a class="header-anchor" href="#_4、模型互转操作步骤" aria-label="Permalink to &quot;4、模型互转操作步骤&quot;">​</a></h2><ul><li><strong>安装</strong>**<code>Tensorflow.js Converter</code>** —— 将会使用<code>Conda</code>这个工具，来创建一个独立的虚拟的<code>Python</code>环境，专门给<code>converter</code>使用。</li><li><strong>Python 与 JavaScript 模型互转</strong> —— 将会把<code>Keras</code>中的<strong>H5模型</strong>，转化为<code>JavaScript</code>中<strong>tfjs_layers_model格式</strong>的模型，以及互转回来的过程。</li><li><strong>JavaScript模型的互转：分片、量化、加速</strong> —— 在每次转换完之后，会再使用相应的程序来运行一下，看一下最终模型的效果好不好。</li></ul><h1 id="二、安装-tensorflow-js-converter" tabindex="-1">二、安装 Tensorflow.js Converter <a class="header-anchor" href="#二、安装-tensorflow-js-converter" aria-label="Permalink to &quot;二、安装 Tensorflow.js Converter&quot;">​</a></h1><h2 id="_1、操作步骤" tabindex="-1">1、操作步骤 <a class="header-anchor" href="#_1、操作步骤" aria-label="Permalink to &quot;1、操作步骤&quot;">​</a></h2><ul><li>安装<code>Conda</code> —— 用来辅助我们创建虚拟且独立的<code>Python</code>环境</li><li>使用<code>Conda</code>安装<strong>Python虚拟环境</strong></li><li>使用<code>Python</code>虚拟环境安装<code>Tensorflow.js Converter</code></li></ul><h2 id="_2、安装过程" tabindex="-1">2、安装过程 <a class="header-anchor" href="#_2、安装过程" aria-label="Permalink to &quot;2、安装过程&quot;">​</a></h2><p><strong>Converter相关：</strong></p><ul><li>tensorflow.js代码库：<a href="https://github.com/tensorflow/tfjs/" target="_blank" rel="noreferrer">https://github.com/tensorflow/tfjs/</a></li><li>搜索<code>Tensorflow.js Converter</code>，点击进入：<a href="https://github.com/tensorflow/tfjs/tree/master/tfjs-converter" target="_blank" rel="noreferrer">https://github.com/tensorflow/tfjs/tree/master/tfjs-converter</a></li><li></li></ul><p><strong>关于conda的安装：</strong></p><ul><li>访问网站：<a href="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noreferrer">anaconda | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></li><li>拉到最下方，也就是最新版本，然后选择和自己电脑匹配的配置进行安装即可。</li></ul><p><strong>相关命令行解析：</strong></p><div class="language-Bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">安装一个tfjs的虚拟环境，python版本为3.8</span></span>
<span class="line"><span style="color:#B392F0;">conda</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tfjs</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">python=</span><span style="color:#79B8FF;">3.8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">查看当前环境信息</span></span>
<span class="line"><span style="color:#B392F0;">conda</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--envs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">删除某个环境</span></span>
<span class="line"><span style="color:#B392F0;">conda</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">remove</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tfjs</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--all</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">使用tfjs环境</span></span>
<span class="line"><span style="color:#B392F0;">conda</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activate</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tfjs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">退出tfjs环境</span></span>
<span class="line"><span style="color:#B392F0;">conda</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deactivate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">查看python版本</span></span>
<span class="line"><span style="color:#B392F0;">python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--version</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">安装一个tfjs的虚拟环境，python版本为3.8</span></span>
<span class="line"><span style="color:#6F42C1;">conda</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tfjs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python=</span><span style="color:#005CC5;">3.8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">查看当前环境信息</span></span>
<span class="line"><span style="color:#6F42C1;">conda</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--envs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">删除某个环境</span></span>
<span class="line"><span style="color:#6F42C1;">conda</span><span style="color:#24292E;"> </span><span style="color:#032F62;">remove</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tfjs</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--all</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">使用tfjs环境</span></span>
<span class="line"><span style="color:#6F42C1;">conda</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activate</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tfjs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">退出tfjs环境</span></span>
<span class="line"><span style="color:#6F42C1;">conda</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deactivate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">查看python版本</span></span>
<span class="line"><span style="color:#6F42C1;">python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><strong>虚拟环境安装成功后相关操作：</strong></p><div class="language-Bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">使用pip安装tensorflowjs</span></span>
<span class="line"><span style="color:#B392F0;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tensorflowjs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">验证tensoflow.js安装后是否能正常使用</span></span>
<span class="line"><span style="color:#B392F0;">tensorflowjs_converter</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-h</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">使用pip安装tensorflowjs</span></span>
<span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tensorflowjs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">验证tensoflow.js安装后是否能正常使用</span></span>
<span class="line"><span style="color:#6F42C1;">tensorflowjs_converter</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-h</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h1 id="三、python与javascript模型互转" tabindex="-1">三、Python与JavaScript模型互转 <a class="header-anchor" href="#三、python与javascript模型互转" aria-label="Permalink to &quot;三、Python与JavaScript模型互转&quot;">​</a></h1><h2 id="_1、操作步骤-1" tabindex="-1">1、操作步骤 <a class="header-anchor" href="#_1、操作步骤-1" aria-label="Permalink to &quot;1、操作步骤&quot;">​</a></h2><p><strong>Python模型转JS模型：</strong></p><p><a href="https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#python-to-javascript" target="_blank" rel="noreferrer">https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#python-to-javascript</a></p><p><strong>JS模型转Python模型：</strong></p><p><a href="https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#javascript-to-python" target="_blank" rel="noreferrer">https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#javascript-to-python</a></p><h2 id="_2、举例说明" tabindex="-1"><strong>2、举例说明</strong> <a class="header-anchor" href="#_2、举例说明" aria-label="Permalink to &quot;**2、举例说明**&quot;">​</a></h2><p>py模型转成js模型：</p><div class="language-Bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">输入是keras格式，输出是tfjs_layers_model格式。</span></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">第一个输入是py模型的路径，第二个路径是转成js模型后，输出的路径</span></span>
<span class="line"><span style="color:#B392F0;">tensorflowjs_converter</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--input_format=keras</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--output_format=tfjs_layers_model</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">data/mobilenet/keras.h5</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">data/mobilenet/web_model2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">输入是keras格式，输出是tfjs_layers_model格式。</span></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">第一个输入是py模型的路径，第二个路径是转成js模型后，输出的路径</span></span>
<span class="line"><span style="color:#6F42C1;">tensorflowjs_converter</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--input_format=keras</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--output_format=tfjs_layers_model</span><span style="color:#24292E;"> </span><span style="color:#032F62;">data/mobilenet/keras.h5</span><span style="color:#24292E;"> </span><span style="color:#032F62;">data/mobilenet/web_model2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>js模型转成py模型：</p><div class="language-Bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tensorflowjs_converter</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--input_format=tfjs_layers_model</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--output_format=keras</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">data/mobilenet/web_model2/model.json</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">data/mobilenet/keras2.h5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tensorflowjs_converter</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--input_format=tfjs_layers_model</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--output_format=keras</span><span style="color:#24292E;"> </span><span style="color:#032F62;">data/mobilenet/web_model2/model.json</span><span style="color:#24292E;"> </span><span style="color:#032F62;">data/mobilenet/keras2.h5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="四、javascript的模型互转-分片、量化、加速" tabindex="-1">四、JavaScript的模型互转：分片、量化、加速 <a class="header-anchor" href="#四、javascript的模型互转-分片、量化、加速" aria-label="Permalink to &quot;四、JavaScript的模型互转：分片、量化、加速&quot;">​</a></h1><h2 id="_1、操作步骤-2" tabindex="-1">1、操作步骤 <a class="header-anchor" href="#_1、操作步骤-2" aria-label="Permalink to &quot;1、操作步骤&quot;">​</a></h2><p><strong>阐述说明：</strong></p><ul><li><strong>分片</strong> —— 把一个模型文件切成很多片，这样每一片的体积都会变小。可以理解为利用浏览器的并发加载能力，就可以更快地把模型加载到浏览器中，可以提升模型的下载速度。</li><li><strong>量化</strong> —— 量化操作就是通过牺牲一部分精度来<strong>压缩模型的大小</strong>，这样也可以起到更快加载模型的效果。</li><li><strong>加速</strong> —— 通过转为<code>tfjs_graph_model</code> 来加速模型。</li></ul><p><strong>操作方式：</strong></p><ul><li><a href="https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#javascript-to-javascript" target="_blank" rel="noreferrer">https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#javascript-to-javascript</a></li></ul><h2 id="_2、举例说明-1" tabindex="-1">2、举例说明 <a class="header-anchor" href="#_2、举例说明-1" aria-label="Permalink to &quot;2、举例说明&quot;">​</a></h2><h3 id="_1-分片" tabindex="-1">（1）分片 <a class="header-anchor" href="#_1-分片" aria-label="Permalink to &quot;（1）分片&quot;">​</a></h3><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// --weight_shard_size_bytes=100000 表示指定分片后每一个的大小，100kb</span></span>
<span class="line"><span style="color:#E1E4E8;">tensorflowjs_converter</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">input_format</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">tfjs_layers_model</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">output_format</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">tfjs_layers_model</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">weight_shard_size_bytes</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">100000</span></span>
<span class="line"><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">mobilenet</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">web_model</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">model.json</span></span>
<span class="line"><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">mobilenet</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sharded_model</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// --weight_shard_size_bytes=100000 表示指定分片后每一个的大小，100kb</span></span>
<span class="line"><span style="color:#24292E;">tensorflowjs_converter</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">input_format</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">tfjs_layers_model</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">output_format</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">tfjs_layers_model</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">weight_shard_size_bytes</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">100000</span></span>
<span class="line"><span style="color:#24292E;">data</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">mobilenet</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">web_model</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">model.json</span></span>
<span class="line"><span style="color:#24292E;">data</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">mobilenet</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sharded_model</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_2-量化" tabindex="-1">（2）量化 <a class="header-anchor" href="#_2-量化" aria-label="Permalink to &quot;（2）量化&quot;">​</a></h3><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// --quantization_bytes=2 表示量化参数设置为2</span></span>
<span class="line"><span style="color:#E1E4E8;">tensorflowjs_converter</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">input_format</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">tfjs_layers_model</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">output_format</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">tfjs_layers_model</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">quantization_bytes</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">mobilenet</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">web_model</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">model.json</span></span>
<span class="line"><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">mobilenet</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">quantization_model</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// --quantization_bytes=2 表示量化参数设置为2</span></span>
<span class="line"><span style="color:#24292E;">tensorflowjs_converter</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">input_format</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">tfjs_layers_model</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">output_format</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">tfjs_layers_model</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">quantization_bytes</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">data</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">mobilenet</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">web_model</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">model.json</span></span>
<span class="line"><span style="color:#24292E;">data</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">mobilenet</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">quantization_model</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_3-加速" tabindex="-1">（3）加速 <a class="header-anchor" href="#_3-加速" aria-label="Permalink to &quot;（3）加速&quot;">​</a></h3><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 输出格式改为tfjs_graph_model</span></span>
<span class="line"><span style="color:#E1E4E8;">tensorflowjs_converter</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">input_format</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">tfjs_layers_model</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">output_format</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">tfjs_graph_model</span></span>
<span class="line"><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">mobilenet</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">web_model</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">model.json</span></span>
<span class="line"><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">mobilenet</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">graph_model</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 输出格式改为tfjs_graph_model</span></span>
<span class="line"><span style="color:#24292E;">tensorflowjs_converter</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">input_format</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">tfjs_layers_model</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">output_format</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">tfjs_graph_model</span></span>
<span class="line"><span style="color:#24292E;">data</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">mobilenet</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">web_model</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">model.json</span></span>
<span class="line"><span style="color:#24292E;">data</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">mobilenet</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">graph_model</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,59),p=[e];function t(r,c,i,y,d,h){return a(),n("div",null,p)}const b=s(o,[["render",t]]);export{u as __pageData,b as default};
